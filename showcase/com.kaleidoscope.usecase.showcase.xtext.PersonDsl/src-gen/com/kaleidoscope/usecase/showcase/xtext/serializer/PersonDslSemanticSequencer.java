/*
 * generated by Xtext 2.12.0
 */
package com.kaleidoscope.usecase.showcase.xtext.serializer;

import com.google.inject.Inject;
import com.kaleidoscope.usecase.showcase.xtext.personDsl.Person;
import com.kaleidoscope.usecase.showcase.xtext.personDsl.PersonContainer;
import com.kaleidoscope.usecase.showcase.xtext.personDsl.PersonDslPackage;
import com.kaleidoscope.usecase.showcase.xtext.services.PersonDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class PersonDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PersonDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PersonDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PersonDslPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case PersonDslPackage.PERSON_CONTAINER:
				sequence_PersonContainer(context, (PersonContainer) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     PersonContainer returns PersonContainer
	 *
	 * Constraint:
	 *     persons+=Person+
	 */
	protected void sequence_PersonContainer(ISerializationContext context, PersonContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (ID=EInt name=EString?)
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
