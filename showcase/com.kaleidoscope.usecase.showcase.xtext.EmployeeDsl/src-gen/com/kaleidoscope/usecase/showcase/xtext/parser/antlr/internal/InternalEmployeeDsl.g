/*
 * generated by Xtext 2.12.0
 */
grammar InternalEmployeeDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.kaleidoscope.usecase.showcase.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.kaleidoscope.usecase.showcase.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.kaleidoscope.usecase.showcase.xtext.services.EmployeeDslGrammarAccess;

}

@parser::members {

 	private EmployeeDslGrammarAccess grammarAccess;

    public InternalEmployeeDslParser(TokenStream input, EmployeeDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "EmployeeContainer";
   	}

   	@Override
   	protected EmployeeDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleEmployeeContainer
entryRuleEmployeeContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmployeeContainerRule()); }
	iv_ruleEmployeeContainer=ruleEmployeeContainer
	{ $current=$iv_ruleEmployeeContainer.current; }
	EOF;

// Rule EmployeeContainer
ruleEmployeeContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEmployeeContainerAccess().getEmployeesEmployeeParserRuleCall_0());
			}
			lv_employees_0_0=ruleEmployee
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEmployeeContainerRule());
				}
				add(
					$current,
					"employees",
					lv_employees_0_0,
					"com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.Employee");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEmployee
entryRuleEmployee returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmployeeRule()); }
	iv_ruleEmployee=ruleEmployee
	{ $current=$iv_ruleEmployee.current; }
	EOF;

// Rule Employee
ruleEmployee returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmployeeAccess().getEmployeeAction_0(),
					$current);
			}
		)
		otherlv_1='Employee'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmployeeAccess().getEmployeeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEmployeeAccess().getIDEIntParserRuleCall_2_0());
				}
				lv_ID_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEmployeeRule());
					}
					set(
						$current,
						"ID",
						lv_ID_2_0,
						"com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getEmployeeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='name'
			{
				newLeafNode(otherlv_4, grammarAccess.getEmployeeAccess().getNameKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEmployeeAccess().getNameEStringParserRuleCall_4_1_0());
					}
					lv_name_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEmployeeRule());
						}
						set(
							$current,
							"name",
							lv_name_5_0,
							"com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='salary'
			{
				newLeafNode(otherlv_6, grammarAccess.getEmployeeAccess().getSalaryKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEmployeeAccess().getSalaryEIntParserRuleCall_5_1_0());
					}
					lv_salary_7_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEmployeeRule());
						}
						set(
							$current,
							"salary",
							lv_salary_7_0,
							"com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getEmployeeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
