/*
 * generated by Xtext 2.12.0
 */
package com.kaleidoscope.usecase.showcase.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EmployeeDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EmployeeContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.EmployeeContainer");
		private final Assignment cEmployeesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEmployeesEmployeeParserRuleCall_0 = (RuleCall)cEmployeesAssignment.eContents().get(0);
		
		//EmployeeContainer:
		//	employees+=Employee*;
		@Override public ParserRule getRule() { return rule; }
		
		//employees+=Employee*
		public Assignment getEmployeesAssignment() { return cEmployeesAssignment; }
		
		//Employee
		public RuleCall getEmployeesEmployeeParserRuleCall_0() { return cEmployeesEmployeeParserRuleCall_0; }
	}
	public class EmployeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.Employee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmployeeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEmployeeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIDEIntParserRuleCall_2_0 = (RuleCall)cIDAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNameKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSalaryKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSalaryAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSalaryEIntParserRuleCall_5_1_0 = (RuleCall)cSalaryAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Employee:
		//	{Employee}
		//	'Employee'
		//	ID=EInt
		//	'{' ('name' name=EString)? ('salary' salary=EInt)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Employee} 'Employee' ID=EInt '{' ('name' name=EString)? ('salary' salary=EInt)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Employee}
		public Action getEmployeeAction_0() { return cEmployeeAction_0; }
		
		//'Employee'
		public Keyword getEmployeeKeyword_1() { return cEmployeeKeyword_1; }
		
		//ID=EInt
		public Assignment getIDAssignment_2() { return cIDAssignment_2; }
		
		//EInt
		public RuleCall getIDEIntParserRuleCall_2_0() { return cIDEIntParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('name' name=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'name'
		public Keyword getNameKeyword_4_0() { return cNameKeyword_4_0; }
		
		//name=EString
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_1_0() { return cNameEStringParserRuleCall_4_1_0; }
		
		//('salary' salary=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'salary'
		public Keyword getSalaryKeyword_5_0() { return cSalaryKeyword_5_0; }
		
		//salary=EInt
		public Assignment getSalaryAssignment_5_1() { return cSalaryAssignment_5_1; }
		
		//EInt
		public RuleCall getSalaryEIntParserRuleCall_5_1_0() { return cSalaryEIntParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final EmployeeContainerElements pEmployeeContainer;
	private final EmployeeElements pEmployee;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EmployeeDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEmployeeContainer = new EmployeeContainerElements();
		this.pEmployee = new EmployeeElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.kaleidoscope.usecase.showcase.xtext.EmployeeDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EmployeeContainer:
	//	employees+=Employee*;
	public EmployeeContainerElements getEmployeeContainerAccess() {
		return pEmployeeContainer;
	}
	
	public ParserRule getEmployeeContainerRule() {
		return getEmployeeContainerAccess().getRule();
	}
	
	//Employee:
	//	{Employee}
	//	'Employee'
	//	ID=EInt
	//	'{' ('name' name=EString)? ('salary' salary=EInt)?
	//	'}';
	public EmployeeElements getEmployeeAccess() {
		return pEmployee;
	}
	
	public ParserRule getEmployeeRule() {
		return getEmployeeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
