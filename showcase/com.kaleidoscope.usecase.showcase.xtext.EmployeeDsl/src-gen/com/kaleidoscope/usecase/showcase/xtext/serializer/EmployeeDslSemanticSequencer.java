/*
 * generated by Xtext 2.12.0
 */
package com.kaleidoscope.usecase.showcase.xtext.serializer;

import com.google.inject.Inject;
import com.kaleidoscope.usecase.showcase.xtext.employeeDsl.Employee;
import com.kaleidoscope.usecase.showcase.xtext.employeeDsl.EmployeeContainer;
import com.kaleidoscope.usecase.showcase.xtext.employeeDsl.EmployeeDslPackage;
import com.kaleidoscope.usecase.showcase.xtext.services.EmployeeDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class EmployeeDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EmployeeDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EmployeeDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EmployeeDslPackage.EMPLOYEE:
				sequence_Employee(context, (Employee) semanticObject); 
				return; 
			case EmployeeDslPackage.EMPLOYEE_CONTAINER:
				sequence_EmployeeContainer(context, (EmployeeContainer) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EmployeeContainer returns EmployeeContainer
	 *
	 * Constraint:
	 *     employees+=Employee+
	 */
	protected void sequence_EmployeeContainer(ISerializationContext context, EmployeeContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Employee returns Employee
	 *
	 * Constraint:
	 *     (ID=EInt name=EString? salary=EInt?)
	 */
	protected void sequence_Employee(ISerializationContext context, Employee semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
