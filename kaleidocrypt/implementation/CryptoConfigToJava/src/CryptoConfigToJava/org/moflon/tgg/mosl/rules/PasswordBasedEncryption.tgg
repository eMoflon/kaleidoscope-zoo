#using CryptoConfigToJava.*
#using AttrCondDefLibrary.*

#rule PasswordBasedEncryption #extends PerformGetKeyMethod #with CryptoConfigToJava


#source { 
	++task:Task{
		description := "PasswordBasedEncryption"
		++ -algorithms->sbc
		++ -algorithms->kda
	}
	++sbc:SymmetricBlockCipher
	++kda:KeyDerivationAlgorithm
}

#target {
	++javaPackage:JavaPackage{
		++ -cunits->kdaJcu
		++ -cunits->sbcJcu
	}
	
	++sbcJcu:JavaCompilationUnit{
		++ -methods->methodPerformEncryption
		++ -methods->methodEncryption
	}
	++methodEncryption:JavaWorkflowMethod{
		name:="encrypt"
		modifier:="public"
		type:="byte[] "
		++ -params->dataEncryption
		++ -params->keyEncryption
		++ -statements -> statRetPerformEncryption
	}
	++keyEncryption:JavaVariableDeclaration{
		name:="key"
		type:="SecretKey"
		index := 1
	}
	++dataEncryption:JavaVariableDeclaration{
		name:="data"
		type:="byte[]"
		index := 0
	}
	
	++statRetPerformEncryption:JavaStatement{
		return:=true
		++ -expr -> exprRetPerformEncryption
	}
	++exprRetPerformEncryption:JavaMethodInvocation{
		name:="performEncryption"
				
		++ -arguments -> exprNameModePadding
		++ -arguments -> exprKeyName
		++ -arguments -> exprDataName
		
	}
	
	
	++exprNameModePadding:JavaLiteral{
		index:= 2
	}
	++exprDataName:JavaName{
		identifier:="data"
		index:= 0
	}
	++exprKeyName:JavaName{
		identifier:="key"
		index:= 1
	}
	++methodPerformEncryption:JavaOpaqueMethod{
		modifier:="private"
		name:="performEncryption"
		type:="byte[] "
		
		
	}
	
	
	
	++kdaJcu:JavaCompilationUnit{
		name:="KeyDeriv"
		++ -methods->methodPerformGetKey
		++ -methods->methodGetKey
	}
	++methodGetKey:JavaWorkflowMethod{
		name:="getKey"
		modifier:="public"
		type:="SecretKey "		
		++ -params->pwdDeclaration
		++ -statements -> statRetGetKey
	}
	++pwdDeclaration:JavaVariableDeclaration{
		name:="pwd"
		type:="char[]"
		index:= 0
	}
	
	++statRetGetKey:JavaStatement{
		return:=true
		++ -expr -> exprRetGetKey
	}
	++exprRetGetKey:JavaMethodInvocation{
		name:="performGetKey"
		++ -arguments -> exprPwdName
		++ -arguments -> exprIterationLiteral
		++ -arguments -> exprOutputSizeLiteral
		++ -arguments -> exprAlgNameLiteral
	}
	++exprPwdName:JavaName{
		identifier:="pwd"
		index := 0
	}
	++exprAlgNameLiteral:JavaLiteral{
		index := 1
	}
	++exprIterationLiteral:JavaLiteral{
		index := 2
	}
	
	++exprOutputSizeLiteral:JavaLiteral{
		index := 3
	}
	
	

	
	++methodPerformGetKey:JavaOpaqueMethod
}

#correspondence {
	++ t2c:TaskToJavaPackage{
		#src->task
		#trg->javaPackage
	}
	++ sbc2Jcu:SymmetricBlockCipherToJcu{
		#src->sbc
		#trg->sbcJcu
	}
	++ kda2Jcu:KeyDerivationAlgorithmToJcu{
		#src->kda
		#trg->kdaJcu
	}
}

#attributeConditions {
	eq(task.package, javaPackage.name)
	setDefaultStringIfNull(task.package, "Crypto")
	setDefaultStringIfNull(sbcJcu.name, "Enc")
	
	setDefaultStringIfNull(methodPerformEncryption.parameters, "byte[] data,SecretKey key,String encryptPassingArgument")
	setDefaultStringIfNull(methodPerformEncryption.index, 0)
	setDefaultStringIfNull(methodEncryption.index, 1)
	setDefaultStringIfNull(methodPerformEncryption.body, "{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n")
	nameModePadding(sbc.name, sbc.mode, sbc.padding, exprNameModePadding.value)
	setDefaultStringIfNull(methodPerformEncryption.throws,"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException")
	setDefaultStringIfNull(methodEncryption.throws,"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException")
	
	
	eq(exprIterationLiteral.value, kda.iterations)
	eq(exprOutputSizeLiteral.value, kda.outputSize)
	eq(exprAlgNameLiteral.value, kda.name)
	setDefaultStringIfNull(methodPerformGetKey.index, 0)
	setDefaultStringIfNull(methodGetKey.index, 1)
	setDefaultStringIfNull(methodPerformGetKey.body, "{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n")
	setDefaultStringIfNull(methodPerformGetKey.throws,"NoSuchAlgorithmException, InvalidKeySpecException")
	setDefaultStringIfNull(methodGetKey.throws,"NoSuchAlgorithmException, InvalidKeySpecException")
}
