#using CryptoConfigToJava.*
#using AttrCondDefLibrary.*

#rule SymmetricEncryptionTask #with CryptoConfigToJava

#source { 
	++task:Task{
		description := "SymmetricEncryption"
		++ -algorithms->sbc
	}
	++sbc:SymmetricBlockCipher
}

#target {
	++javaPackage:JavaPackage{
		++ -cunits->jcu
	}
	++jcu:JavaCompilationUnit{
		++ -methods->methodPerformEncryption
		++ -methods->methodEncryption
	}
	++methodEncryption:JavaWorkflowMethod{
		++ -params->dataEncryption
		++ -params->keyEncryption
		++ -statements -> statRetPerformEncryption
	}
	++keyEncryption:JavaVariableDeclaration{
		name:="key"
		type:="SecretKey"
		index := 1
	}
	++dataEncryption:JavaVariableDeclaration{
		name:="data"
		type:="byte[]"
		index := 0
	}
	
	
	++statRetPerformEncryption:JavaStatement{
		return:=true
		++ -expr -> exprRetPerformEncryption
	}
	++exprRetPerformEncryption:JavaMethodInvocation{
		name:="performEncryption"
				
		++ -arguments -> exprNameModePadding
		++ -arguments -> exprKeyName
		++ -arguments -> exprDataName
		
	}
	
	
	++exprNameModePadding:JavaLiteral
	++exprDataName:JavaName
	++exprKeyName:JavaName
	++methodPerformEncryption:JavaOpaqueMethod{
		name:="performEncryption"
		type:="byte[] "
	}
	
}

#correspondence {
	++ t2c:TaskToJavaPackage{
		#src->task
		#trg->javaPackage
	}
	++ sbc2Jcu:SymmetricBlockCipherToJcu{
		#src->sbc
		#trg->jcu
	}
}

#attributeConditions {
	
	setDefaultStringIfNull(methodEncryption.modifier, "public")
	setDefaultStringIfNull(methodEncryption.name, "encrypt")
	setDefaultStringIfNull(methodEncryption.type, "byte[] ")
	
	
	setDefaultStringIfNull(exprNameModePadding.index, 2)
	setDefaultStringIfNull(exprDataName.identifier, "data")
	setDefaultStringIfNull(exprDataName.index, 0)
	setDefaultStringIfNull(exprKeyName.identifier, "key")
	setDefaultStringIfNull(exprKeyName.index, 1)
	
	setDefaultStringIfNull(methodPerformEncryption.modifier, "private")
	setDefaultStringIfNull(methodPerformEncryption.index, 0)
	setDefaultStringIfNull(methodPerformEncryption.throws,"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException")
	setDefaultStringIfNull(methodPerformEncryption.parameters, "byte[] data,SecretKey key,String encryptPassingArgument")
	setDefaultStringIfNull(methodPerformEncryption.body, "{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n")
	
	
	setDefaultStringIfNull(methodEncryption.index, 1)
	setDefaultStringIfNull(task.package, "crypto")
	eq(task.package, javaPackage.name)
	setDefaultStringIfNull(jcu.name, "Enc")
	
	nameModePadding(sbc.name, sbc.mode, sbc.padding, exprNameModePadding.value)
	
	setDefaultStringIfNull(methodEncryption.throws,"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException")
	
	
}
