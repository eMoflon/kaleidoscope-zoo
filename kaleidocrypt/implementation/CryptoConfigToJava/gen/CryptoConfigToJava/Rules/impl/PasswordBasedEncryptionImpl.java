/**
 */
package CryptoConfigToJava.Rules.impl;

import CryptoAPIConfig.Algorithm;
import CryptoAPIConfig.CryptoAPIConfigFactory;
import CryptoAPIConfig.KeyDerivationAlgorithm;
import CryptoAPIConfig.SymmetricBlockCipher;
import CryptoAPIConfig.Task;

import CryptoConfigToJava.CryptoConfigToJavaFactory;
import CryptoConfigToJava.KeyDerivationAlgorithmToJcu;

import CryptoConfigToJava.Rules.PasswordBasedEncryption;
import CryptoConfigToJava.Rules.RulesPackage;

import CryptoConfigToJava.SymmetricBlockCipherToJcu;
import CryptoConfigToJava.TaskToJavaPackage;

import SimpleJava.JavaCompilationUnit;
import SimpleJava.JavaExpression;
import SimpleJava.JavaLiteral;
import SimpleJava.JavaMethod;
import SimpleJava.JavaMethodInvocation;
import SimpleJava.JavaName;
import SimpleJava.JavaOpaqueMethod;
import SimpleJava.JavaPackage;
import SimpleJava.JavaStatement;
import SimpleJava.JavaVariableDeclaration;
import SimpleJava.JavaWorkflowMethod;
import SimpleJava.SimpleJavaFactory;

import java.lang.Iterable;

import java.lang.reflect.InvocationTargetException;

import java.util.LinkedList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.tgg.language.csp.CSP;

import org.moflon.tgg.language.modelgenerator.RuleEntryContainer;

import org.moflon.tgg.runtime.AttributeConstraintsRuleResult;
import org.moflon.tgg.runtime.CCMatch;
import org.moflon.tgg.runtime.EMoflonEdge;
import org.moflon.tgg.runtime.EObjectContainer;
import org.moflon.tgg.runtime.IsApplicableMatch;
import org.moflon.tgg.runtime.IsApplicableRuleResult;
import org.moflon.tgg.runtime.Match;
import org.moflon.tgg.runtime.ModelgeneratorRuleResult;
import org.moflon.tgg.runtime.PerformRuleResult;
import org.moflon.tgg.runtime.RuntimeFactory;
import org.moflon.tgg.runtime.TripleMatch;

import org.moflon.tgg.runtime.impl.AbstractRuleImpl;
// <-- [user defined imports]
import org.moflon.tgg.csp.*;
import CryptoConfigToJava.csp.constraints.*;
import org.moflon.tgg.csp.constraints.*;
import org.moflon.tgg.language.csp.*;
import org.moflon.tgg.runtime.TripleMatchNodeMapping;
import java.util.Optional;
import org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper;
import SDMLanguage.expressions.ComparingOperator;
import org.moflon.tgg.runtime.TripleMatchNodeMapping;
import java.util.Optional;
import org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper;
import SDMLanguage.expressions.ComparingOperator;
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Password Based Encryption</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class PasswordBasedEncryptionImpl extends AbstractRuleImpl implements PasswordBasedEncryption {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PasswordBasedEncryptionImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.eINSTANCE.getPasswordBasedEncryption();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc) {

		Object[] result1_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_0_1_initialbindings_blackBBBBB(this, match, kda, task, sbc);
		if (result1_black == null) {
			throw new RuntimeException(
					"Pattern matching failed." + " Variables: " + "[this] = " + this + ", " + "[match] = " + match
							+ ", " + "[kda] = " + kda + ", " + "[task] = " + task + ", " + "[sbc] = " + sbc + ".");
		}

		Object[] result2_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_0_2_SolveCSP_bindingAndBlackFBBBBB(this, match, kda, task, sbc);
		if (result2_bindingAndBlack == null) {
			throw new RuntimeException(
					"Pattern matching failed." + " Variables: " + "[this] = " + this + ", " + "[match] = " + match
							+ ", " + "[kda] = " + kda + ", " + "[task] = " + task + ", " + "[sbc] = " + sbc + ".");
		}
		CSP csp = (CSP) result2_bindingAndBlack[0];
		// 
		if (PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_0_3_CheckCSP_expressionFBB(this, csp)) {

			Object[] result4_black = PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_0_4_collectelementstobetranslated_blackBBBB(match, kda, task, sbc);
			if (result4_black == null) {
				throw new RuntimeException("Pattern matching failed." + " Variables: " + "[match] = " + match + ", "
						+ "[kda] = " + kda + ", " + "[task] = " + task + ", " + "[sbc] = " + sbc + ".");
			}
			PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_0_4_collectelementstobetranslated_greenBBBBFF(
					match, kda, task, sbc);
			//nothing EMoflonEdge task__kda____algorithms = (EMoflonEdge) result4_green[4];
			//nothing EMoflonEdge task__sbc____algorithms = (EMoflonEdge) result4_green[5];

			Object[] result5_black = PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_0_5_collectcontextelements_blackBBBB(match, kda, task, sbc);
			if (result5_black == null) {
				throw new RuntimeException("Pattern matching failed." + " Variables: " + "[match] = " + match + ", "
						+ "[kda] = " + kda + ", " + "[task] = " + task + ", " + "[sbc] = " + sbc + ".");
			}
			// 
			PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_0_6_registerobjectstomatch_expressionBBBBB(this,
					match, kda, task, sbc);
			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_0_7_expressionF();
		} else {
			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_0_8_expressionF();
		}

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {

		Object[] result1_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_1_1_performtransformation_bindingAndBlackFFFFBB(this,
						isApplicableMatch);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
					+ "[isApplicableMatch] = " + isApplicableMatch + ".");
		}
		KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result1_bindingAndBlack[0];
		Task task = (Task) result1_bindingAndBlack[1];
		SymmetricBlockCipher sbc = (SymmetricBlockCipher) result1_bindingAndBlack[2];
		CSP csp = (CSP) result1_bindingAndBlack[3];
		Object[] result1_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_1_1_performtransformation_greenFFFFFFFFFFFFFFBFFFFFBFBFFFFB(kda, task,
						sbc, csp);
		JavaLiteral exprIterationLiteral = (JavaLiteral) result1_green[0];
		JavaPackage javaPackage = (JavaPackage) result1_green[1];
		JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result1_green[2];
		JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result1_green[3];
		SymmetricBlockCipherToJcu sbc2Jcu = (SymmetricBlockCipherToJcu) result1_green[4];
		JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result1_green[5];
		JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result1_green[6];
		JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result1_green[7];
		JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result1_green[8];
		JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result1_green[9];
		JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result1_green[10];
		TaskToJavaPackage t2c = (TaskToJavaPackage) result1_green[11];
		JavaLiteral exprAlgNameLiteral = (JavaLiteral) result1_green[12];
		JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result1_green[13];
		JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result1_green[15];
		JavaStatement statRetPerformEncryption = (JavaStatement) result1_green[16];
		JavaName exprKeyName = (JavaName) result1_green[17];
		JavaLiteral exprNameModePadding = (JavaLiteral) result1_green[18];
		JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result1_green[19];
		JavaName exprPwdName = (JavaName) result1_green[21];
		JavaName exprDataName = (JavaName) result1_green[23];
		JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result1_green[24];
		JavaStatement statRetGetKey = (JavaStatement) result1_green[25];
		KeyDerivationAlgorithmToJcu kda2Jcu = (KeyDerivationAlgorithmToJcu) result1_green[26];

		Object[] result2_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_1_2_collecttranslatedelements_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		if (result2_black == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[exprIterationLiteral] = "
					+ exprIterationLiteral + ", " + "[javaPackage] = " + javaPackage + ", " + "[exprRetGetKey] = "
					+ exprRetGetKey + ", " + "[exprOutputSizeLiteral] = " + exprOutputSizeLiteral + ", "
					+ "[sbc2Jcu] = " + sbc2Jcu + ", " + "[kdaJcu] = " + kdaJcu + ", " + "[methodPerformEncryption] = "
					+ methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", " + "[keyEncryption] = "
					+ keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", " + "[methodGetKey] = "
					+ methodGetKey + ", " + "[t2c] = " + t2c + ", " + "[exprAlgNameLiteral] = " + exprAlgNameLiteral
					+ ", " + "[pwdDeclaration] = " + pwdDeclaration + ", " + "[kda] = " + kda + ", "
					+ "[methodPerformGetKey] = " + methodPerformGetKey + ", " + "[statRetPerformEncryption] = "
					+ statRetPerformEncryption + ", " + "[exprKeyName] = " + exprKeyName + ", "
					+ "[exprNameModePadding] = " + exprNameModePadding + ", " + "[methodEncryption] = "
					+ methodEncryption + ", " + "[task] = " + task + ", " + "[exprPwdName] = " + exprPwdName + ", "
					+ "[sbc] = " + sbc + ", " + "[exprDataName] = " + exprDataName + ", "
					+ "[exprRetPerformEncryption] = " + exprRetPerformEncryption + ", " + "[statRetGetKey] = "
					+ statRetGetKey + ", " + "[kda2Jcu] = " + kda2Jcu + ".");
		}
		Object[] result2_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_1_2_collecttranslatedelements_greenFBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		PerformRuleResult ruleresult = (PerformRuleResult) result2_green[0];

		Object[] result3_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_1_3_bookkeepingforedges_blackBBBBBBBBBBBBBBBBBBBBBBBBBBBB(ruleresult,
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		if (result3_black == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[ruleresult] = " + ruleresult
					+ ", " + "[exprIterationLiteral] = " + exprIterationLiteral + ", " + "[javaPackage] = "
					+ javaPackage + ", " + "[exprRetGetKey] = " + exprRetGetKey + ", " + "[exprOutputSizeLiteral] = "
					+ exprOutputSizeLiteral + ", " + "[sbc2Jcu] = " + sbc2Jcu + ", " + "[kdaJcu] = " + kdaJcu + ", "
					+ "[methodPerformEncryption] = " + methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", "
					+ "[keyEncryption] = " + keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", "
					+ "[methodGetKey] = " + methodGetKey + ", " + "[t2c] = " + t2c + ", " + "[exprAlgNameLiteral] = "
					+ exprAlgNameLiteral + ", " + "[pwdDeclaration] = " + pwdDeclaration + ", " + "[kda] = " + kda
					+ ", " + "[methodPerformGetKey] = " + methodPerformGetKey + ", " + "[statRetPerformEncryption] = "
					+ statRetPerformEncryption + ", " + "[exprKeyName] = " + exprKeyName + ", "
					+ "[exprNameModePadding] = " + exprNameModePadding + ", " + "[methodEncryption] = "
					+ methodEncryption + ", " + "[task] = " + task + ", " + "[exprPwdName] = " + exprPwdName + ", "
					+ "[sbc] = " + sbc + ", " + "[exprDataName] = " + exprDataName + ", "
					+ "[exprRetPerformEncryption] = " + exprRetPerformEncryption + ", " + "[statRetGetKey] = "
					+ statRetGetKey + ", " + "[kda2Jcu] = " + kda2Jcu + ".");
		}
		PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_1_3_bookkeepingforedges_greenBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
						ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu,
						kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		//nothing EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = (EMoflonEdge) result3_green[28];
		//nothing EMoflonEdge methodGetKey__statRetGetKey____statements = (EMoflonEdge) result3_green[29];
		//nothing EMoflonEdge exprRetGetKey__exprPwdName____arguments = (EMoflonEdge) result3_green[30];
		//nothing EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = (EMoflonEdge) result3_green[31];
		//nothing EMoflonEdge statRetGetKey__exprRetGetKey____expr = (EMoflonEdge) result3_green[32];
		//nothing EMoflonEdge kdaJcu__methodGetKey____methods = (EMoflonEdge) result3_green[33];
		//nothing EMoflonEdge sbcJcu__methodEncryption____methods = (EMoflonEdge) result3_green[34];
		//nothing EMoflonEdge t2c__task____source = (EMoflonEdge) result3_green[35];
		//nothing EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = (EMoflonEdge) result3_green[36];
		//nothing EMoflonEdge task__kda____algorithms = (EMoflonEdge) result3_green[37];
		//nothing EMoflonEdge kda2Jcu__kda____source = (EMoflonEdge) result3_green[38];
		//nothing EMoflonEdge methodEncryption__statRetPerformEncryption____statements = (EMoflonEdge) result3_green[39];
		//nothing EMoflonEdge sbc2Jcu__sbcJcu____target = (EMoflonEdge) result3_green[40];
		//nothing EMoflonEdge methodEncryption__keyEncryption____params = (EMoflonEdge) result3_green[41];
		//nothing EMoflonEdge methodGetKey__pwdDeclaration____params = (EMoflonEdge) result3_green[42];
		//nothing EMoflonEdge javaPackage__sbcJcu____cunits = (EMoflonEdge) result3_green[43];
		//nothing EMoflonEdge javaPackage__kdaJcu____cunits = (EMoflonEdge) result3_green[44];
		//nothing EMoflonEdge task__sbc____algorithms = (EMoflonEdge) result3_green[45];
		//nothing EMoflonEdge kda2Jcu__kdaJcu____target = (EMoflonEdge) result3_green[46];
		//nothing EMoflonEdge methodEncryption__dataEncryption____params = (EMoflonEdge) result3_green[47];
		//nothing EMoflonEdge t2c__javaPackage____target = (EMoflonEdge) result3_green[48];
		//nothing EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = (EMoflonEdge) result3_green[49];
		//nothing EMoflonEdge kdaJcu__methodPerformGetKey____methods = (EMoflonEdge) result3_green[50];
		//nothing EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = (EMoflonEdge) result3_green[51];
		//nothing EMoflonEdge sbc2Jcu__sbc____source = (EMoflonEdge) result3_green[52];
		//nothing EMoflonEdge sbcJcu__methodPerformEncryption____methods = (EMoflonEdge) result3_green[53];
		//nothing EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = (EMoflonEdge) result3_green[54];
		//nothing EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = (EMoflonEdge) result3_green[55];

		// 
		// 
		PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_1_5_registerobjects_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBBB(this,
						ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu,
						kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_1_6_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {

		Object[] result1_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_2_1_preparereturnvalue_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ".");
		}
		EOperation performOperation = (EOperation) result1_bindingAndBlack[0];
		//nothing EClass eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_2_1_preparereturnvalue_greenBF(performOperation);
		IsApplicableRuleResult ruleresult = (IsApplicableRuleResult) result1_green[1];

		// ForEach 
		Object[] result2_binding = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_2_2_corematch_bindingFFFB(match);
		if (result2_binding == null) {
			throw new RuntimeException(
					"Binding in node core match failed." + " Variables: " + "[match] = " + match + ".");
		}
		KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result2_binding[0];
		Task task = (Task) result2_binding[1];
		SymmetricBlockCipher sbc = (SymmetricBlockCipher) result2_binding[2];
		for (Object[] result2_black : PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_2_2_corematch_blackBBBB(kda, task, sbc, match)) {
			// ForEach 
			for (Object[] result3_black : PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_2_3_findcontext_blackBBB(kda, task, sbc)) {
				Object[] result3_green = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_2_3_findcontext_greenBBBFFF(kda, task, sbc);
				IsApplicableMatch isApplicableMatch = (IsApplicableMatch) result3_green[3];
				//nothing EMoflonEdge task__kda____algorithms = (EMoflonEdge) result3_green[4];
				//nothing EMoflonEdge task__sbc____algorithms = (EMoflonEdge) result3_green[5];

				Object[] result4_bindingAndBlack = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_2_4_solveCSP_bindingAndBlackFBBBBB(this, isApplicableMatch,
								kda, task, sbc);
				if (result4_bindingAndBlack == null) {
					throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
							+ "[isApplicableMatch] = " + isApplicableMatch + ", " + "[kda] = " + kda + ", "
							+ "[task] = " + task + ", " + "[sbc] = " + sbc + ".");
				}
				CSP csp = (CSP) result4_bindingAndBlack[0];
				// 
				if (PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_2_5_checkCSP_expressionFBB(this, csp)) {

					Object[] result6_black = PasswordBasedEncryptionImpl
							.pattern_PasswordBasedEncryption_2_6_addmatchtoruleresult_blackBB(ruleresult,
									isApplicableMatch);
					if (result6_black == null) {
						throw new RuntimeException("Pattern matching failed." + " Variables: " + "[ruleresult] = "
								+ ruleresult + ", " + "[isApplicableMatch] = " + isApplicableMatch + ".");
					}
					PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_2_6_addmatchtoruleresult_greenBB(
							ruleresult, isApplicableMatch);

				} else {
				}

			}

		}
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_2_7_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		match.registerObject("kda", kda);
		match.registerObject("task", task);
		match.registerObject("sbc", sbc);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal0", true, csp);
		literal0.setValue("Crypto");
		literal0.setType("");

		// Create attribute variables
		Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable("task.package", true, csp);
		var_task_package.setValue(task.getPackage());
		var_task_package.setType("String");

		// Create unbound variables

		// Create constraints
		SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();

		csp.getConstraints().add(setDefaultStringIfNull);

		// Solve CSP
		setDefaultStringIfNull.setRuleName("NoRuleName");
		setDefaultStringIfNull.solve(var_task_package, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal0", true, csp);
		literal0.setValue(1);
		literal0.setType("");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable("literal1", true, csp);
		literal1.setValue(
				"{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n");
		literal1.setType("");
		Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable("literal2", true, csp);
		literal2.setValue("NoSuchAlgorithmException, InvalidKeySpecException");
		literal2.setType("");
		Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable("literal3", true, csp);
		literal3.setValue(0);
		literal3.setType("");
		Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable("literal4", true, csp);
		literal4.setValue(
				"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException");
		literal4.setType("");
		Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable("literal5", true, csp);
		literal5.setValue(
				"{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n");
		literal5.setType("");
		Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable("literal6", true, csp);
		literal6.setValue("byte[] data,SecretKey key,String encryptPassingArgument");
		literal6.setType("");
		Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable("literal7", true, csp);
		literal7.setValue("Enc");
		literal7.setType("");
		Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable("literal8", true, csp);
		literal8.setValue("char [] pwd,String algName,int iterations,int outputSize");
		literal8.setType("");

		// Create attribute variables
		Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable("kda.iterations", true, csp);
		var_kda_iterations.setValue(kda.getIterations());
		var_kda_iterations.setType("String");
		Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable("kda.name", true, csp);
		var_kda_name.setValue(kda.getName());
		var_kda_name.setType("String");
		Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable("task.package", true, csp);
		var_task_package.setValue(task.getPackage());
		var_task_package.setType("String");
		Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable("kda.outputSize", true, csp);
		var_kda_outputSize.setValue(kda.getOutputSize());
		var_kda_outputSize.setType("String");
		Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable("sbc.name", true, csp);
		var_sbc_name.setValue(sbc.getName());
		var_sbc_name.setType("String");
		Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable("sbc.mode", true, csp);
		var_sbc_mode.setValue(sbc.getMode());
		var_sbc_mode.setType("String");
		Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable("sbc.padding", true, csp);
		var_sbc_padding.setValue(sbc.getPadding());
		var_sbc_padding.setType("String");

		// Create unbound variables
		Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprIterationLiteral.value", csp);
		var_exprIterationLiteral_value.setType("String");
		Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprAlgNameLiteral.value",
				csp);
		var_exprAlgNameLiteral_value.setType("String");
		Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable("javaPackage.name", csp);
		var_javaPackage_name.setType("String");
		Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprOutputSizeLiteral.value", csp);
		var_exprOutputSizeLiteral_value.setType("String");
		Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.index", csp);
		var_methodEncryption_index.setType("int");
		Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.body", csp);
		var_methodPerformEncryption_body.setType("String");
		Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.throws", csp);
		var_methodGetKey_throws.setType("String");
		Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.index", csp);
		var_methodGetKey_index.setType("int");
		Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.index", csp);
		var_methodPerformEncryption_index.setType("int");
		Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.throws", csp);
		var_methodPerformEncryption_throws.setType("String");
		Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.body",
				csp);
		var_methodPerformGetKey_body.setType("String");
		Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.throws",
				csp);
		var_methodEncryption_throws.setType("String");
		Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.parameters", csp);
		var_methodPerformEncryption_parameters.setType("String");
		Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable("sbcJcu.name", csp);
		var_sbcJcu_name.setType("String");
		Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.index",
				csp);
		var_methodPerformGetKey_index.setType("int");
		Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.throws", csp);
		var_methodPerformGetKey_throws.setType("String");
		Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable("exprNameModePadding.value",
				csp);
		var_exprNameModePadding_value.setType("String");
		Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.parameters", csp);
		var_methodPerformGetKey_parameters.setType("String");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();
		Eq eq_2 = new Eq();
		SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();
		NameModePadding nameModePadding = new NameModePadding();
		SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);
		csp.getConstraints().add(eq_2);
		csp.getConstraints().add(setDefaultStringIfNull);
		csp.getConstraints().add(setDefaultStringIfNull_0);
		csp.getConstraints().add(setDefaultStringIfNull_1);
		csp.getConstraints().add(setDefaultStringIfNull_2);
		csp.getConstraints().add(setDefaultStringIfNull_3);
		csp.getConstraints().add(setDefaultStringIfNull_4);
		csp.getConstraints().add(setDefaultStringIfNull_5);
		csp.getConstraints().add(setDefaultStringIfNull_6);
		csp.getConstraints().add(setDefaultStringIfNull_7);
		csp.getConstraints().add(setDefaultStringIfNull_8);
		csp.getConstraints().add(setDefaultStringIfNull_9);
		csp.getConstraints().add(setDefaultStringIfNull_10);
		csp.getConstraints().add(nameModePadding);
		csp.getConstraints().add(setDefaultStringIfNull_11);

		// Solve CSP
		eq.setRuleName("NoRuleName");
		eq.solve(var_exprIterationLiteral_value, var_kda_iterations);
		eq_0.setRuleName("NoRuleName");
		eq_0.solve(var_exprAlgNameLiteral_value, var_kda_name);
		eq_1.setRuleName("NoRuleName");
		eq_1.solve(var_task_package, var_javaPackage_name);
		eq_2.setRuleName("NoRuleName");
		eq_2.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);
		setDefaultStringIfNull.setRuleName("NoRuleName");
		setDefaultStringIfNull.solve(var_methodEncryption_index, literal0);
		setDefaultStringIfNull_0.setRuleName("NoRuleName");
		setDefaultStringIfNull_0.solve(var_methodPerformEncryption_body, literal1);
		setDefaultStringIfNull_1.setRuleName("NoRuleName");
		setDefaultStringIfNull_1.solve(var_methodGetKey_throws, literal2);
		setDefaultStringIfNull_2.setRuleName("NoRuleName");
		setDefaultStringIfNull_2.solve(var_methodGetKey_index, literal0);
		setDefaultStringIfNull_3.setRuleName("NoRuleName");
		setDefaultStringIfNull_3.solve(var_methodPerformEncryption_index, literal3);
		setDefaultStringIfNull_4.setRuleName("NoRuleName");
		setDefaultStringIfNull_4.solve(var_methodPerformEncryption_throws, literal4);
		setDefaultStringIfNull_5.setRuleName("NoRuleName");
		setDefaultStringIfNull_5.solve(var_methodPerformGetKey_body, literal5);
		setDefaultStringIfNull_6.setRuleName("NoRuleName");
		setDefaultStringIfNull_6.solve(var_methodEncryption_throws, literal4);
		setDefaultStringIfNull_7.setRuleName("NoRuleName");
		setDefaultStringIfNull_7.solve(var_methodPerformEncryption_parameters, literal6);
		setDefaultStringIfNull_8.setRuleName("NoRuleName");
		setDefaultStringIfNull_8.solve(var_sbcJcu_name, literal7);
		setDefaultStringIfNull_9.setRuleName("NoRuleName");
		setDefaultStringIfNull_9.solve(var_methodPerformGetKey_index, literal3);
		setDefaultStringIfNull_10.setRuleName("NoRuleName");
		setDefaultStringIfNull_10.solve(var_methodPerformGetKey_throws, literal2);
		nameModePadding.setRuleName("NoRuleName");
		nameModePadding.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);
		setDefaultStringIfNull_11.setRuleName("NoRuleName");
		setDefaultStringIfNull_11.solve(var_methodPerformGetKey_parameters, literal8);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("kda", kda);
		isApplicableMatch.registerObject("task", task);
		isApplicableMatch.registerObject("sbc", sbc);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject exprIterationLiteral, EObject javaPackage,
			EObject exprRetGetKey, EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu,
			EObject methodPerformEncryption, EObject sbcJcu, EObject keyEncryption, EObject dataEncryption,
			EObject methodGetKey, EObject t2c, EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda,
			EObject methodPerformGetKey, EObject statRetPerformEncryption, EObject exprKeyName,
			EObject exprNameModePadding, EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc,
			EObject exprDataName, EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		ruleresult.registerObject("exprIterationLiteral", exprIterationLiteral);
		ruleresult.registerObject("javaPackage", javaPackage);
		ruleresult.registerObject("exprRetGetKey", exprRetGetKey);
		ruleresult.registerObject("exprOutputSizeLiteral", exprOutputSizeLiteral);
		ruleresult.registerObject("sbc2Jcu", sbc2Jcu);
		ruleresult.registerObject("kdaJcu", kdaJcu);
		ruleresult.registerObject("methodPerformEncryption", methodPerformEncryption);
		ruleresult.registerObject("sbcJcu", sbcJcu);
		ruleresult.registerObject("keyEncryption", keyEncryption);
		ruleresult.registerObject("dataEncryption", dataEncryption);
		ruleresult.registerObject("methodGetKey", methodGetKey);
		ruleresult.registerObject("t2c", t2c);
		ruleresult.registerObject("exprAlgNameLiteral", exprAlgNameLiteral);
		ruleresult.registerObject("pwdDeclaration", pwdDeclaration);
		ruleresult.registerObject("kda", kda);
		ruleresult.registerObject("methodPerformGetKey", methodPerformGetKey);
		ruleresult.registerObject("statRetPerformEncryption", statRetPerformEncryption);
		ruleresult.registerObject("exprKeyName", exprKeyName);
		ruleresult.registerObject("exprNameModePadding", exprNameModePadding);
		ruleresult.registerObject("methodEncryption", methodEncryption);
		ruleresult.registerObject("task", task);
		ruleresult.registerObject("exprPwdName", exprPwdName);
		ruleresult.registerObject("sbc", sbc);
		ruleresult.registerObject("exprDataName", exprDataName);
		ruleresult.registerObject("exprRetPerformEncryption", exprRetPerformEncryption);
		ruleresult.registerObject("statRetGetKey", statRetGetKey);
		ruleresult.registerObject("kda2Jcu", kda2Jcu);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("kda").eClass())
						.equals("CryptoAPIConfig.KeyDerivationAlgorithm.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("task").eClass())
						.equals("CryptoAPIConfig.Task.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("sbc").eClass())
						.equals("CryptoAPIConfig.SymmetricBlockCipher.");
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {

		Object[] result1_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_10_1_initialbindings_blackBBBBBBBBBBBBBBBBBBBBBBB(this, match,
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
						exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
						exprNameModePadding, methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption,
						statRetGetKey);
		if (result1_black == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
					+ "[match] = " + match + ", " + "[exprIterationLiteral] = " + exprIterationLiteral + ", "
					+ "[javaPackage] = " + javaPackage + ", " + "[exprRetGetKey] = " + exprRetGetKey + ", "
					+ "[exprOutputSizeLiteral] = " + exprOutputSizeLiteral + ", " + "[kdaJcu] = " + kdaJcu + ", "
					+ "[methodPerformEncryption] = " + methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", "
					+ "[keyEncryption] = " + keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", "
					+ "[methodGetKey] = " + methodGetKey + ", " + "[exprAlgNameLiteral] = " + exprAlgNameLiteral + ", "
					+ "[pwdDeclaration] = " + pwdDeclaration + ", " + "[methodPerformGetKey] = " + methodPerformGetKey
					+ ", " + "[statRetPerformEncryption] = " + statRetPerformEncryption + ", " + "[exprKeyName] = "
					+ exprKeyName + ", " + "[exprNameModePadding] = " + exprNameModePadding + ", "
					+ "[methodEncryption] = " + methodEncryption + ", " + "[exprPwdName] = " + exprPwdName + ", "
					+ "[exprDataName] = " + exprDataName + ", " + "[exprRetPerformEncryption] = "
					+ exprRetPerformEncryption + ", " + "[statRetGetKey] = " + statRetGetKey + ".");
		}

		Object[] result2_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_10_2_SolveCSP_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBBB(this, match,
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
						exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
						exprNameModePadding, methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption,
						statRetGetKey);
		if (result2_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
					+ "[match] = " + match + ", " + "[exprIterationLiteral] = " + exprIterationLiteral + ", "
					+ "[javaPackage] = " + javaPackage + ", " + "[exprRetGetKey] = " + exprRetGetKey + ", "
					+ "[exprOutputSizeLiteral] = " + exprOutputSizeLiteral + ", " + "[kdaJcu] = " + kdaJcu + ", "
					+ "[methodPerformEncryption] = " + methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", "
					+ "[keyEncryption] = " + keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", "
					+ "[methodGetKey] = " + methodGetKey + ", " + "[exprAlgNameLiteral] = " + exprAlgNameLiteral + ", "
					+ "[pwdDeclaration] = " + pwdDeclaration + ", " + "[methodPerformGetKey] = " + methodPerformGetKey
					+ ", " + "[statRetPerformEncryption] = " + statRetPerformEncryption + ", " + "[exprKeyName] = "
					+ exprKeyName + ", " + "[exprNameModePadding] = " + exprNameModePadding + ", "
					+ "[methodEncryption] = " + methodEncryption + ", " + "[exprPwdName] = " + exprPwdName + ", "
					+ "[exprDataName] = " + exprDataName + ", " + "[exprRetPerformEncryption] = "
					+ exprRetPerformEncryption + ", " + "[statRetGetKey] = " + statRetGetKey + ".");
		}
		CSP csp = (CSP) result2_bindingAndBlack[0];
		// 
		if (PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_10_3_CheckCSP_expressionFBB(this, csp)) {

			Object[] result4_black = PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_10_4_collectelementstobetranslated_blackBBBBBBBBBBBBBBBBBBBBBB(
							match, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
							methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
							exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
							exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
							exprRetPerformEncryption, statRetGetKey);
			if (result4_black == null) {
				throw new RuntimeException("Pattern matching failed." + " Variables: " + "[match] = " + match + ", "
						+ "[exprIterationLiteral] = " + exprIterationLiteral + ", " + "[javaPackage] = " + javaPackage
						+ ", " + "[exprRetGetKey] = " + exprRetGetKey + ", " + "[exprOutputSizeLiteral] = "
						+ exprOutputSizeLiteral + ", " + "[kdaJcu] = " + kdaJcu + ", " + "[methodPerformEncryption] = "
						+ methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", " + "[keyEncryption] = "
						+ keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", " + "[methodGetKey] = "
						+ methodGetKey + ", " + "[exprAlgNameLiteral] = " + exprAlgNameLiteral + ", "
						+ "[pwdDeclaration] = " + pwdDeclaration + ", " + "[methodPerformGetKey] = "
						+ methodPerformGetKey + ", " + "[statRetPerformEncryption] = " + statRetPerformEncryption + ", "
						+ "[exprKeyName] = " + exprKeyName + ", " + "[exprNameModePadding] = " + exprNameModePadding
						+ ", " + "[methodEncryption] = " + methodEncryption + ", " + "[exprPwdName] = " + exprPwdName
						+ ", " + "[exprDataName] = " + exprDataName + ", " + "[exprRetPerformEncryption] = "
						+ exprRetPerformEncryption + ", " + "[statRetGetKey] = " + statRetGetKey + ".");
			}
			PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_10_4_collectelementstobetranslated_greenBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFF(
							match, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
							methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
							exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
							exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
							exprRetPerformEncryption, statRetGetKey);
			//nothing EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = (EMoflonEdge) result4_green[22];
			//nothing EMoflonEdge methodGetKey__statRetGetKey____statements = (EMoflonEdge) result4_green[23];
			//nothing EMoflonEdge exprRetGetKey__exprPwdName____arguments = (EMoflonEdge) result4_green[24];
			//nothing EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = (EMoflonEdge) result4_green[25];
			//nothing EMoflonEdge statRetGetKey__exprRetGetKey____expr = (EMoflonEdge) result4_green[26];
			//nothing EMoflonEdge kdaJcu__methodGetKey____methods = (EMoflonEdge) result4_green[27];
			//nothing EMoflonEdge sbcJcu__methodEncryption____methods = (EMoflonEdge) result4_green[28];
			//nothing EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = (EMoflonEdge) result4_green[29];
			//nothing EMoflonEdge methodEncryption__statRetPerformEncryption____statements = (EMoflonEdge) result4_green[30];
			//nothing EMoflonEdge methodEncryption__keyEncryption____params = (EMoflonEdge) result4_green[31];
			//nothing EMoflonEdge methodGetKey__pwdDeclaration____params = (EMoflonEdge) result4_green[32];
			//nothing EMoflonEdge javaPackage__sbcJcu____cunits = (EMoflonEdge) result4_green[33];
			//nothing EMoflonEdge javaPackage__kdaJcu____cunits = (EMoflonEdge) result4_green[34];
			//nothing EMoflonEdge methodEncryption__dataEncryption____params = (EMoflonEdge) result4_green[35];
			//nothing EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = (EMoflonEdge) result4_green[36];
			//nothing EMoflonEdge kdaJcu__methodPerformGetKey____methods = (EMoflonEdge) result4_green[37];
			//nothing EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = (EMoflonEdge) result4_green[38];
			//nothing EMoflonEdge sbcJcu__methodPerformEncryption____methods = (EMoflonEdge) result4_green[39];
			//nothing EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = (EMoflonEdge) result4_green[40];
			//nothing EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = (EMoflonEdge) result4_green[41];

			Object[] result5_black = PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_10_5_collectcontextelements_blackBBBBBBBBBBBBBBBBBBBBBB(match,
							exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
							methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
							exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
							exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
							exprRetPerformEncryption, statRetGetKey);
			if (result5_black == null) {
				throw new RuntimeException("Pattern matching failed." + " Variables: " + "[match] = " + match + ", "
						+ "[exprIterationLiteral] = " + exprIterationLiteral + ", " + "[javaPackage] = " + javaPackage
						+ ", " + "[exprRetGetKey] = " + exprRetGetKey + ", " + "[exprOutputSizeLiteral] = "
						+ exprOutputSizeLiteral + ", " + "[kdaJcu] = " + kdaJcu + ", " + "[methodPerformEncryption] = "
						+ methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", " + "[keyEncryption] = "
						+ keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", " + "[methodGetKey] = "
						+ methodGetKey + ", " + "[exprAlgNameLiteral] = " + exprAlgNameLiteral + ", "
						+ "[pwdDeclaration] = " + pwdDeclaration + ", " + "[methodPerformGetKey] = "
						+ methodPerformGetKey + ", " + "[statRetPerformEncryption] = " + statRetPerformEncryption + ", "
						+ "[exprKeyName] = " + exprKeyName + ", " + "[exprNameModePadding] = " + exprNameModePadding
						+ ", " + "[methodEncryption] = " + methodEncryption + ", " + "[exprPwdName] = " + exprPwdName
						+ ", " + "[exprDataName] = " + exprDataName + ", " + "[exprRetPerformEncryption] = "
						+ exprRetPerformEncryption + ", " + "[statRetGetKey] = " + statRetGetKey + ".");
			}
			// 
			PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_10_6_registerobjectstomatch_expressionBBBBBBBBBBBBBBBBBBBBBBB(this,
							match, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
							methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
							exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
							exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
							exprRetPerformEncryption, statRetGetKey);
			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_10_7_expressionF();
		} else {
			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_10_8_expressionF();
		}

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch) {

		Object[] result1_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_11_1_performtransformation_bindingAndBlackFFFFFFFFFFFFFFFFFFFFFFBB(
						this, isApplicableMatch);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
					+ "[isApplicableMatch] = " + isApplicableMatch + ".");
		}
		JavaLiteral exprIterationLiteral = (JavaLiteral) result1_bindingAndBlack[0];
		JavaPackage javaPackage = (JavaPackage) result1_bindingAndBlack[1];
		JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result1_bindingAndBlack[2];
		JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result1_bindingAndBlack[3];
		JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result1_bindingAndBlack[4];
		JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result1_bindingAndBlack[5];
		JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result1_bindingAndBlack[6];
		JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result1_bindingAndBlack[7];
		JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result1_bindingAndBlack[8];
		JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result1_bindingAndBlack[9];
		JavaLiteral exprAlgNameLiteral = (JavaLiteral) result1_bindingAndBlack[10];
		JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result1_bindingAndBlack[11];
		JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result1_bindingAndBlack[12];
		JavaStatement statRetPerformEncryption = (JavaStatement) result1_bindingAndBlack[13];
		JavaName exprKeyName = (JavaName) result1_bindingAndBlack[14];
		JavaLiteral exprNameModePadding = (JavaLiteral) result1_bindingAndBlack[15];
		JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result1_bindingAndBlack[16];
		JavaName exprPwdName = (JavaName) result1_bindingAndBlack[17];
		JavaName exprDataName = (JavaName) result1_bindingAndBlack[18];
		JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result1_bindingAndBlack[19];
		JavaStatement statRetGetKey = (JavaStatement) result1_bindingAndBlack[20];
		CSP csp = (CSP) result1_bindingAndBlack[21];
		Object[] result1_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_11_1_performtransformation_greenBFBBFFFFFB(javaPackage, kdaJcu, sbcJcu,
						csp);
		SymmetricBlockCipherToJcu sbc2Jcu = (SymmetricBlockCipherToJcu) result1_green[1];
		TaskToJavaPackage t2c = (TaskToJavaPackage) result1_green[4];
		KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result1_green[5];
		Task task = (Task) result1_green[6];
		SymmetricBlockCipher sbc = (SymmetricBlockCipher) result1_green[7];
		KeyDerivationAlgorithmToJcu kda2Jcu = (KeyDerivationAlgorithmToJcu) result1_green[8];

		Object[] result2_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_11_2_collecttranslatedelements_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		if (result2_black == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[exprIterationLiteral] = "
					+ exprIterationLiteral + ", " + "[javaPackage] = " + javaPackage + ", " + "[exprRetGetKey] = "
					+ exprRetGetKey + ", " + "[exprOutputSizeLiteral] = " + exprOutputSizeLiteral + ", "
					+ "[sbc2Jcu] = " + sbc2Jcu + ", " + "[kdaJcu] = " + kdaJcu + ", " + "[methodPerformEncryption] = "
					+ methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", " + "[keyEncryption] = "
					+ keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", " + "[methodGetKey] = "
					+ methodGetKey + ", " + "[t2c] = " + t2c + ", " + "[exprAlgNameLiteral] = " + exprAlgNameLiteral
					+ ", " + "[pwdDeclaration] = " + pwdDeclaration + ", " + "[kda] = " + kda + ", "
					+ "[methodPerformGetKey] = " + methodPerformGetKey + ", " + "[statRetPerformEncryption] = "
					+ statRetPerformEncryption + ", " + "[exprKeyName] = " + exprKeyName + ", "
					+ "[exprNameModePadding] = " + exprNameModePadding + ", " + "[methodEncryption] = "
					+ methodEncryption + ", " + "[task] = " + task + ", " + "[exprPwdName] = " + exprPwdName + ", "
					+ "[sbc] = " + sbc + ", " + "[exprDataName] = " + exprDataName + ", "
					+ "[exprRetPerformEncryption] = " + exprRetPerformEncryption + ", " + "[statRetGetKey] = "
					+ statRetGetKey + ", " + "[kda2Jcu] = " + kda2Jcu + ".");
		}
		Object[] result2_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_11_2_collecttranslatedelements_greenFBBBBBBBBBBBBBBBBBBBBBBBBBBB(
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		PerformRuleResult ruleresult = (PerformRuleResult) result2_green[0];

		Object[] result3_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_11_3_bookkeepingforedges_blackBBBBBBBBBBBBBBBBBBBBBBBBBBBB(ruleresult,
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		if (result3_black == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[ruleresult] = " + ruleresult
					+ ", " + "[exprIterationLiteral] = " + exprIterationLiteral + ", " + "[javaPackage] = "
					+ javaPackage + ", " + "[exprRetGetKey] = " + exprRetGetKey + ", " + "[exprOutputSizeLiteral] = "
					+ exprOutputSizeLiteral + ", " + "[sbc2Jcu] = " + sbc2Jcu + ", " + "[kdaJcu] = " + kdaJcu + ", "
					+ "[methodPerformEncryption] = " + methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", "
					+ "[keyEncryption] = " + keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", "
					+ "[methodGetKey] = " + methodGetKey + ", " + "[t2c] = " + t2c + ", " + "[exprAlgNameLiteral] = "
					+ exprAlgNameLiteral + ", " + "[pwdDeclaration] = " + pwdDeclaration + ", " + "[kda] = " + kda
					+ ", " + "[methodPerformGetKey] = " + methodPerformGetKey + ", " + "[statRetPerformEncryption] = "
					+ statRetPerformEncryption + ", " + "[exprKeyName] = " + exprKeyName + ", "
					+ "[exprNameModePadding] = " + exprNameModePadding + ", " + "[methodEncryption] = "
					+ methodEncryption + ", " + "[task] = " + task + ", " + "[exprPwdName] = " + exprPwdName + ", "
					+ "[sbc] = " + sbc + ", " + "[exprDataName] = " + exprDataName + ", "
					+ "[exprRetPerformEncryption] = " + exprRetPerformEncryption + ", " + "[statRetGetKey] = "
					+ statRetGetKey + ", " + "[kda2Jcu] = " + kda2Jcu + ".");
		}
		PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_11_3_bookkeepingforedges_greenBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
						ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu,
						kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		//nothing EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = (EMoflonEdge) result3_green[28];
		//nothing EMoflonEdge methodGetKey__statRetGetKey____statements = (EMoflonEdge) result3_green[29];
		//nothing EMoflonEdge exprRetGetKey__exprPwdName____arguments = (EMoflonEdge) result3_green[30];
		//nothing EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = (EMoflonEdge) result3_green[31];
		//nothing EMoflonEdge statRetGetKey__exprRetGetKey____expr = (EMoflonEdge) result3_green[32];
		//nothing EMoflonEdge kdaJcu__methodGetKey____methods = (EMoflonEdge) result3_green[33];
		//nothing EMoflonEdge sbcJcu__methodEncryption____methods = (EMoflonEdge) result3_green[34];
		//nothing EMoflonEdge t2c__task____source = (EMoflonEdge) result3_green[35];
		//nothing EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = (EMoflonEdge) result3_green[36];
		//nothing EMoflonEdge task__kda____algorithms = (EMoflonEdge) result3_green[37];
		//nothing EMoflonEdge kda2Jcu__kda____source = (EMoflonEdge) result3_green[38];
		//nothing EMoflonEdge methodEncryption__statRetPerformEncryption____statements = (EMoflonEdge) result3_green[39];
		//nothing EMoflonEdge sbc2Jcu__sbcJcu____target = (EMoflonEdge) result3_green[40];
		//nothing EMoflonEdge methodEncryption__keyEncryption____params = (EMoflonEdge) result3_green[41];
		//nothing EMoflonEdge methodGetKey__pwdDeclaration____params = (EMoflonEdge) result3_green[42];
		//nothing EMoflonEdge javaPackage__sbcJcu____cunits = (EMoflonEdge) result3_green[43];
		//nothing EMoflonEdge javaPackage__kdaJcu____cunits = (EMoflonEdge) result3_green[44];
		//nothing EMoflonEdge task__sbc____algorithms = (EMoflonEdge) result3_green[45];
		//nothing EMoflonEdge kda2Jcu__kdaJcu____target = (EMoflonEdge) result3_green[46];
		//nothing EMoflonEdge methodEncryption__dataEncryption____params = (EMoflonEdge) result3_green[47];
		//nothing EMoflonEdge t2c__javaPackage____target = (EMoflonEdge) result3_green[48];
		//nothing EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = (EMoflonEdge) result3_green[49];
		//nothing EMoflonEdge kdaJcu__methodPerformGetKey____methods = (EMoflonEdge) result3_green[50];
		//nothing EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = (EMoflonEdge) result3_green[51];
		//nothing EMoflonEdge sbc2Jcu__sbc____source = (EMoflonEdge) result3_green[52];
		//nothing EMoflonEdge sbcJcu__methodPerformEncryption____methods = (EMoflonEdge) result3_green[53];
		//nothing EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = (EMoflonEdge) result3_green[54];
		//nothing EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = (EMoflonEdge) result3_green[55];

		// 
		// 
		PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_11_5_registerobjects_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBBB(this,
						ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu,
						kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, kda2Jcu);
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_11_6_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_BWD(Match match) {

		Object[] result1_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_12_1_preparereturnvalue_bindingAndBlackFFB(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ".");
		}
		EOperation performOperation = (EOperation) result1_bindingAndBlack[0];
		//nothing EClass eClass = (EClass) result1_bindingAndBlack[1];
		Object[] result1_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_12_1_preparereturnvalue_greenBF(performOperation);
		IsApplicableRuleResult ruleresult = (IsApplicableRuleResult) result1_green[1];

		// ForEach 
		Object[] result2_binding = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_12_2_corematch_bindingFFFFFFFFFFFFFFFFFFFFFB(match);
		if (result2_binding == null) {
			throw new RuntimeException(
					"Binding in node core match failed." + " Variables: " + "[match] = " + match + ".");
		}
		JavaLiteral exprIterationLiteral = (JavaLiteral) result2_binding[0];
		JavaPackage javaPackage = (JavaPackage) result2_binding[1];
		JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result2_binding[2];
		JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result2_binding[3];
		JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result2_binding[4];
		JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result2_binding[5];
		JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result2_binding[6];
		JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result2_binding[7];
		JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result2_binding[8];
		JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result2_binding[9];
		JavaLiteral exprAlgNameLiteral = (JavaLiteral) result2_binding[10];
		JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result2_binding[11];
		JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result2_binding[12];
		JavaStatement statRetPerformEncryption = (JavaStatement) result2_binding[13];
		JavaName exprKeyName = (JavaName) result2_binding[14];
		JavaLiteral exprNameModePadding = (JavaLiteral) result2_binding[15];
		JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result2_binding[16];
		JavaName exprPwdName = (JavaName) result2_binding[17];
		JavaName exprDataName = (JavaName) result2_binding[18];
		JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result2_binding[19];
		JavaStatement statRetGetKey = (JavaStatement) result2_binding[20];
		for (Object[] result2_black : PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_12_2_corematch_blackBBBBBBBBBBBBBBBBBBBBBB(exprIterationLiteral,
						javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu,
						keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral, pwdDeclaration,
						methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
						methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey, match)) {
			// ForEach 
			for (Object[] result3_black : PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_12_3_findcontext_blackBBBBBBBBBBBBBBBBBBBBB(exprIterationLiteral,
							javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu,
							keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral, pwdDeclaration,
							methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
							methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey)) {
				Object[] result3_green = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_12_3_findcontext_greenBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFF(
								exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
								methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
								exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
								exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
								exprRetPerformEncryption, statRetGetKey);
				IsApplicableMatch isApplicableMatch = (IsApplicableMatch) result3_green[21];
				//nothing EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = (EMoflonEdge) result3_green[22];
				//nothing EMoflonEdge methodGetKey__statRetGetKey____statements = (EMoflonEdge) result3_green[23];
				//nothing EMoflonEdge exprRetGetKey__exprPwdName____arguments = (EMoflonEdge) result3_green[24];
				//nothing EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = (EMoflonEdge) result3_green[25];
				//nothing EMoflonEdge statRetGetKey__exprRetGetKey____expr = (EMoflonEdge) result3_green[26];
				//nothing EMoflonEdge kdaJcu__methodGetKey____methods = (EMoflonEdge) result3_green[27];
				//nothing EMoflonEdge sbcJcu__methodEncryption____methods = (EMoflonEdge) result3_green[28];
				//nothing EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = (EMoflonEdge) result3_green[29];
				//nothing EMoflonEdge methodEncryption__statRetPerformEncryption____statements = (EMoflonEdge) result3_green[30];
				//nothing EMoflonEdge methodEncryption__keyEncryption____params = (EMoflonEdge) result3_green[31];
				//nothing EMoflonEdge methodGetKey__pwdDeclaration____params = (EMoflonEdge) result3_green[32];
				//nothing EMoflonEdge javaPackage__sbcJcu____cunits = (EMoflonEdge) result3_green[33];
				//nothing EMoflonEdge javaPackage__kdaJcu____cunits = (EMoflonEdge) result3_green[34];
				//nothing EMoflonEdge methodEncryption__dataEncryption____params = (EMoflonEdge) result3_green[35];
				//nothing EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = (EMoflonEdge) result3_green[36];
				//nothing EMoflonEdge kdaJcu__methodPerformGetKey____methods = (EMoflonEdge) result3_green[37];
				//nothing EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = (EMoflonEdge) result3_green[38];
				//nothing EMoflonEdge sbcJcu__methodPerformEncryption____methods = (EMoflonEdge) result3_green[39];
				//nothing EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = (EMoflonEdge) result3_green[40];
				//nothing EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = (EMoflonEdge) result3_green[41];

				Object[] result4_bindingAndBlack = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_12_4_solveCSP_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBBB(this,
								isApplicableMatch, exprIterationLiteral, javaPackage, exprRetGetKey,
								exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption,
								dataEncryption, methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey,
								statRetPerformEncryption, exprKeyName, exprNameModePadding, methodEncryption,
								exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey);
				if (result4_bindingAndBlack == null) {
					throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
							+ "[isApplicableMatch] = " + isApplicableMatch + ", " + "[exprIterationLiteral] = "
							+ exprIterationLiteral + ", " + "[javaPackage] = " + javaPackage + ", "
							+ "[exprRetGetKey] = " + exprRetGetKey + ", " + "[exprOutputSizeLiteral] = "
							+ exprOutputSizeLiteral + ", " + "[kdaJcu] = " + kdaJcu + ", "
							+ "[methodPerformEncryption] = " + methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu
							+ ", " + "[keyEncryption] = " + keyEncryption + ", " + "[dataEncryption] = "
							+ dataEncryption + ", " + "[methodGetKey] = " + methodGetKey + ", "
							+ "[exprAlgNameLiteral] = " + exprAlgNameLiteral + ", " + "[pwdDeclaration] = "
							+ pwdDeclaration + ", " + "[methodPerformGetKey] = " + methodPerformGetKey + ", "
							+ "[statRetPerformEncryption] = " + statRetPerformEncryption + ", " + "[exprKeyName] = "
							+ exprKeyName + ", " + "[exprNameModePadding] = " + exprNameModePadding + ", "
							+ "[methodEncryption] = " + methodEncryption + ", " + "[exprPwdName] = " + exprPwdName
							+ ", " + "[exprDataName] = " + exprDataName + ", " + "[exprRetPerformEncryption] = "
							+ exprRetPerformEncryption + ", " + "[statRetGetKey] = " + statRetGetKey + ".");
				}
				CSP csp = (CSP) result4_bindingAndBlack[0];
				// 
				if (PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_12_5_checkCSP_expressionFBB(this,
						csp)) {

					Object[] result6_black = PasswordBasedEncryptionImpl
							.pattern_PasswordBasedEncryption_12_6_addmatchtoruleresult_blackBB(ruleresult,
									isApplicableMatch);
					if (result6_black == null) {
						throw new RuntimeException("Pattern matching failed." + " Variables: " + "[ruleresult] = "
								+ ruleresult + ", " + "[isApplicableMatch] = " + isApplicableMatch + ".");
					}
					PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_12_6_addmatchtoruleresult_greenBB(
							ruleresult, isApplicableMatch);

				} else {
				}

			}

		}
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_12_7_expressionFB(ruleresult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		match.registerObject("exprIterationLiteral", exprIterationLiteral);
		match.registerObject("javaPackage", javaPackage);
		match.registerObject("exprRetGetKey", exprRetGetKey);
		match.registerObject("exprOutputSizeLiteral", exprOutputSizeLiteral);
		match.registerObject("kdaJcu", kdaJcu);
		match.registerObject("methodPerformEncryption", methodPerformEncryption);
		match.registerObject("sbcJcu", sbcJcu);
		match.registerObject("keyEncryption", keyEncryption);
		match.registerObject("dataEncryption", dataEncryption);
		match.registerObject("methodGetKey", methodGetKey);
		match.registerObject("exprAlgNameLiteral", exprAlgNameLiteral);
		match.registerObject("pwdDeclaration", pwdDeclaration);
		match.registerObject("methodPerformGetKey", methodPerformGetKey);
		match.registerObject("statRetPerformEncryption", statRetPerformEncryption);
		match.registerObject("exprKeyName", exprKeyName);
		match.registerObject("exprNameModePadding", exprNameModePadding);
		match.registerObject("methodEncryption", methodEncryption);
		match.registerObject("exprPwdName", exprPwdName);
		match.registerObject("exprDataName", exprDataName);
		match.registerObject("exprRetPerformEncryption", exprRetPerformEncryption);
		match.registerObject("statRetGetKey", statRetGetKey);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal0", true, csp);
		literal0.setValue(1);
		literal0.setType("");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable("literal1", true, csp);
		literal1.setValue(
				"{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n");
		literal1.setType("");
		Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable("literal2", true, csp);
		literal2.setValue("NoSuchAlgorithmException, InvalidKeySpecException");
		literal2.setType("");
		Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable("literal3", true, csp);
		literal3.setValue(0);
		literal3.setType("");
		Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable("literal4", true, csp);
		literal4.setValue(
				"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException");
		literal4.setType("");
		Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable("literal5", true, csp);
		literal5.setValue(
				"{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n");
		literal5.setType("");
		Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable("literal6", true, csp);
		literal6.setValue("byte[] data,SecretKey key,String encryptPassingArgument");
		literal6.setType("");
		Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable("literal7", true, csp);
		literal7.setValue("Enc");
		literal7.setType("");
		Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable("literal8", true, csp);
		literal8.setValue("char [] pwd,String algName,int iterations,int outputSize");
		literal8.setType("");

		// Create attribute variables
		Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.index", true,
				csp);
		var_methodEncryption_index.setValue(methodEncryption.getIndex());
		var_methodEncryption_index.setType("int");
		Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.body", true, csp);
		var_methodPerformEncryption_body.setValue(methodPerformEncryption.getBody());
		var_methodPerformEncryption_body.setType("String");
		Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.throws", true, csp);
		var_methodGetKey_throws.setValue(methodGetKey.getThrows());
		var_methodGetKey_throws.setType("String");
		Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.index", true, csp);
		var_methodGetKey_index.setValue(methodGetKey.getIndex());
		var_methodGetKey_index.setType("int");
		Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.index", true, csp);
		var_methodPerformEncryption_index.setValue(methodPerformEncryption.getIndex());
		var_methodPerformEncryption_index.setType("int");
		Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.throws", true, csp);
		var_methodPerformEncryption_throws.setValue(methodPerformEncryption.getThrows());
		var_methodPerformEncryption_throws.setType("String");
		Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.body",
				true, csp);
		var_methodPerformGetKey_body.setValue(methodPerformGetKey.getBody());
		var_methodPerformGetKey_body.setType("String");
		Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.throws",
				true, csp);
		var_methodEncryption_throws.setValue(methodEncryption.getThrows());
		var_methodEncryption_throws.setType("String");
		Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.parameters", true, csp);
		var_methodPerformEncryption_parameters.setValue(methodPerformEncryption.getParameters());
		var_methodPerformEncryption_parameters.setType("String");
		Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable("sbcJcu.name", true, csp);
		var_sbcJcu_name.setValue(sbcJcu.getName());
		var_sbcJcu_name.setType("String");
		Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.index",
				true, csp);
		var_methodPerformGetKey_index.setValue(methodPerformGetKey.getIndex());
		var_methodPerformGetKey_index.setType("int");
		Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.throws", true, csp);
		var_methodPerformGetKey_throws.setValue(methodPerformGetKey.getThrows());
		var_methodPerformGetKey_throws.setType("String");
		Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.parameters", true, csp);
		var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());
		var_methodPerformGetKey_parameters.setType("String");

		// Create unbound variables

		// Create constraints
		SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();

		csp.getConstraints().add(setDefaultStringIfNull);
		csp.getConstraints().add(setDefaultStringIfNull_0);
		csp.getConstraints().add(setDefaultStringIfNull_1);
		csp.getConstraints().add(setDefaultStringIfNull_2);
		csp.getConstraints().add(setDefaultStringIfNull_3);
		csp.getConstraints().add(setDefaultStringIfNull_4);
		csp.getConstraints().add(setDefaultStringIfNull_5);
		csp.getConstraints().add(setDefaultStringIfNull_6);
		csp.getConstraints().add(setDefaultStringIfNull_7);
		csp.getConstraints().add(setDefaultStringIfNull_8);
		csp.getConstraints().add(setDefaultStringIfNull_9);
		csp.getConstraints().add(setDefaultStringIfNull_10);
		csp.getConstraints().add(setDefaultStringIfNull_11);

		// Solve CSP
		setDefaultStringIfNull.setRuleName("NoRuleName");
		setDefaultStringIfNull.solve(var_methodEncryption_index, literal0);
		setDefaultStringIfNull_0.setRuleName("NoRuleName");
		setDefaultStringIfNull_0.solve(var_methodPerformEncryption_body, literal1);
		setDefaultStringIfNull_1.setRuleName("NoRuleName");
		setDefaultStringIfNull_1.solve(var_methodGetKey_throws, literal2);
		setDefaultStringIfNull_2.setRuleName("NoRuleName");
		setDefaultStringIfNull_2.solve(var_methodGetKey_index, literal0);
		setDefaultStringIfNull_3.setRuleName("NoRuleName");
		setDefaultStringIfNull_3.solve(var_methodPerformEncryption_index, literal3);
		setDefaultStringIfNull_4.setRuleName("NoRuleName");
		setDefaultStringIfNull_4.solve(var_methodPerformEncryption_throws, literal4);
		setDefaultStringIfNull_5.setRuleName("NoRuleName");
		setDefaultStringIfNull_5.solve(var_methodPerformGetKey_body, literal5);
		setDefaultStringIfNull_6.setRuleName("NoRuleName");
		setDefaultStringIfNull_6.solve(var_methodEncryption_throws, literal4);
		setDefaultStringIfNull_7.setRuleName("NoRuleName");
		setDefaultStringIfNull_7.solve(var_methodPerformEncryption_parameters, literal6);
		setDefaultStringIfNull_8.setRuleName("NoRuleName");
		setDefaultStringIfNull_8.solve(var_sbcJcu_name, literal7);
		setDefaultStringIfNull_9.setRuleName("NoRuleName");
		setDefaultStringIfNull_9.solve(var_methodPerformGetKey_index, literal3);
		setDefaultStringIfNull_10.setRuleName("NoRuleName");
		setDefaultStringIfNull_10.solve(var_methodPerformGetKey_throws, literal2);
		setDefaultStringIfNull_11.setRuleName("NoRuleName");
		setDefaultStringIfNull_11.solve(var_methodPerformGetKey_parameters, literal8);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch, JavaLiteral exprIterationLiteral,
			JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral,
			JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu,
			JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal0", true, csp);
		literal0.setValue("Crypto");
		literal0.setType("");

		// Create attribute variables
		Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprIterationLiteral.value", true, csp);
		var_exprIterationLiteral_value.setValue(exprIterationLiteral.getValue());
		var_exprIterationLiteral_value.setType("String");
		Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprAlgNameLiteral.value",
				true, csp);
		var_exprAlgNameLiteral_value.setValue(exprAlgNameLiteral.getValue());
		var_exprAlgNameLiteral_value.setType("String");
		Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable("javaPackage.name", true, csp);
		var_javaPackage_name.setValue(javaPackage.getName());
		var_javaPackage_name.setType("String");
		Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprOutputSizeLiteral.value", true, csp);
		var_exprOutputSizeLiteral_value.setValue(exprOutputSizeLiteral.getValue());
		var_exprOutputSizeLiteral_value.setType("String");
		Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable("exprNameModePadding.value",
				true, csp);
		var_exprNameModePadding_value.setValue(exprNameModePadding.getValue());
		var_exprNameModePadding_value.setType("String");

		// Create unbound variables
		Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable("kda.iterations", csp);
		var_kda_iterations.setType("String");
		Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable("kda.name", csp);
		var_kda_name.setType("String");
		Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable("task.package", csp);
		var_task_package.setType("String");
		Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable("kda.outputSize", csp);
		var_kda_outputSize.setType("String");
		Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable("sbc.name", csp);
		var_sbc_name.setType("String");
		Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable("sbc.mode", csp);
		var_sbc_mode.setType("String");
		Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable("sbc.padding", csp);
		var_sbc_padding.setType("String");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();
		SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();
		Eq eq_2 = new Eq();
		NameModePadding nameModePadding = new NameModePadding();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);
		csp.getConstraints().add(setDefaultStringIfNull);
		csp.getConstraints().add(eq_2);
		csp.getConstraints().add(nameModePadding);

		// Solve CSP
		eq.setRuleName("NoRuleName");
		eq.solve(var_exprIterationLiteral_value, var_kda_iterations);
		eq_0.setRuleName("NoRuleName");
		eq_0.solve(var_exprAlgNameLiteral_value, var_kda_name);
		eq_1.setRuleName("NoRuleName");
		eq_1.solve(var_task_package, var_javaPackage_name);
		setDefaultStringIfNull.setRuleName("NoRuleName");
		setDefaultStringIfNull.solve(var_task_package, literal0);
		eq_2.setRuleName("NoRuleName");
		eq_2.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);
		nameModePadding.setRuleName("NoRuleName");
		nameModePadding.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("exprIterationLiteral", exprIterationLiteral);
		isApplicableMatch.registerObject("javaPackage", javaPackage);
		isApplicableMatch.registerObject("exprRetGetKey", exprRetGetKey);
		isApplicableMatch.registerObject("exprOutputSizeLiteral", exprOutputSizeLiteral);
		isApplicableMatch.registerObject("kdaJcu", kdaJcu);
		isApplicableMatch.registerObject("methodPerformEncryption", methodPerformEncryption);
		isApplicableMatch.registerObject("sbcJcu", sbcJcu);
		isApplicableMatch.registerObject("keyEncryption", keyEncryption);
		isApplicableMatch.registerObject("dataEncryption", dataEncryption);
		isApplicableMatch.registerObject("methodGetKey", methodGetKey);
		isApplicableMatch.registerObject("exprAlgNameLiteral", exprAlgNameLiteral);
		isApplicableMatch.registerObject("pwdDeclaration", pwdDeclaration);
		isApplicableMatch.registerObject("methodPerformGetKey", methodPerformGetKey);
		isApplicableMatch.registerObject("statRetPerformEncryption", statRetPerformEncryption);
		isApplicableMatch.registerObject("exprKeyName", exprKeyName);
		isApplicableMatch.registerObject("exprNameModePadding", exprNameModePadding);
		isApplicableMatch.registerObject("methodEncryption", methodEncryption);
		isApplicableMatch.registerObject("exprPwdName", exprPwdName);
		isApplicableMatch.registerObject("exprDataName", exprDataName);
		isApplicableMatch.registerObject("exprRetPerformEncryption", exprRetPerformEncryption);
		isApplicableMatch.registerObject("statRetGetKey", statRetGetKey);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject exprIterationLiteral, EObject javaPackage,
			EObject exprRetGetKey, EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu,
			EObject methodPerformEncryption, EObject sbcJcu, EObject keyEncryption, EObject dataEncryption,
			EObject methodGetKey, EObject t2c, EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda,
			EObject methodPerformGetKey, EObject statRetPerformEncryption, EObject exprKeyName,
			EObject exprNameModePadding, EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc,
			EObject exprDataName, EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		ruleresult.registerObject("exprIterationLiteral", exprIterationLiteral);
		ruleresult.registerObject("javaPackage", javaPackage);
		ruleresult.registerObject("exprRetGetKey", exprRetGetKey);
		ruleresult.registerObject("exprOutputSizeLiteral", exprOutputSizeLiteral);
		ruleresult.registerObject("sbc2Jcu", sbc2Jcu);
		ruleresult.registerObject("kdaJcu", kdaJcu);
		ruleresult.registerObject("methodPerformEncryption", methodPerformEncryption);
		ruleresult.registerObject("sbcJcu", sbcJcu);
		ruleresult.registerObject("keyEncryption", keyEncryption);
		ruleresult.registerObject("dataEncryption", dataEncryption);
		ruleresult.registerObject("methodGetKey", methodGetKey);
		ruleresult.registerObject("t2c", t2c);
		ruleresult.registerObject("exprAlgNameLiteral", exprAlgNameLiteral);
		ruleresult.registerObject("pwdDeclaration", pwdDeclaration);
		ruleresult.registerObject("kda", kda);
		ruleresult.registerObject("methodPerformGetKey", methodPerformGetKey);
		ruleresult.registerObject("statRetPerformEncryption", statRetPerformEncryption);
		ruleresult.registerObject("exprKeyName", exprKeyName);
		ruleresult.registerObject("exprNameModePadding", exprNameModePadding);
		ruleresult.registerObject("methodEncryption", methodEncryption);
		ruleresult.registerObject("task", task);
		ruleresult.registerObject("exprPwdName", exprPwdName);
		ruleresult.registerObject("sbc", sbc);
		ruleresult.registerObject("exprDataName", exprDataName);
		ruleresult.registerObject("exprRetPerformEncryption", exprRetPerformEncryption);
		ruleresult.registerObject("statRetGetKey", statRetGetKey);
		ruleresult.registerObject("kda2Jcu", kda2Jcu);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_BWD(Match match) {
		return true
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprIterationLiteral").eClass())
						.equals("SimpleJava.JavaLiteral.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("javaPackage").eClass())
						.equals("SimpleJava.JavaPackage.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprRetGetKey").eClass())
						.equals("SimpleJava.JavaMethodInvocation.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprOutputSizeLiteral").eClass())
						.equals("SimpleJava.JavaLiteral.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("kdaJcu").eClass())
						.equals("SimpleJava.JavaCompilationUnit.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("methodPerformEncryption").eClass())
						.equals("SimpleJava.JavaOpaqueMethod.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("sbcJcu").eClass())
						.equals("SimpleJava.JavaCompilationUnit.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("keyEncryption").eClass())
						.equals("SimpleJava.JavaVariableDeclaration.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("dataEncryption").eClass())
						.equals("SimpleJava.JavaVariableDeclaration.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("methodGetKey").eClass())
						.equals("SimpleJava.JavaWorkflowMethod.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprAlgNameLiteral").eClass())
						.equals("SimpleJava.JavaLiteral.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("pwdDeclaration").eClass())
						.equals("SimpleJava.JavaVariableDeclaration.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("methodPerformGetKey").eClass())
						.equals("SimpleJava.JavaOpaqueMethod.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("statRetPerformEncryption").eClass())
						.equals("SimpleJava.JavaStatement.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprKeyName").eClass())
						.equals("SimpleJava.JavaName.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprNameModePadding").eClass())
						.equals("SimpleJava.JavaLiteral.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("methodEncryption").eClass())
						.equals("SimpleJava.JavaWorkflowMethod.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprPwdName").eClass())
						.equals("SimpleJava.JavaName.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprDataName").eClass())
						.equals("SimpleJava.JavaName.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("exprRetPerformEncryption").eClass())
						.equals("SimpleJava.JavaMethodInvocation.")
				&& org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject("statRetGetKey").eClass())
						.equals("SimpleJava.JavaStatement.");
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_9(EMoflonEdge _edge_algorithms) {

		Object[] result1_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_20_1_preparereturnvalue_bindingAndBlackFFBF(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ".");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		EOperation isApplicableCC = (EOperation) result1_bindingAndBlack[3];
		Object[] result1_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_20_1_preparereturnvalue_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach 
		for (Object[] result2_black : PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_20_2_testcorematchandDECs_blackFFFB(_edge_algorithms)) {
			KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result2_black[0];
			Task task = (Task) result2_black[1];
			SymmetricBlockCipher sbc = (SymmetricBlockCipher) result2_black[2];
			Object[] result2_green = PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_20_2_testcorematchandDECs_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// 
			if (PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_20_3_bookkeepingwithgenericisAppropriatemethod_expressionFBBBBB(
							this, match, kda, task, sbc)) {
				// 
				if (PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_20_4_Ensurethatthecorrecttypesofelementsarematched_expressionFBB(
								this, match)) {

					Object[] result5_black = PasswordBasedEncryptionImpl
							.pattern_PasswordBasedEncryption_20_5_Addmatchtoruleresult_blackBBBB(match,
									__performOperation, __result, isApplicableCC);
					if (result5_black == null) {
						throw new RuntimeException("Pattern matching failed." + " Variables: " + "[match] = " + match
								+ ", " + "[__performOperation] = " + __performOperation + ", " + "[__result] = "
								+ __result + ", " + "[isApplicableCC] = " + isApplicableCC + ".");
					}
					PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_20_5_Addmatchtoruleresult_greenBBBB(
							match, __performOperation, __result, isApplicableCC);

				} else {
				}

			} else {
			}

		}
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_20_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_12(EMoflonEdge _edge_arguments) {

		Object[] result1_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_21_1_preparereturnvalue_bindingAndBlackFFBF(this);
		if (result1_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ".");
		}
		EOperation __performOperation = (EOperation) result1_bindingAndBlack[0];
		EClass __eClass = (EClass) result1_bindingAndBlack[1];
		EOperation isApplicableCC = (EOperation) result1_bindingAndBlack[3];
		Object[] result1_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_21_1_preparereturnvalue_greenF();
		EObjectContainer __result = (EObjectContainer) result1_green[0];

		// ForEach 
		for (Object[] result2_black : PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_blackFFFFFFFFFFFFFFFFFFFFFB(
						_edge_arguments)) {
			JavaLiteral exprIterationLiteral = (JavaLiteral) result2_black[0];
			JavaPackage javaPackage = (JavaPackage) result2_black[1];
			JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result2_black[2];
			JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result2_black[3];
			JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result2_black[4];
			JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result2_black[5];
			JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result2_black[6];
			JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result2_black[7];
			JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result2_black[8];
			JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result2_black[9];
			JavaLiteral exprAlgNameLiteral = (JavaLiteral) result2_black[10];
			JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result2_black[11];
			JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result2_black[12];
			JavaStatement statRetPerformEncryption = (JavaStatement) result2_black[13];
			JavaName exprKeyName = (JavaName) result2_black[14];
			JavaLiteral exprNameModePadding = (JavaLiteral) result2_black[15];
			JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result2_black[16];
			JavaName exprPwdName = (JavaName) result2_black[17];
			JavaName exprDataName = (JavaName) result2_black[18];
			JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result2_black[19];
			JavaStatement statRetGetKey = (JavaStatement) result2_black[20];
			Object[] result2_green = PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_greenFB(__eClass);
			Match match = (Match) result2_green[0];

			// 
			if (PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_21_3_bookkeepingwithgenericisAppropriatemethod_expressionFBBBBBBBBBBBBBBBBBBBBBBB(
							this, match, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
							kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
							exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
							exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
							exprRetPerformEncryption, statRetGetKey)) {
				// 
				if (PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_21_4_Ensurethatthecorrecttypesofelementsarematched_expressionFBB(
								this, match)) {

					Object[] result5_black = PasswordBasedEncryptionImpl
							.pattern_PasswordBasedEncryption_21_5_Addmatchtoruleresult_blackBBBB(match,
									__performOperation, __result, isApplicableCC);
					if (result5_black == null) {
						throw new RuntimeException("Pattern matching failed." + " Variables: " + "[match] = " + match
								+ ", " + "[__performOperation] = " + __performOperation + ", " + "[__result] = "
								+ __result + ", " + "[isApplicableCC] = " + isApplicableCC + ".");
					}
					PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_21_5_Addmatchtoruleresult_greenBBBB(
							match, __performOperation, __result, isApplicableCC);

				} else {
				}

			} else {
			}

		}
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_21_6_expressionFB(__result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AttributeConstraintsRuleResult checkAttributes_FWD(TripleMatch __tripleMatch) {
		AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE
				.createAttributeConstraintsRuleResult();
		ruleResult.setRule("PasswordBasedEncryption");
		ruleResult.setSuccess(true);

		CSP csp = CspFactory.eINSTANCE.createCSP();

		CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);

		if (!__helper.hasExpectedValue("exprIterationLiteral", "index", 2, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprRetGetKey", "name", "performGetKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprOutputSizeLiteral", "index", 3, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("kdaJcu", "name", "KeyDeriv", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformEncryption", "modifier", "private", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformEncryption", "name", "performEncryption",
				ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformEncryption", "type", "byte[] ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("keyEncryption", "type", "SecretKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("keyEncryption", "index", 1, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("keyEncryption", "name", "key", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("dataEncryption", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("dataEncryption", "type", "byte[]", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("dataEncryption", "name", "data", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodGetKey", "modifier", "public", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodGetKey", "type", "SecretKey ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodGetKey", "name", "getKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprAlgNameLiteral", "index", 1, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("pwdDeclaration", "name", "pwd", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("pwdDeclaration", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("pwdDeclaration", "type", "char[]", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformGetKey", "name", "performGetKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformGetKey", "type", "SecretKey ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformGetKey", "modifier", "private", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("statRetPerformEncryption", "return", true, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprKeyName", "index", 1, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprKeyName", "identifier", "key", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprNameModePadding", "index", 2, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodEncryption", "type", "byte[] ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodEncryption", "modifier", "public", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodEncryption", "name", "encrypt", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("task", "description", "PasswordBasedEncryption", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprPwdName", "identifier", "pwd", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprPwdName", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprDataName", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprDataName", "identifier", "data", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprRetPerformEncryption", "name", "performEncryption",
				ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("statRetGetKey", "return", true, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprAlgNameLiteral", true,
				csp);
		var_exprAlgNameLiteral_value.setValue(__helper.getValue("exprAlgNameLiteral", "value"));
		var_exprAlgNameLiteral_value.setType("String");

		Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprIterationLiteral",
				true, csp);
		var_exprIterationLiteral_value.setValue(__helper.getValue("exprIterationLiteral", "value"));
		var_exprIterationLiteral_value.setType("String");

		Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable("javaPackage", true, csp);
		var_javaPackage_name.setValue(__helper.getValue("javaPackage", "name"));
		var_javaPackage_name.setType("String");

		Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable("kda", true, csp);
		var_kda_outputSize.setValue(__helper.getValue("kda", "outputSize"));
		var_kda_outputSize.setType("String");

		Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable("kda", true, csp);
		var_kda_iterations.setValue(__helper.getValue("kda", "iterations"));
		var_kda_iterations.setType("String");

		Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable("kda", true, csp);
		var_kda_name.setValue(__helper.getValue("kda", "name"));
		var_kda_name.setType("String");

		Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprOutputSizeLiteral",
				true, csp);
		var_exprOutputSizeLiteral_value.setValue(__helper.getValue("exprOutputSizeLiteral", "value"));
		var_exprOutputSizeLiteral_value.setType("String");

		Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable("task", true, csp);
		var_task_package.setValue(__helper.getValue("task", "package"));
		var_task_package.setType("String");

		Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal0.setValue(1);
		var_literal0.setType("");

		Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal1.setValue(
				"{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n");
		var_literal1.setType("");

		Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformEncryption",
				true, csp);
		var_methodPerformEncryption_body.setValue(__helper.getValue("methodPerformEncryption", "body"));
		var_methodPerformEncryption_body.setType("String");

		Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey", true, csp);
		var_methodGetKey_throws.setValue(__helper.getValue("methodGetKey", "throws"));
		var_methodGetKey_throws.setType("String");

		Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal2.setValue("Crypto");
		var_literal2.setType("");

		Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey", true, csp);
		var_methodGetKey_index.setValue(__helper.getValue("methodGetKey", "index"));
		var_methodGetKey_index.setType("int");

		Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption", true, csp);
		var_methodPerformEncryption_index.setValue(__helper.getValue("methodPerformEncryption", "index"));
		var_methodPerformEncryption_index.setType("int");

		Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal3.setValue(0);
		var_literal3.setType("");

		Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey", true,
				csp);
		var_methodPerformGetKey_body.setValue(__helper.getValue("methodPerformGetKey", "body"));
		var_methodPerformGetKey_body.setType("String");

		Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal4.setValue(
				"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException");
		var_literal4.setType("");

		Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption", true, csp);
		var_methodEncryption_index.setValue(__helper.getValue("methodEncryption", "index"));
		var_methodEncryption_index.setType("int");

		Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal5.setValue("NoSuchAlgorithmException, InvalidKeySpecException");
		var_literal5.setType("");

		Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable("sbcJcu", true, csp);
		var_sbcJcu_name.setValue(__helper.getValue("sbcJcu", "name"));
		var_sbcJcu_name.setType("String");

		Variable var_literal6 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal6.setValue(
				"{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n");
		var_literal6.setType("");

		Variable var_literal7 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal7.setValue("Enc");
		var_literal7.setType("");

		Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption", true, csp);
		var_methodPerformEncryption_throws.setValue(__helper.getValue("methodPerformEncryption", "throws"));
		var_methodPerformEncryption_throws.setType("String");

		Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption", true, csp);
		var_methodPerformEncryption_parameters.setValue(__helper.getValue("methodPerformEncryption", "parameters"));
		var_methodPerformEncryption_parameters.setType("String");

		Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey", true,
				csp);
		var_methodPerformGetKey_index.setValue(__helper.getValue("methodPerformGetKey", "index"));
		var_methodPerformGetKey_index.setType("int");

		Variable var_literal8 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal8.setValue("byte[] data,SecretKey key,String encryptPassingArgument");
		var_literal8.setType("");

		Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey", true,
				csp);
		var_methodPerformGetKey_throws.setValue(__helper.getValue("methodPerformGetKey", "throws"));
		var_methodPerformGetKey_throws.setType("String");

		Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption", true, csp);
		var_methodEncryption_throws.setValue(__helper.getValue("methodEncryption", "throws"));
		var_methodEncryption_throws.setType("String");

		Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable("sbc", true, csp);
		var_sbc_name.setValue(__helper.getValue("sbc", "name"));
		var_sbc_name.setType("String");

		Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable("sbc", true, csp);
		var_sbc_mode.setValue(__helper.getValue("sbc", "mode"));
		var_sbc_mode.setType("String");

		Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable("exprNameModePadding", true,
				csp);
		var_exprNameModePadding_value.setValue(__helper.getValue("exprNameModePadding", "value"));
		var_exprNameModePadding_value.setType("String");

		Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable("sbc", true, csp);
		var_sbc_padding.setValue(__helper.getValue("sbc", "padding"));
		var_sbc_padding.setType("String");

		Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey",
				true, csp);
		var_methodPerformGetKey_parameters.setValue(__helper.getValue("methodPerformGetKey", "parameters"));
		var_methodPerformGetKey_parameters.setType("String");

		Variable var_literal9 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal9.setValue("char [] pwd,String algName,int iterations,int outputSize");
		var_literal9.setType("");

		SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull0);

		Eq eq1 = new Eq();
		csp.getConstraints().add(eq1);

		Eq eq2 = new Eq();
		csp.getConstraints().add(eq2);

		Eq eq3 = new Eq();
		csp.getConstraints().add(eq3);

		Eq eq4 = new Eq();
		csp.getConstraints().add(eq4);

		SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull5);

		SetDefaultStringIfNull setDefaultStringIfNull6 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull6);

		SetDefaultStringIfNull setDefaultStringIfNull7 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull7);

		SetDefaultStringIfNull setDefaultStringIfNull8 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull8);

		SetDefaultStringIfNull setDefaultStringIfNull9 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull9);

		SetDefaultStringIfNull setDefaultStringIfNull10 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull10);

		SetDefaultStringIfNull setDefaultStringIfNull11 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull11);

		SetDefaultStringIfNull setDefaultStringIfNull12 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull12);

		SetDefaultStringIfNull setDefaultStringIfNull13 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull13);

		SetDefaultStringIfNull setDefaultStringIfNull14 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull14);

		SetDefaultStringIfNull setDefaultStringIfNull15 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull15);

		SetDefaultStringIfNull setDefaultStringIfNull16 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull16);

		NameModePadding nameModePadding17 = new NameModePadding();
		csp.getConstraints().add(nameModePadding17);

		SetDefaultStringIfNull setDefaultStringIfNull18 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull18);

		setDefaultStringIfNull0.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull0.solve(var_task_package, var_literal2);

		eq1.setRuleName("PasswordBasedEncryption");
		eq1.solve(var_exprIterationLiteral_value, var_kda_iterations);

		eq2.setRuleName("PasswordBasedEncryption");
		eq2.solve(var_exprAlgNameLiteral_value, var_kda_name);

		eq3.setRuleName("PasswordBasedEncryption");
		eq3.solve(var_task_package, var_javaPackage_name);

		eq4.setRuleName("PasswordBasedEncryption");
		eq4.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);

		setDefaultStringIfNull5.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull5.solve(var_methodEncryption_index, var_literal0);

		setDefaultStringIfNull6.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull6.solve(var_methodPerformEncryption_body, var_literal1);

		setDefaultStringIfNull7.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull7.solve(var_methodGetKey_throws, var_literal5);

		setDefaultStringIfNull8.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull8.solve(var_methodGetKey_index, var_literal0);

		setDefaultStringIfNull9.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull9.solve(var_methodPerformEncryption_index, var_literal3);

		setDefaultStringIfNull10.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull10.solve(var_methodPerformEncryption_throws, var_literal4);

		setDefaultStringIfNull11.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull11.solve(var_methodPerformGetKey_body, var_literal6);

		setDefaultStringIfNull12.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull12.solve(var_methodEncryption_throws, var_literal4);

		setDefaultStringIfNull13.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull13.solve(var_methodPerformEncryption_parameters, var_literal8);

		setDefaultStringIfNull14.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull14.solve(var_sbcJcu_name, var_literal7);

		setDefaultStringIfNull15.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull15.solve(var_methodPerformGetKey_index, var_literal3);

		setDefaultStringIfNull16.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull16.solve(var_methodPerformGetKey_throws, var_literal5);

		nameModePadding17.setRuleName("PasswordBasedEncryption");
		nameModePadding17.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);

		setDefaultStringIfNull18.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull18.solve(var_methodPerformGetKey_parameters, var_literal9);

		if (csp.check()) {
			ruleResult.setSuccess(true);
		} else {
			var_exprIterationLiteral_value.setBound(false);
			var_exprAlgNameLiteral_value.setBound(false);
			var_javaPackage_name.setBound(false);
			var_exprOutputSizeLiteral_value.setBound(false);
			var_methodEncryption_index.setBound(false);
			var_methodPerformEncryption_body.setBound(false);
			var_methodGetKey_throws.setBound(false);
			var_methodGetKey_index.setBound(false);
			var_methodPerformEncryption_index.setBound(false);
			var_methodPerformEncryption_throws.setBound(false);
			var_methodPerformGetKey_body.setBound(false);
			var_methodEncryption_throws.setBound(false);
			var_methodPerformEncryption_parameters.setBound(false);
			var_sbcJcu_name.setBound(false);
			var_methodPerformGetKey_index.setBound(false);
			var_methodPerformGetKey_throws.setBound(false);
			var_exprNameModePadding_value.setBound(false);
			var_methodPerformGetKey_parameters.setBound(false);
			setDefaultStringIfNull0.solve(var_task_package, var_literal2);
			eq1.solve(var_exprIterationLiteral_value, var_kda_iterations);
			eq2.solve(var_exprAlgNameLiteral_value, var_kda_name);
			eq3.solve(var_task_package, var_javaPackage_name);
			eq4.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);
			setDefaultStringIfNull5.solve(var_methodEncryption_index, var_literal0);
			setDefaultStringIfNull6.solve(var_methodPerformEncryption_body, var_literal1);
			setDefaultStringIfNull7.solve(var_methodGetKey_throws, var_literal5);
			setDefaultStringIfNull8.solve(var_methodGetKey_index, var_literal0);
			setDefaultStringIfNull9.solve(var_methodPerformEncryption_index, var_literal3);
			setDefaultStringIfNull10.solve(var_methodPerformEncryption_throws, var_literal4);
			setDefaultStringIfNull11.solve(var_methodPerformGetKey_body, var_literal6);
			setDefaultStringIfNull12.solve(var_methodEncryption_throws, var_literal4);
			setDefaultStringIfNull13.solve(var_methodPerformEncryption_parameters, var_literal8);
			setDefaultStringIfNull14.solve(var_sbcJcu_name, var_literal7);
			setDefaultStringIfNull15.solve(var_methodPerformGetKey_index, var_literal3);
			setDefaultStringIfNull16.solve(var_methodPerformGetKey_throws, var_literal5);
			nameModePadding17.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);
			setDefaultStringIfNull18.solve(var_methodPerformGetKey_parameters, var_literal9);
			if (csp.check()) {
				ruleResult.setSuccess(true);
				ruleResult.setRequiredChange(true);
				__helper.setValue("exprIterationLiteral", "value", var_exprIterationLiteral_value.getValue());
				__helper.setValue("exprAlgNameLiteral", "value", var_exprAlgNameLiteral_value.getValue());
				__helper.setValue("javaPackage", "name", var_javaPackage_name.getValue());
				__helper.setValue("exprOutputSizeLiteral", "value", var_exprOutputSizeLiteral_value.getValue());
				__helper.setValue("methodEncryption", "index", var_methodEncryption_index.getValue());
				__helper.setValue("methodPerformEncryption", "body", var_methodPerformEncryption_body.getValue());
				__helper.setValue("methodGetKey", "throws", var_methodGetKey_throws.getValue());
				__helper.setValue("methodGetKey", "index", var_methodGetKey_index.getValue());
				__helper.setValue("methodPerformEncryption", "index", var_methodPerformEncryption_index.getValue());
				__helper.setValue("methodPerformEncryption", "throws", var_methodPerformEncryption_throws.getValue());
				__helper.setValue("methodPerformGetKey", "body", var_methodPerformGetKey_body.getValue());
				__helper.setValue("methodEncryption", "throws", var_methodEncryption_throws.getValue());
				__helper.setValue("methodPerformEncryption", "parameters",
						var_methodPerformEncryption_parameters.getValue());
				__helper.setValue("sbcJcu", "name", var_sbcJcu_name.getValue());
				__helper.setValue("methodPerformGetKey", "index", var_methodPerformGetKey_index.getValue());
				__helper.setValue("methodPerformGetKey", "throws", var_methodPerformGetKey_throws.getValue());
				__helper.setValue("exprNameModePadding", "value", var_exprNameModePadding_value.getValue());
				__helper.setValue("methodPerformGetKey", "parameters", var_methodPerformGetKey_parameters.getValue());
			} else {
				ruleResult.setSuccess(false);
				return ruleResult;
			}
		}

		return ruleResult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AttributeConstraintsRuleResult checkAttributes_BWD(TripleMatch __tripleMatch) {
		AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE
				.createAttributeConstraintsRuleResult();
		ruleResult.setRule("PasswordBasedEncryption");
		ruleResult.setSuccess(true);

		CSP csp = CspFactory.eINSTANCE.createCSP();

		CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);

		if (!__helper.hasExpectedValue("exprIterationLiteral", "index", 2, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprRetGetKey", "name", "performGetKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprOutputSizeLiteral", "index", 3, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("kdaJcu", "name", "KeyDeriv", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformEncryption", "modifier", "private", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformEncryption", "name", "performEncryption",
				ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformEncryption", "type", "byte[] ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("keyEncryption", "type", "SecretKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("keyEncryption", "index", 1, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("keyEncryption", "name", "key", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("dataEncryption", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("dataEncryption", "type", "byte[]", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("dataEncryption", "name", "data", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodGetKey", "modifier", "public", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodGetKey", "type", "SecretKey ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodGetKey", "name", "getKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprAlgNameLiteral", "index", 1, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("pwdDeclaration", "name", "pwd", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("pwdDeclaration", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("pwdDeclaration", "type", "char[]", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformGetKey", "name", "performGetKey", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformGetKey", "type", "SecretKey ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodPerformGetKey", "modifier", "private", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("statRetPerformEncryption", "return", true, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprKeyName", "index", 1, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprKeyName", "identifier", "key", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprNameModePadding", "index", 2, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodEncryption", "type", "byte[] ", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodEncryption", "modifier", "public", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("methodEncryption", "name", "encrypt", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("task", "description", "PasswordBasedEncryption", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprPwdName", "identifier", "pwd", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprPwdName", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprDataName", "index", 0, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprDataName", "identifier", "data", ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("exprRetPerformEncryption", "name", "performEncryption",
				ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		if (!__helper.hasExpectedValue("statRetGetKey", "return", true, ComparingOperator.EQUAL)) {
			ruleResult.setSuccess(false);
			return ruleResult;
		}

		Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprAlgNameLiteral", true,
				csp);
		var_exprAlgNameLiteral_value.setValue(__helper.getValue("exprAlgNameLiteral", "value"));
		var_exprAlgNameLiteral_value.setType("String");

		Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprIterationLiteral",
				true, csp);
		var_exprIterationLiteral_value.setValue(__helper.getValue("exprIterationLiteral", "value"));
		var_exprIterationLiteral_value.setType("String");

		Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable("javaPackage", true, csp);
		var_javaPackage_name.setValue(__helper.getValue("javaPackage", "name"));
		var_javaPackage_name.setType("String");

		Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable("kda", true, csp);
		var_kda_outputSize.setValue(__helper.getValue("kda", "outputSize"));
		var_kda_outputSize.setType("String");

		Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable("kda", true, csp);
		var_kda_iterations.setValue(__helper.getValue("kda", "iterations"));
		var_kda_iterations.setType("String");

		Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable("kda", true, csp);
		var_kda_name.setValue(__helper.getValue("kda", "name"));
		var_kda_name.setType("String");

		Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprOutputSizeLiteral",
				true, csp);
		var_exprOutputSizeLiteral_value.setValue(__helper.getValue("exprOutputSizeLiteral", "value"));
		var_exprOutputSizeLiteral_value.setType("String");

		Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable("task", true, csp);
		var_task_package.setValue(__helper.getValue("task", "package"));
		var_task_package.setType("String");

		Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal0.setValue(1);
		var_literal0.setType("");

		Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal1.setValue(
				"{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n");
		var_literal1.setType("");

		Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformEncryption",
				true, csp);
		var_methodPerformEncryption_body.setValue(__helper.getValue("methodPerformEncryption", "body"));
		var_methodPerformEncryption_body.setType("String");

		Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey", true, csp);
		var_methodGetKey_throws.setValue(__helper.getValue("methodGetKey", "throws"));
		var_methodGetKey_throws.setType("String");

		Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal2.setValue("Crypto");
		var_literal2.setType("");

		Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey", true, csp);
		var_methodGetKey_index.setValue(__helper.getValue("methodGetKey", "index"));
		var_methodGetKey_index.setType("int");

		Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption", true, csp);
		var_methodPerformEncryption_index.setValue(__helper.getValue("methodPerformEncryption", "index"));
		var_methodPerformEncryption_index.setType("int");

		Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal3.setValue(0);
		var_literal3.setType("");

		Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey", true,
				csp);
		var_methodPerformGetKey_body.setValue(__helper.getValue("methodPerformGetKey", "body"));
		var_methodPerformGetKey_body.setType("String");

		Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal4.setValue(
				"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException");
		var_literal4.setType("");

		Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption", true, csp);
		var_methodEncryption_index.setValue(__helper.getValue("methodEncryption", "index"));
		var_methodEncryption_index.setType("int");

		Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal5.setValue("NoSuchAlgorithmException, InvalidKeySpecException");
		var_literal5.setType("");

		Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable("sbcJcu", true, csp);
		var_sbcJcu_name.setValue(__helper.getValue("sbcJcu", "name"));
		var_sbcJcu_name.setType("String");

		Variable var_literal6 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal6.setValue(
				"{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n");
		var_literal6.setType("");

		Variable var_literal7 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal7.setValue("Enc");
		var_literal7.setType("");

		Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption", true, csp);
		var_methodPerformEncryption_throws.setValue(__helper.getValue("methodPerformEncryption", "throws"));
		var_methodPerformEncryption_throws.setType("String");

		Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption", true, csp);
		var_methodPerformEncryption_parameters.setValue(__helper.getValue("methodPerformEncryption", "parameters"));
		var_methodPerformEncryption_parameters.setType("String");

		Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey", true,
				csp);
		var_methodPerformGetKey_index.setValue(__helper.getValue("methodPerformGetKey", "index"));
		var_methodPerformGetKey_index.setType("int");

		Variable var_literal8 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal8.setValue("byte[] data,SecretKey key,String encryptPassingArgument");
		var_literal8.setType("");

		Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey", true,
				csp);
		var_methodPerformGetKey_throws.setValue(__helper.getValue("methodPerformGetKey", "throws"));
		var_methodPerformGetKey_throws.setType("String");

		Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption", true, csp);
		var_methodEncryption_throws.setValue(__helper.getValue("methodEncryption", "throws"));
		var_methodEncryption_throws.setType("String");

		Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable("sbc", true, csp);
		var_sbc_name.setValue(__helper.getValue("sbc", "name"));
		var_sbc_name.setType("String");

		Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable("sbc", true, csp);
		var_sbc_mode.setValue(__helper.getValue("sbc", "mode"));
		var_sbc_mode.setType("String");

		Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable("exprNameModePadding", true,
				csp);
		var_exprNameModePadding_value.setValue(__helper.getValue("exprNameModePadding", "value"));
		var_exprNameModePadding_value.setType("String");

		Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable("sbc", true, csp);
		var_sbc_padding.setValue(__helper.getValue("sbc", "padding"));
		var_sbc_padding.setType("String");

		Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey",
				true, csp);
		var_methodPerformGetKey_parameters.setValue(__helper.getValue("methodPerformGetKey", "parameters"));
		var_methodPerformGetKey_parameters.setType("String");

		Variable var_literal9 = CSPFactoryHelper.eINSTANCE.createVariable("literal", true, csp);
		var_literal9.setValue("char [] pwd,String algName,int iterations,int outputSize");
		var_literal9.setType("");

		SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull0);

		SetDefaultStringIfNull setDefaultStringIfNull1 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull1);

		SetDefaultStringIfNull setDefaultStringIfNull2 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull2);

		SetDefaultStringIfNull setDefaultStringIfNull3 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull3);

		SetDefaultStringIfNull setDefaultStringIfNull4 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull4);

		SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull5);

		SetDefaultStringIfNull setDefaultStringIfNull6 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull6);

		SetDefaultStringIfNull setDefaultStringIfNull7 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull7);

		SetDefaultStringIfNull setDefaultStringIfNull8 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull8);

		SetDefaultStringIfNull setDefaultStringIfNull9 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull9);

		SetDefaultStringIfNull setDefaultStringIfNull10 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull10);

		SetDefaultStringIfNull setDefaultStringIfNull11 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull11);

		SetDefaultStringIfNull setDefaultStringIfNull12 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull12);

		Eq eq13 = new Eq();
		csp.getConstraints().add(eq13);

		Eq eq14 = new Eq();
		csp.getConstraints().add(eq14);

		Eq eq15 = new Eq();
		csp.getConstraints().add(eq15);

		SetDefaultStringIfNull setDefaultStringIfNull16 = new SetDefaultStringIfNull();
		csp.getConstraints().add(setDefaultStringIfNull16);

		Eq eq17 = new Eq();
		csp.getConstraints().add(eq17);

		NameModePadding nameModePadding18 = new NameModePadding();
		csp.getConstraints().add(nameModePadding18);

		setDefaultStringIfNull0.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull0.solve(var_methodEncryption_index, var_literal0);

		setDefaultStringIfNull1.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull1.solve(var_methodPerformEncryption_body, var_literal1);

		setDefaultStringIfNull2.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull2.solve(var_methodGetKey_throws, var_literal5);

		setDefaultStringIfNull3.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull3.solve(var_methodGetKey_index, var_literal0);

		setDefaultStringIfNull4.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull4.solve(var_methodPerformEncryption_index, var_literal3);

		setDefaultStringIfNull5.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull5.solve(var_methodPerformEncryption_throws, var_literal4);

		setDefaultStringIfNull6.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull6.solve(var_methodPerformGetKey_body, var_literal6);

		setDefaultStringIfNull7.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull7.solve(var_methodEncryption_throws, var_literal4);

		setDefaultStringIfNull8.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull8.solve(var_methodPerformEncryption_parameters, var_literal8);

		setDefaultStringIfNull9.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull9.solve(var_sbcJcu_name, var_literal7);

		setDefaultStringIfNull10.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull10.solve(var_methodPerformGetKey_index, var_literal3);

		setDefaultStringIfNull11.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull11.solve(var_methodPerformGetKey_throws, var_literal5);

		setDefaultStringIfNull12.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull12.solve(var_methodPerformGetKey_parameters, var_literal9);

		eq13.setRuleName("PasswordBasedEncryption");
		eq13.solve(var_exprIterationLiteral_value, var_kda_iterations);

		eq14.setRuleName("PasswordBasedEncryption");
		eq14.solve(var_exprAlgNameLiteral_value, var_kda_name);

		eq15.setRuleName("PasswordBasedEncryption");
		eq15.solve(var_task_package, var_javaPackage_name);

		setDefaultStringIfNull16.setRuleName("PasswordBasedEncryption");
		setDefaultStringIfNull16.solve(var_task_package, var_literal2);

		eq17.setRuleName("PasswordBasedEncryption");
		eq17.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);

		nameModePadding18.setRuleName("PasswordBasedEncryption");
		nameModePadding18.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);

		if (csp.check()) {
			ruleResult.setSuccess(true);
		} else {
			var_kda_iterations.setBound(false);
			var_kda_name.setBound(false);
			var_task_package.setBound(false);
			var_task_package.setBound(false);
			var_kda_outputSize.setBound(false);
			var_sbc_name.setBound(false);
			var_sbc_mode.setBound(false);
			var_sbc_padding.setBound(false);
			setDefaultStringIfNull0.solve(var_methodEncryption_index, var_literal0);
			setDefaultStringIfNull1.solve(var_methodPerformEncryption_body, var_literal1);
			setDefaultStringIfNull2.solve(var_methodGetKey_throws, var_literal5);
			setDefaultStringIfNull3.solve(var_methodGetKey_index, var_literal0);
			setDefaultStringIfNull4.solve(var_methodPerformEncryption_index, var_literal3);
			setDefaultStringIfNull5.solve(var_methodPerformEncryption_throws, var_literal4);
			setDefaultStringIfNull6.solve(var_methodPerformGetKey_body, var_literal6);
			setDefaultStringIfNull7.solve(var_methodEncryption_throws, var_literal4);
			setDefaultStringIfNull8.solve(var_methodPerformEncryption_parameters, var_literal8);
			setDefaultStringIfNull9.solve(var_sbcJcu_name, var_literal7);
			setDefaultStringIfNull10.solve(var_methodPerformGetKey_index, var_literal3);
			setDefaultStringIfNull11.solve(var_methodPerformGetKey_throws, var_literal5);
			setDefaultStringIfNull12.solve(var_methodPerformGetKey_parameters, var_literal9);
			eq13.solve(var_exprIterationLiteral_value, var_kda_iterations);
			eq14.solve(var_exprAlgNameLiteral_value, var_kda_name);
			eq15.solve(var_task_package, var_javaPackage_name);
			setDefaultStringIfNull16.solve(var_task_package, var_literal2);
			eq17.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);
			nameModePadding18.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);
			if (csp.check()) {
				ruleResult.setSuccess(true);
				ruleResult.setRequiredChange(true);
				__helper.setValue("kda", "iterations", var_kda_iterations.getValue());
				__helper.setValue("kda", "name", var_kda_name.getValue());
				__helper.setValue("task", "package", var_task_package.getValue());
				__helper.setValue("task", "package", var_task_package.getValue());
				__helper.setValue("kda", "outputSize", var_kda_outputSize.getValue());
				__helper.setValue("sbc", "name", var_sbc_name.getValue());
				__helper.setValue("sbc", "mode", var_sbc_mode.getValue());
				__helper.setValue("sbc", "padding", var_sbc_padding.getValue());
			} else {
				ruleResult.setSuccess(false);
				return ruleResult;
			}
		}

		return ruleResult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_CC(Match sourceMatch, Match targetMatch) {

		Object[] result1_black = PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_24_1_prepare_blackB(this);
		if (result1_black == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ".");
		}
		Object[] result1_green = PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_24_1_prepare_greenF();
		IsApplicableRuleResult result = (IsApplicableRuleResult) result1_green[0];

		Object[] result2_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_bindingAndBlackFFFFFFFFFFFFFFFFFFFFFFFFBB(
						sourceMatch, targetMatch);
		if (result2_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[sourceMatch] = " + sourceMatch
					+ ", " + "[targetMatch] = " + targetMatch + ".");
		}
		JavaLiteral exprIterationLiteral = (JavaLiteral) result2_bindingAndBlack[0];
		JavaPackage javaPackage = (JavaPackage) result2_bindingAndBlack[1];
		JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result2_bindingAndBlack[2];
		JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result2_bindingAndBlack[3];
		JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result2_bindingAndBlack[4];
		JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result2_bindingAndBlack[5];
		JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result2_bindingAndBlack[6];
		JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result2_bindingAndBlack[7];
		JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result2_bindingAndBlack[8];
		JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result2_bindingAndBlack[9];
		JavaLiteral exprAlgNameLiteral = (JavaLiteral) result2_bindingAndBlack[10];
		JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result2_bindingAndBlack[11];
		KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result2_bindingAndBlack[12];
		JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result2_bindingAndBlack[13];
		JavaStatement statRetPerformEncryption = (JavaStatement) result2_bindingAndBlack[14];
		JavaName exprKeyName = (JavaName) result2_bindingAndBlack[15];
		JavaLiteral exprNameModePadding = (JavaLiteral) result2_bindingAndBlack[16];
		JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result2_bindingAndBlack[17];
		Task task = (Task) result2_bindingAndBlack[18];
		JavaName exprPwdName = (JavaName) result2_bindingAndBlack[19];
		SymmetricBlockCipher sbc = (SymmetricBlockCipher) result2_bindingAndBlack[20];
		JavaName exprDataName = (JavaName) result2_bindingAndBlack[21];
		JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result2_bindingAndBlack[22];
		JavaStatement statRetGetKey = (JavaStatement) result2_bindingAndBlack[23];

		Object[] result3_bindingAndBlack = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_24_3_solvecsp_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBBBBBBB(this,
						exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, sourceMatch, targetMatch);
		if (result3_bindingAndBlack == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
					+ "[exprIterationLiteral] = " + exprIterationLiteral + ", " + "[javaPackage] = " + javaPackage
					+ ", " + "[exprRetGetKey] = " + exprRetGetKey + ", " + "[exprOutputSizeLiteral] = "
					+ exprOutputSizeLiteral + ", " + "[kdaJcu] = " + kdaJcu + ", " + "[methodPerformEncryption] = "
					+ methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu + ", " + "[keyEncryption] = "
					+ keyEncryption + ", " + "[dataEncryption] = " + dataEncryption + ", " + "[methodGetKey] = "
					+ methodGetKey + ", " + "[exprAlgNameLiteral] = " + exprAlgNameLiteral + ", "
					+ "[pwdDeclaration] = " + pwdDeclaration + ", " + "[kda] = " + kda + ", "
					+ "[methodPerformGetKey] = " + methodPerformGetKey + ", " + "[statRetPerformEncryption] = "
					+ statRetPerformEncryption + ", " + "[exprKeyName] = " + exprKeyName + ", "
					+ "[exprNameModePadding] = " + exprNameModePadding + ", " + "[methodEncryption] = "
					+ methodEncryption + ", " + "[task] = " + task + ", " + "[exprPwdName] = " + exprPwdName + ", "
					+ "[sbc] = " + sbc + ", " + "[exprDataName] = " + exprDataName + ", "
					+ "[exprRetPerformEncryption] = " + exprRetPerformEncryption + ", " + "[statRetGetKey] = "
					+ statRetGetKey + ", " + "[sourceMatch] = " + sourceMatch + ", " + "[targetMatch] = " + targetMatch
					+ ".");
		}
		CSP csp = (CSP) result3_bindingAndBlack[0];
		// 
		if (PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_24_4_checkCSP_expressionFB(csp)) {
			// ForEach 
			for (Object[] result5_black : PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_24_5_matchcorrcontext_blackBB(sourceMatch, targetMatch)) {
				Object[] result5_green = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_24_5_matchcorrcontext_greenBBF(sourceMatch, targetMatch);
				CCMatch ccMatch = (CCMatch) result5_green[2];

				Object[] result6_black = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_24_6_createcorrespondence_blackBBBBBBBBBBBBBBBBBBBBBBBBB(
								exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
								methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
								exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
								exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc,
								exprDataName, exprRetPerformEncryption, statRetGetKey, ccMatch);
				if (result6_black == null) {
					throw new RuntimeException("Pattern matching failed." + " Variables: " + "[exprIterationLiteral] = "
							+ exprIterationLiteral + ", " + "[javaPackage] = " + javaPackage + ", "
							+ "[exprRetGetKey] = " + exprRetGetKey + ", " + "[exprOutputSizeLiteral] = "
							+ exprOutputSizeLiteral + ", " + "[kdaJcu] = " + kdaJcu + ", "
							+ "[methodPerformEncryption] = " + methodPerformEncryption + ", " + "[sbcJcu] = " + sbcJcu
							+ ", " + "[keyEncryption] = " + keyEncryption + ", " + "[dataEncryption] = "
							+ dataEncryption + ", " + "[methodGetKey] = " + methodGetKey + ", "
							+ "[exprAlgNameLiteral] = " + exprAlgNameLiteral + ", " + "[pwdDeclaration] = "
							+ pwdDeclaration + ", " + "[kda] = " + kda + ", " + "[methodPerformGetKey] = "
							+ methodPerformGetKey + ", " + "[statRetPerformEncryption] = " + statRetPerformEncryption
							+ ", " + "[exprKeyName] = " + exprKeyName + ", " + "[exprNameModePadding] = "
							+ exprNameModePadding + ", " + "[methodEncryption] = " + methodEncryption + ", "
							+ "[task] = " + task + ", " + "[exprPwdName] = " + exprPwdName + ", " + "[sbc] = " + sbc
							+ ", " + "[exprDataName] = " + exprDataName + ", " + "[exprRetPerformEncryption] = "
							+ exprRetPerformEncryption + ", " + "[statRetGetKey] = " + statRetGetKey + ", "
							+ "[ccMatch] = " + ccMatch + ".");
				}
				PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_24_6_createcorrespondence_greenBFBBFBBBFB(
						javaPackage, kdaJcu, sbcJcu, kda, task, sbc, ccMatch);
				//nothing SymmetricBlockCipherToJcu sbc2Jcu = (SymmetricBlockCipherToJcu) result6_green[1];
				//nothing TaskToJavaPackage t2c = (TaskToJavaPackage) result6_green[4];
				//nothing KeyDerivationAlgorithmToJcu kda2Jcu = (KeyDerivationAlgorithmToJcu) result6_green[8];

				Object[] result7_black = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_24_7_addtoreturnedresult_blackBB(result, ccMatch);
				if (result7_black == null) {
					throw new RuntimeException("Pattern matching failed." + " Variables: " + "[result] = " + result
							+ ", " + "[ccMatch] = " + ccMatch + ".");
				}
				PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_24_7_addtoreturnedresult_greenBB(result,
						ccMatch);

			}

		} else {
		}
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_24_8_expressionFB(result);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_CC(JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, KeyDerivationAlgorithm kda, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, Task task, JavaName exprPwdName, SymmetricBlockCipher sbc,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey,
			Match sourceMatch, Match targetMatch) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal0", true, csp);
		literal0.setValue(1);
		literal0.setType("");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable("literal1", true, csp);
		literal1.setValue(
				"{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n");
		literal1.setType("");
		Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable("literal2", true, csp);
		literal2.setValue("NoSuchAlgorithmException, InvalidKeySpecException");
		literal2.setType("");
		Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable("literal3", true, csp);
		literal3.setValue(0);
		literal3.setType("");
		Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable("literal4", true, csp);
		literal4.setValue(
				"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException");
		literal4.setType("");
		Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable("literal5", true, csp);
		literal5.setValue(
				"{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n");
		literal5.setType("");
		Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable("literal6", true, csp);
		literal6.setValue("byte[] data,SecretKey key,String encryptPassingArgument");
		literal6.setType("");
		Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable("literal7", true, csp);
		literal7.setValue("Enc");
		literal7.setType("");
		Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable("literal8", true, csp);
		literal8.setValue("char [] pwd,String algName,int iterations,int outputSize");
		literal8.setType("");

		// Create attribute variables
		Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprIterationLiteral.value", true, csp);
		var_exprIterationLiteral_value.setValue(exprIterationLiteral.getValue());
		var_exprIterationLiteral_value.setType("String");
		Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable("kda.iterations", true, csp);
		var_kda_iterations.setValue(kda.getIterations());
		var_kda_iterations.setType("String");
		Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprAlgNameLiteral.value",
				true, csp);
		var_exprAlgNameLiteral_value.setValue(exprAlgNameLiteral.getValue());
		var_exprAlgNameLiteral_value.setType("String");
		Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable("kda.name", true, csp);
		var_kda_name.setValue(kda.getName());
		var_kda_name.setType("String");
		Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable("task.package", true, csp);
		var_task_package.setValue(task.getPackage());
		var_task_package.setType("String");
		Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable("javaPackage.name", true, csp);
		var_javaPackage_name.setValue(javaPackage.getName());
		var_javaPackage_name.setType("String");
		Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprOutputSizeLiteral.value", true, csp);
		var_exprOutputSizeLiteral_value.setValue(exprOutputSizeLiteral.getValue());
		var_exprOutputSizeLiteral_value.setType("String");
		Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable("kda.outputSize", true, csp);
		var_kda_outputSize.setValue(kda.getOutputSize());
		var_kda_outputSize.setType("String");
		Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.index", true,
				csp);
		var_methodEncryption_index.setValue(methodEncryption.getIndex());
		var_methodEncryption_index.setType("int");
		Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.body", true, csp);
		var_methodPerformEncryption_body.setValue(methodPerformEncryption.getBody());
		var_methodPerformEncryption_body.setType("String");
		Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.throws", true, csp);
		var_methodGetKey_throws.setValue(methodGetKey.getThrows());
		var_methodGetKey_throws.setType("String");
		Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.index", true, csp);
		var_methodGetKey_index.setValue(methodGetKey.getIndex());
		var_methodGetKey_index.setType("int");
		Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.index", true, csp);
		var_methodPerformEncryption_index.setValue(methodPerformEncryption.getIndex());
		var_methodPerformEncryption_index.setType("int");
		Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.throws", true, csp);
		var_methodPerformEncryption_throws.setValue(methodPerformEncryption.getThrows());
		var_methodPerformEncryption_throws.setType("String");
		Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.body",
				true, csp);
		var_methodPerformGetKey_body.setValue(methodPerformGetKey.getBody());
		var_methodPerformGetKey_body.setType("String");
		Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.throws",
				true, csp);
		var_methodEncryption_throws.setValue(methodEncryption.getThrows());
		var_methodEncryption_throws.setType("String");
		Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.parameters", true, csp);
		var_methodPerformEncryption_parameters.setValue(methodPerformEncryption.getParameters());
		var_methodPerformEncryption_parameters.setType("String");
		Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable("sbcJcu.name", true, csp);
		var_sbcJcu_name.setValue(sbcJcu.getName());
		var_sbcJcu_name.setType("String");
		Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.index",
				true, csp);
		var_methodPerformGetKey_index.setValue(methodPerformGetKey.getIndex());
		var_methodPerformGetKey_index.setType("int");
		Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.throws", true, csp);
		var_methodPerformGetKey_throws.setValue(methodPerformGetKey.getThrows());
		var_methodPerformGetKey_throws.setType("String");
		Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable("sbc.name", true, csp);
		var_sbc_name.setValue(sbc.getName());
		var_sbc_name.setType("String");
		Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable("sbc.mode", true, csp);
		var_sbc_mode.setValue(sbc.getMode());
		var_sbc_mode.setType("String");
		Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable("sbc.padding", true, csp);
		var_sbc_padding.setValue(sbc.getPadding());
		var_sbc_padding.setType("String");
		Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable("exprNameModePadding.value",
				true, csp);
		var_exprNameModePadding_value.setValue(exprNameModePadding.getValue());
		var_exprNameModePadding_value.setType("String");
		Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.parameters", true, csp);
		var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());
		var_methodPerformGetKey_parameters.setType("String");

		// Create unbound variables

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();
		Eq eq_2 = new Eq();
		SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();
		NameModePadding nameModePadding = new NameModePadding();
		SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);
		csp.getConstraints().add(eq_2);
		csp.getConstraints().add(setDefaultStringIfNull);
		csp.getConstraints().add(setDefaultStringIfNull_0);
		csp.getConstraints().add(setDefaultStringIfNull_1);
		csp.getConstraints().add(setDefaultStringIfNull_2);
		csp.getConstraints().add(setDefaultStringIfNull_3);
		csp.getConstraints().add(setDefaultStringIfNull_4);
		csp.getConstraints().add(setDefaultStringIfNull_5);
		csp.getConstraints().add(setDefaultStringIfNull_6);
		csp.getConstraints().add(setDefaultStringIfNull_7);
		csp.getConstraints().add(setDefaultStringIfNull_8);
		csp.getConstraints().add(setDefaultStringIfNull_9);
		csp.getConstraints().add(setDefaultStringIfNull_10);
		csp.getConstraints().add(nameModePadding);
		csp.getConstraints().add(setDefaultStringIfNull_11);

		// Solve CSP
		eq.setRuleName("NoRuleName");
		eq.solve(var_exprIterationLiteral_value, var_kda_iterations);
		eq_0.setRuleName("NoRuleName");
		eq_0.solve(var_exprAlgNameLiteral_value, var_kda_name);
		eq_1.setRuleName("NoRuleName");
		eq_1.solve(var_task_package, var_javaPackage_name);
		eq_2.setRuleName("NoRuleName");
		eq_2.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);
		setDefaultStringIfNull.setRuleName("NoRuleName");
		setDefaultStringIfNull.solve(var_methodEncryption_index, literal0);
		setDefaultStringIfNull_0.setRuleName("NoRuleName");
		setDefaultStringIfNull_0.solve(var_methodPerformEncryption_body, literal1);
		setDefaultStringIfNull_1.setRuleName("NoRuleName");
		setDefaultStringIfNull_1.solve(var_methodGetKey_throws, literal2);
		setDefaultStringIfNull_2.setRuleName("NoRuleName");
		setDefaultStringIfNull_2.solve(var_methodGetKey_index, literal0);
		setDefaultStringIfNull_3.setRuleName("NoRuleName");
		setDefaultStringIfNull_3.solve(var_methodPerformEncryption_index, literal3);
		setDefaultStringIfNull_4.setRuleName("NoRuleName");
		setDefaultStringIfNull_4.solve(var_methodPerformEncryption_throws, literal4);
		setDefaultStringIfNull_5.setRuleName("NoRuleName");
		setDefaultStringIfNull_5.solve(var_methodPerformGetKey_body, literal5);
		setDefaultStringIfNull_6.setRuleName("NoRuleName");
		setDefaultStringIfNull_6.solve(var_methodEncryption_throws, literal4);
		setDefaultStringIfNull_7.setRuleName("NoRuleName");
		setDefaultStringIfNull_7.solve(var_methodPerformEncryption_parameters, literal6);
		setDefaultStringIfNull_8.setRuleName("NoRuleName");
		setDefaultStringIfNull_8.solve(var_sbcJcu_name, literal7);
		setDefaultStringIfNull_9.setRuleName("NoRuleName");
		setDefaultStringIfNull_9.solve(var_methodPerformGetKey_index, literal3);
		setDefaultStringIfNull_10.setRuleName("NoRuleName");
		setDefaultStringIfNull_10.solve(var_methodPerformGetKey_throws, literal2);
		nameModePadding.setRuleName("NoRuleName");
		nameModePadding.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);
		setDefaultStringIfNull_11.setRuleName("NoRuleName");
		setDefaultStringIfNull_11.solve(var_methodPerformGetKey_parameters, literal8);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_CC(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkDEC_FWD(KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc) {// 
		Object[] result1_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_27_1_matchtggpattern_blackBBB(kda, task, sbc);
		if (result1_black != null) {
			PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_27_1_matchtggpattern_greenB(task);

			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_27_2_expressionF();
		} else {
			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_27_3_expressionF();
		}

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkDEC_BWD(JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {// 
		Object[] result1_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_28_1_matchtggpattern_blackBBBBBBBBBBBBBBBBBBBBB(exprIterationLiteral,
						javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu,
						keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral, pwdDeclaration,
						methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
						methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey);
		if (result1_black != null) {
			PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_28_1_matchtggpattern_greenBBBBBBBBBBBBBBBBBBB(
					exprIterationLiteral, exprRetGetKey, exprOutputSizeLiteral, kdaJcu, methodPerformEncryption,
					keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral, pwdDeclaration,
					methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding, methodEncryption,
					exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey);

			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_28_2_expressionF();
		} else {
			return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_28_3_expressionF();
		}

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelgeneratorRuleResult generateModel(RuleEntryContainer ruleEntryContainer) {

		Object[] result1_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_29_1_createresult_blackB(this);
		if (result1_black == null) {
			throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ".");
		}
		Object[] result1_green = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_29_1_createresult_greenFF();
		IsApplicableMatch isApplicableMatch = (IsApplicableMatch) result1_green[0];
		ModelgeneratorRuleResult ruleResult = (ModelgeneratorRuleResult) result1_green[1];

		// 
		Object[] result2_black = PasswordBasedEncryptionImpl
				.pattern_PasswordBasedEncryption_29_2_isapplicablecore_blackB(this);
		if (result2_black != null) {

			Object[] result3_bindingAndBlack = PasswordBasedEncryptionImpl
					.pattern_PasswordBasedEncryption_29_3_solveCSP_bindingAndBlackFBBB(this, isApplicableMatch,
							ruleResult);
			if (result3_bindingAndBlack == null) {
				throw new RuntimeException("Pattern matching failed." + " Variables: " + "[this] = " + this + ", "
						+ "[isApplicableMatch] = " + isApplicableMatch + ", " + "[ruleResult] = " + ruleResult + ".");
			}
			CSP csp = (CSP) result3_bindingAndBlack[0];
			// 
			if (PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_29_4_checkCSP_expressionFBB(this, csp)) {
				// 

				Object[] result6_black = PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_29_6_perform_blackB(ruleResult);
				if (result6_black == null) {
					throw new RuntimeException(
							"Pattern matching failed." + " Variables: " + "[ruleResult] = " + ruleResult + ".");
				}
				PasswordBasedEncryptionImpl
						.pattern_PasswordBasedEncryption_29_6_perform_greenFFFFFFFFFFFFFFFFFFFFFFFFFFFBB(ruleResult,
								csp);
				//nothing JavaLiteral exprIterationLiteral = (JavaLiteral) result6_green[0];
				//nothing JavaPackage javaPackage = (JavaPackage) result6_green[1];
				//nothing JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result6_green[2];
				//nothing JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result6_green[3];
				//nothing SymmetricBlockCipherToJcu sbc2Jcu = (SymmetricBlockCipherToJcu) result6_green[4];
				//nothing JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result6_green[5];
				//nothing JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result6_green[6];
				//nothing JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result6_green[7];
				//nothing JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result6_green[8];
				//nothing JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result6_green[9];
				//nothing JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result6_green[10];
				//nothing TaskToJavaPackage t2c = (TaskToJavaPackage) result6_green[11];
				//nothing JavaLiteral exprAlgNameLiteral = (JavaLiteral) result6_green[12];
				//nothing JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result6_green[13];
				//nothing KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result6_green[14];
				//nothing JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result6_green[15];
				//nothing JavaStatement statRetPerformEncryption = (JavaStatement) result6_green[16];
				//nothing JavaName exprKeyName = (JavaName) result6_green[17];
				//nothing JavaLiteral exprNameModePadding = (JavaLiteral) result6_green[18];
				//nothing JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result6_green[19];
				//nothing Task task = (Task) result6_green[20];
				//nothing JavaName exprPwdName = (JavaName) result6_green[21];
				//nothing SymmetricBlockCipher sbc = (SymmetricBlockCipher) result6_green[22];
				//nothing JavaName exprDataName = (JavaName) result6_green[23];
				//nothing JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result6_green[24];
				//nothing JavaStatement statRetGetKey = (JavaStatement) result6_green[25];
				//nothing KeyDerivationAlgorithmToJcu kda2Jcu = (KeyDerivationAlgorithmToJcu) result6_green[26];

			} else {
			}

		} else {
		}
		return PasswordBasedEncryptionImpl.pattern_PasswordBasedEncryption_29_7_expressionFB(ruleResult);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch, ModelgeneratorRuleResult ruleResult) {// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable("literal0", true, csp);
		literal0.setValue(1);
		literal0.setType("");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable("literal1", true, csp);
		literal1.setValue(
				"{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n");
		literal1.setType("");
		Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable("literal2", true, csp);
		literal2.setValue("NoSuchAlgorithmException, InvalidKeySpecException");
		literal2.setType("");
		Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable("literal3", true, csp);
		literal3.setValue("Crypto");
		literal3.setType("");
		Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable("literal4", true, csp);
		literal4.setValue(0);
		literal4.setType("");
		Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable("literal5", true, csp);
		literal5.setValue(
				"InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException");
		literal5.setType("");
		Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable("literal6", true, csp);
		literal6.setValue(
				"{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n");
		literal6.setType("");
		Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable("literal7", true, csp);
		literal7.setValue("byte[] data,SecretKey key,String encryptPassingArgument");
		literal7.setType("");
		Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable("literal8", true, csp);
		literal8.setValue("Enc");
		literal8.setType("");
		Variable literal9 = CSPFactoryHelper.eINSTANCE.createVariable("literal9", true, csp);
		literal9.setValue("char [] pwd,String algName,int iterations,int outputSize");
		literal9.setType("");

		// Create attribute variables

		// Create unbound variables
		Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprIterationLiteral.value", csp);
		var_exprIterationLiteral_value.setType("String");
		Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable("kda.iterations", csp);
		var_kda_iterations.setType("String");
		Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable("exprAlgNameLiteral.value",
				csp);
		var_exprAlgNameLiteral_value.setType("String");
		Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable("kda.name", csp);
		var_kda_name.setType("String");
		Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable("task.package", csp);
		var_task_package.setType("String");
		Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable("javaPackage.name", csp);
		var_javaPackage_name.setType("String");
		Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE
				.createVariable("exprOutputSizeLiteral.value", csp);
		var_exprOutputSizeLiteral_value.setType("String");
		Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable("kda.outputSize", csp);
		var_kda_outputSize.setType("String");
		Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.index", csp);
		var_methodEncryption_index.setType("int");
		Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.body", csp);
		var_methodPerformEncryption_body.setType("String");
		Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.throws", csp);
		var_methodGetKey_throws.setType("String");
		Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodGetKey.index", csp);
		var_methodGetKey_index.setType("int");
		Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.index", csp);
		var_methodPerformEncryption_index.setType("int");
		Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.throws", csp);
		var_methodPerformEncryption_throws.setType("String");
		Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.body",
				csp);
		var_methodPerformGetKey_body.setType("String");
		Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable("methodEncryption.throws",
				csp);
		var_methodEncryption_throws.setType("String");
		Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformEncryption.parameters", csp);
		var_methodPerformEncryption_parameters.setType("String");
		Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable("sbcJcu.name", csp);
		var_sbcJcu_name.setType("String");
		Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable("methodPerformGetKey.index",
				csp);
		var_methodPerformGetKey_index.setType("int");
		Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.throws", csp);
		var_methodPerformGetKey_throws.setType("String");
		Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable("sbc.name", csp);
		var_sbc_name.setType("String");
		Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable("sbc.mode", csp);
		var_sbc_mode.setType("String");
		Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable("sbc.padding", csp);
		var_sbc_padding.setType("String");
		Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable("exprNameModePadding.value",
				csp);
		var_exprNameModePadding_value.setType("String");
		Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE
				.createVariable("methodPerformGetKey.parameters", csp);
		var_methodPerformGetKey_parameters.setType("String");

		// Create constraints
		SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();
		SetDefaultStringIfNull setDefaultStringIfNull_12 = new SetDefaultStringIfNull();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		NameModePadding nameModePadding = new NameModePadding();
		Eq eq_1 = new Eq();
		Eq eq_2 = new Eq();

		csp.getConstraints().add(setDefaultStringIfNull);
		csp.getConstraints().add(setDefaultStringIfNull_0);
		csp.getConstraints().add(setDefaultStringIfNull_1);
		csp.getConstraints().add(setDefaultStringIfNull_2);
		csp.getConstraints().add(setDefaultStringIfNull_3);
		csp.getConstraints().add(setDefaultStringIfNull_4);
		csp.getConstraints().add(setDefaultStringIfNull_5);
		csp.getConstraints().add(setDefaultStringIfNull_6);
		csp.getConstraints().add(setDefaultStringIfNull_7);
		csp.getConstraints().add(setDefaultStringIfNull_8);
		csp.getConstraints().add(setDefaultStringIfNull_9);
		csp.getConstraints().add(setDefaultStringIfNull_10);
		csp.getConstraints().add(setDefaultStringIfNull_11);
		csp.getConstraints().add(setDefaultStringIfNull_12);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(nameModePadding);
		csp.getConstraints().add(eq_1);
		csp.getConstraints().add(eq_2);

		// Solve CSP
		setDefaultStringIfNull.setRuleName("NoRuleName");
		setDefaultStringIfNull.solve(var_methodEncryption_index, literal0);
		setDefaultStringIfNull_0.setRuleName("NoRuleName");
		setDefaultStringIfNull_0.solve(var_methodPerformEncryption_body, literal1);
		setDefaultStringIfNull_1.setRuleName("NoRuleName");
		setDefaultStringIfNull_1.solve(var_methodGetKey_throws, literal2);
		setDefaultStringIfNull_2.setRuleName("NoRuleName");
		setDefaultStringIfNull_2.solve(var_task_package, literal3);
		setDefaultStringIfNull_3.setRuleName("NoRuleName");
		setDefaultStringIfNull_3.solve(var_methodGetKey_index, literal0);
		setDefaultStringIfNull_4.setRuleName("NoRuleName");
		setDefaultStringIfNull_4.solve(var_methodPerformEncryption_index, literal4);
		setDefaultStringIfNull_5.setRuleName("NoRuleName");
		setDefaultStringIfNull_5.solve(var_methodPerformEncryption_throws, literal5);
		setDefaultStringIfNull_6.setRuleName("NoRuleName");
		setDefaultStringIfNull_6.solve(var_methodPerformGetKey_body, literal6);
		setDefaultStringIfNull_7.setRuleName("NoRuleName");
		setDefaultStringIfNull_7.solve(var_methodEncryption_throws, literal5);
		setDefaultStringIfNull_8.setRuleName("NoRuleName");
		setDefaultStringIfNull_8.solve(var_methodPerformEncryption_parameters, literal7);
		setDefaultStringIfNull_9.setRuleName("NoRuleName");
		setDefaultStringIfNull_9.solve(var_sbcJcu_name, literal8);
		setDefaultStringIfNull_10.setRuleName("NoRuleName");
		setDefaultStringIfNull_10.solve(var_methodPerformGetKey_index, literal4);
		setDefaultStringIfNull_11.setRuleName("NoRuleName");
		setDefaultStringIfNull_11.solve(var_methodPerformGetKey_throws, literal2);
		setDefaultStringIfNull_12.setRuleName("NoRuleName");
		setDefaultStringIfNull_12.solve(var_methodPerformGetKey_parameters, literal9);
		eq.setRuleName("NoRuleName");
		eq.solve(var_task_package, var_javaPackage_name);
		eq_0.setRuleName("NoRuleName");
		eq_0.solve(var_exprIterationLiteral_value, var_kda_iterations);
		nameModePadding.setRuleName("NoRuleName");
		nameModePadding.solve(var_sbc_name, var_sbc_mode, var_sbc_padding, var_exprNameModePadding_value);
		eq_1.setRuleName("NoRuleName");
		eq_1.solve(var_exprAlgNameLiteral_value, var_kda_name);
		eq_2.setRuleName("NoRuleName");
		eq_2.solve(var_exprOutputSizeLiteral_value, var_kda_outputSize);

		// Snapshot pattern match on which CSP is solved
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean generateModel_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments) throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_FWD__MATCH_KEYDERIVATIONALGORITHM_TASK_SYMMETRICBLOCKCIPHER:
			return isAppropriate_FWD((Match) arguments.get(0), (KeyDerivationAlgorithm) arguments.get(1),
					(Task) arguments.get(2), (SymmetricBlockCipher) arguments.get(3));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_KEYDERIVATIONALGORITHM_TASK_SYMMETRICBLOCKCIPHER:
			registerObjectsToMatch_FWD((Match) arguments.get(0), (KeyDerivationAlgorithm) arguments.get(1),
					(Task) arguments.get(2), (SymmetricBlockCipher) arguments.get(3));
			return null;
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_KEYDERIVATIONALGORITHM_TASK_SYMMETRICBLOCKCIPHER:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0), (KeyDerivationAlgorithm) arguments.get(1),
					(Task) arguments.get(2), (SymmetricBlockCipher) arguments.get(3));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
			return isAppropriate_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_KEYDERIVATIONALGORITHM_TASK_SYMMETRICBLOCKCIPHER:
			return isApplicable_solveCsp_FWD((IsApplicableMatch) arguments.get(0),
					(KeyDerivationAlgorithm) arguments.get(1), (Task) arguments.get(2),
					(SymmetricBlockCipher) arguments.get(3));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
			return isApplicable_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0), (EObject) arguments.get(1),
					(EObject) arguments.get(2), (EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6), (EObject) arguments.get(7),
					(EObject) arguments.get(8), (EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12), (EObject) arguments.get(13),
					(EObject) arguments.get(14), (EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18), (EObject) arguments.get(19),
					(EObject) arguments.get(20), (EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24), (EObject) arguments.get(25),
					(EObject) arguments.get(26), (EObject) arguments.get(27));
			return null;
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_BWD__MATCH_JAVALITERAL_JAVAPACKAGE_JAVAMETHODINVOCATION_JAVALITERAL_JAVACOMPILATIONUNIT_JAVAOPAQUEMETHOD_JAVACOMPILATIONUNIT_JAVAVARIABLEDECLARATION_JAVAVARIABLEDECLARATION_JAVAWORKFLOWMETHOD_JAVALITERAL_JAVAVARIABLEDECLARATION_JAVAOPAQUEMETHOD_JAVASTATEMENT_JAVANAME_JAVALITERAL_JAVAWORKFLOWMETHOD_JAVANAME_JAVANAME_JAVAMETHODINVOCATION_JAVASTATEMENT:
			return isAppropriate_BWD((Match) arguments.get(0), (JavaLiteral) arguments.get(1),
					(JavaPackage) arguments.get(2), (JavaMethodInvocation) arguments.get(3),
					(JavaLiteral) arguments.get(4), (JavaCompilationUnit) arguments.get(5),
					(JavaOpaqueMethod) arguments.get(6), (JavaCompilationUnit) arguments.get(7),
					(JavaVariableDeclaration) arguments.get(8), (JavaVariableDeclaration) arguments.get(9),
					(JavaWorkflowMethod) arguments.get(10), (JavaLiteral) arguments.get(11),
					(JavaVariableDeclaration) arguments.get(12), (JavaOpaqueMethod) arguments.get(13),
					(JavaStatement) arguments.get(14), (JavaName) arguments.get(15), (JavaLiteral) arguments.get(16),
					(JavaWorkflowMethod) arguments.get(17), (JavaName) arguments.get(18), (JavaName) arguments.get(19),
					(JavaMethodInvocation) arguments.get(20), (JavaStatement) arguments.get(21));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___PERFORM_BWD__ISAPPLICABLEMATCH:
			return perform_BWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_BWD__MATCH:
			return isApplicable_BWD((Match) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_JAVALITERAL_JAVAPACKAGE_JAVAMETHODINVOCATION_JAVALITERAL_JAVACOMPILATIONUNIT_JAVAOPAQUEMETHOD_JAVACOMPILATIONUNIT_JAVAVARIABLEDECLARATION_JAVAVARIABLEDECLARATION_JAVAWORKFLOWMETHOD_JAVALITERAL_JAVAVARIABLEDECLARATION_JAVAOPAQUEMETHOD_JAVASTATEMENT_JAVANAME_JAVALITERAL_JAVAWORKFLOWMETHOD_JAVANAME_JAVANAME_JAVAMETHODINVOCATION_JAVASTATEMENT:
			registerObjectsToMatch_BWD((Match) arguments.get(0), (JavaLiteral) arguments.get(1),
					(JavaPackage) arguments.get(2), (JavaMethodInvocation) arguments.get(3),
					(JavaLiteral) arguments.get(4), (JavaCompilationUnit) arguments.get(5),
					(JavaOpaqueMethod) arguments.get(6), (JavaCompilationUnit) arguments.get(7),
					(JavaVariableDeclaration) arguments.get(8), (JavaVariableDeclaration) arguments.get(9),
					(JavaWorkflowMethod) arguments.get(10), (JavaLiteral) arguments.get(11),
					(JavaVariableDeclaration) arguments.get(12), (JavaOpaqueMethod) arguments.get(13),
					(JavaStatement) arguments.get(14), (JavaName) arguments.get(15), (JavaLiteral) arguments.get(16),
					(JavaWorkflowMethod) arguments.get(17), (JavaName) arguments.get(18), (JavaName) arguments.get(19),
					(JavaMethodInvocation) arguments.get(20), (JavaStatement) arguments.get(21));
			return null;
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_JAVALITERAL_JAVAPACKAGE_JAVAMETHODINVOCATION_JAVALITERAL_JAVACOMPILATIONUNIT_JAVAOPAQUEMETHOD_JAVACOMPILATIONUNIT_JAVAVARIABLEDECLARATION_JAVAVARIABLEDECLARATION_JAVAWORKFLOWMETHOD_JAVALITERAL_JAVAVARIABLEDECLARATION_JAVAOPAQUEMETHOD_JAVASTATEMENT_JAVANAME_JAVALITERAL_JAVAWORKFLOWMETHOD_JAVANAME_JAVANAME_JAVAMETHODINVOCATION_JAVASTATEMENT:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0), (JavaLiteral) arguments.get(1),
					(JavaPackage) arguments.get(2), (JavaMethodInvocation) arguments.get(3),
					(JavaLiteral) arguments.get(4), (JavaCompilationUnit) arguments.get(5),
					(JavaOpaqueMethod) arguments.get(6), (JavaCompilationUnit) arguments.get(7),
					(JavaVariableDeclaration) arguments.get(8), (JavaVariableDeclaration) arguments.get(9),
					(JavaWorkflowMethod) arguments.get(10), (JavaLiteral) arguments.get(11),
					(JavaVariableDeclaration) arguments.get(12), (JavaOpaqueMethod) arguments.get(13),
					(JavaStatement) arguments.get(14), (JavaName) arguments.get(15), (JavaLiteral) arguments.get(16),
					(JavaWorkflowMethod) arguments.get(17), (JavaName) arguments.get(18), (JavaName) arguments.get(19),
					(JavaMethodInvocation) arguments.get(20), (JavaStatement) arguments.get(21));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
			return isAppropriate_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_JAVALITERAL_JAVAPACKAGE_JAVAMETHODINVOCATION_JAVALITERAL_JAVACOMPILATIONUNIT_JAVAOPAQUEMETHOD_JAVACOMPILATIONUNIT_JAVAVARIABLEDECLARATION_JAVAVARIABLEDECLARATION_JAVAWORKFLOWMETHOD_JAVALITERAL_JAVAVARIABLEDECLARATION_JAVAOPAQUEMETHOD_JAVASTATEMENT_JAVANAME_JAVALITERAL_JAVAWORKFLOWMETHOD_JAVANAME_JAVANAME_JAVAMETHODINVOCATION_JAVASTATEMENT:
			return isApplicable_solveCsp_BWD((IsApplicableMatch) arguments.get(0), (JavaLiteral) arguments.get(1),
					(JavaPackage) arguments.get(2), (JavaMethodInvocation) arguments.get(3),
					(JavaLiteral) arguments.get(4), (JavaCompilationUnit) arguments.get(5),
					(JavaOpaqueMethod) arguments.get(6), (JavaCompilationUnit) arguments.get(7),
					(JavaVariableDeclaration) arguments.get(8), (JavaVariableDeclaration) arguments.get(9),
					(JavaWorkflowMethod) arguments.get(10), (JavaLiteral) arguments.get(11),
					(JavaVariableDeclaration) arguments.get(12), (JavaOpaqueMethod) arguments.get(13),
					(JavaStatement) arguments.get(14), (JavaName) arguments.get(15), (JavaLiteral) arguments.get(16),
					(JavaWorkflowMethod) arguments.get(17), (JavaName) arguments.get(18), (JavaName) arguments.get(19),
					(JavaMethodInvocation) arguments.get(20), (JavaStatement) arguments.get(21));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
			return isApplicable_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0), (EObject) arguments.get(1),
					(EObject) arguments.get(2), (EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6), (EObject) arguments.get(7),
					(EObject) arguments.get(8), (EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12), (EObject) arguments.get(13),
					(EObject) arguments.get(14), (EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18), (EObject) arguments.get(19),
					(EObject) arguments.get(20), (EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24), (EObject) arguments.get(25),
					(EObject) arguments.get(26), (EObject) arguments.get(27));
			return null;
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___CHECK_TYPES_BWD__MATCH:
			return checkTypes_BWD((Match) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_FWD_EMOFLON_EDGE_9__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_9((EMoflonEdge) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPROPRIATE_BWD_EMOFLON_EDGE_12__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_12((EMoflonEdge) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
			return checkAttributes_FWD((TripleMatch) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
			return checkAttributes_BWD((TripleMatch) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_CC__MATCH_MATCH:
			return isApplicable_CC((Match) arguments.get(0), (Match) arguments.get(1));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_SOLVE_CSP_CC__JAVALITERAL_JAVAPACKAGE_JAVAMETHODINVOCATION_JAVALITERAL_JAVACOMPILATIONUNIT_JAVAOPAQUEMETHOD_JAVACOMPILATIONUNIT_JAVAVARIABLEDECLARATION_JAVAVARIABLEDECLARATION_JAVAWORKFLOWMETHOD_JAVALITERAL_JAVAVARIABLEDECLARATION_KEYDERIVATIONALGORITHM_JAVAOPAQUEMETHOD_JAVASTATEMENT_JAVANAME_JAVALITERAL_JAVAWORKFLOWMETHOD_TASK_JAVANAME_SYMMETRICBLOCKCIPHER_JAVANAME_JAVAMETHODINVOCATION_JAVASTATEMENT_MATCH_MATCH:
			return isApplicable_solveCsp_CC((JavaLiteral) arguments.get(0), (JavaPackage) arguments.get(1),
					(JavaMethodInvocation) arguments.get(2), (JavaLiteral) arguments.get(3),
					(JavaCompilationUnit) arguments.get(4), (JavaOpaqueMethod) arguments.get(5),
					(JavaCompilationUnit) arguments.get(6), (JavaVariableDeclaration) arguments.get(7),
					(JavaVariableDeclaration) arguments.get(8), (JavaWorkflowMethod) arguments.get(9),
					(JavaLiteral) arguments.get(10), (JavaVariableDeclaration) arguments.get(11),
					(KeyDerivationAlgorithm) arguments.get(12), (JavaOpaqueMethod) arguments.get(13),
					(JavaStatement) arguments.get(14), (JavaName) arguments.get(15), (JavaLiteral) arguments.get(16),
					(JavaWorkflowMethod) arguments.get(17), (Task) arguments.get(18), (JavaName) arguments.get(19),
					(SymmetricBlockCipher) arguments.get(20), (JavaName) arguments.get(21),
					(JavaMethodInvocation) arguments.get(22), (JavaStatement) arguments.get(23),
					(Match) arguments.get(24), (Match) arguments.get(25));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___IS_APPLICABLE_CHECK_CSP_CC__CSP:
			return isApplicable_checkCsp_CC((CSP) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___CHECK_DEC_FWD__KEYDERIVATIONALGORITHM_TASK_SYMMETRICBLOCKCIPHER:
			return checkDEC_FWD((KeyDerivationAlgorithm) arguments.get(0), (Task) arguments.get(1),
					(SymmetricBlockCipher) arguments.get(2));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___CHECK_DEC_BWD__JAVALITERAL_JAVAPACKAGE_JAVAMETHODINVOCATION_JAVALITERAL_JAVACOMPILATIONUNIT_JAVAOPAQUEMETHOD_JAVACOMPILATIONUNIT_JAVAVARIABLEDECLARATION_JAVAVARIABLEDECLARATION_JAVAWORKFLOWMETHOD_JAVALITERAL_JAVAVARIABLEDECLARATION_JAVAOPAQUEMETHOD_JAVASTATEMENT_JAVANAME_JAVALITERAL_JAVAWORKFLOWMETHOD_JAVANAME_JAVANAME_JAVAMETHODINVOCATION_JAVASTATEMENT:
			return checkDEC_BWD((JavaLiteral) arguments.get(0), (JavaPackage) arguments.get(1),
					(JavaMethodInvocation) arguments.get(2), (JavaLiteral) arguments.get(3),
					(JavaCompilationUnit) arguments.get(4), (JavaOpaqueMethod) arguments.get(5),
					(JavaCompilationUnit) arguments.get(6), (JavaVariableDeclaration) arguments.get(7),
					(JavaVariableDeclaration) arguments.get(8), (JavaWorkflowMethod) arguments.get(9),
					(JavaLiteral) arguments.get(10), (JavaVariableDeclaration) arguments.get(11),
					(JavaOpaqueMethod) arguments.get(12), (JavaStatement) arguments.get(13),
					(JavaName) arguments.get(14), (JavaLiteral) arguments.get(15),
					(JavaWorkflowMethod) arguments.get(16), (JavaName) arguments.get(17), (JavaName) arguments.get(18),
					(JavaMethodInvocation) arguments.get(19), (JavaStatement) arguments.get(20));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___GENERATE_MODEL__RULEENTRYCONTAINER:
			return generateModel((RuleEntryContainer) arguments.get(0));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___GENERATE_MODEL_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_MODELGENERATORRULERESULT:
			return generateModel_solveCsp_BWD((IsApplicableMatch) arguments.get(0),
					(ModelgeneratorRuleResult) arguments.get(1));
		case RulesPackage.PASSWORD_BASED_ENCRYPTION___GENERATE_MODEL_CHECK_CSP_BWD__CSP:
			return generateModel_checkCsp_BWD((CSP) arguments.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}

	public static final Object[] pattern_PasswordBasedEncryption_0_1_initialbindings_blackBBBBB(
			PasswordBasedEncryption _this, Match match, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		return new Object[] { _this, match, kda, task, sbc };
	}

	public static final Object[] pattern_PasswordBasedEncryption_0_2_SolveCSP_bindingFBBBBB(
			PasswordBasedEncryption _this, Match match, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		CSP _localVariable_0 = _this.isAppropriate_solveCsp_FWD(match, kda, task, sbc);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, match, kda, task, sbc };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_0_2_SolveCSP_blackB(CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_0_2_SolveCSP_bindingAndBlackFBBBBB(
			PasswordBasedEncryption _this, Match match, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		Object[] result_pattern_PasswordBasedEncryption_0_2_SolveCSP_binding = pattern_PasswordBasedEncryption_0_2_SolveCSP_bindingFBBBBB(
				_this, match, kda, task, sbc);
		if (result_pattern_PasswordBasedEncryption_0_2_SolveCSP_binding != null) {
			CSP csp = (CSP) result_pattern_PasswordBasedEncryption_0_2_SolveCSP_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_0_2_SolveCSP_black = pattern_PasswordBasedEncryption_0_2_SolveCSP_blackB(
					csp);
			if (result_pattern_PasswordBasedEncryption_0_2_SolveCSP_black != null) {

				return new Object[] { csp, _this, match, kda, task, sbc };
			}
		}
		return null;
	}

	public static final boolean pattern_PasswordBasedEncryption_0_3_CheckCSP_expressionFBB(
			PasswordBasedEncryption _this, CSP csp) {
		boolean _localVariable_0 = _this.isAppropriate_checkCsp_FWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_0_4_collectelementstobetranslated_blackBBBB(
			Match match, KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc) {
		return new Object[] { match, kda, task, sbc };
	}

	public static final Object[] pattern_PasswordBasedEncryption_0_4_collectelementstobetranslated_greenBBBBFF(
			Match match, KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc) {
		EMoflonEdge task__kda____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge task__sbc____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		match.getToBeTranslatedNodes().add(kda);
		match.getToBeTranslatedNodes().add(task);
		match.getToBeTranslatedNodes().add(sbc);
		String task__kda____algorithms_name_prime = "algorithms";
		String task__sbc____algorithms_name_prime = "algorithms";
		task__kda____algorithms.setSrc(task);
		task__kda____algorithms.setTrg(kda);
		match.getToBeTranslatedEdges().add(task__kda____algorithms);
		task__sbc____algorithms.setSrc(task);
		task__sbc____algorithms.setTrg(sbc);
		match.getToBeTranslatedEdges().add(task__sbc____algorithms);
		task__kda____algorithms.setName(task__kda____algorithms_name_prime);
		task__sbc____algorithms.setName(task__sbc____algorithms_name_prime);
		return new Object[] { match, kda, task, sbc, task__kda____algorithms, task__sbc____algorithms };
	}

	public static final Object[] pattern_PasswordBasedEncryption_0_5_collectcontextelements_blackBBBB(Match match,
			KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc) {
		return new Object[] { match, kda, task, sbc };
	}

	public static final void pattern_PasswordBasedEncryption_0_6_registerobjectstomatch_expressionBBBBB(
			PasswordBasedEncryption _this, Match match, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		_this.registerObjectsToMatch_FWD(match, kda, task, sbc);

	}

	public static final boolean pattern_PasswordBasedEncryption_0_7_expressionF() {
		boolean _result = Boolean.valueOf(true);
		return _result;
	}

	public static final boolean pattern_PasswordBasedEncryption_0_8_expressionF() {
		boolean _result = Boolean.valueOf(false);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_1_performtransformation_bindingFFFB(
			IsApplicableMatch isApplicableMatch) {
		EObject _localVariable_0 = isApplicableMatch.getObject("kda");
		EObject _localVariable_1 = isApplicableMatch.getObject("task");
		EObject _localVariable_2 = isApplicableMatch.getObject("sbc");
		EObject tmpKda = _localVariable_0;
		EObject tmpTask = _localVariable_1;
		EObject tmpSbc = _localVariable_2;
		if (tmpKda instanceof KeyDerivationAlgorithm) {
			KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) tmpKda;
			if (tmpTask instanceof Task) {
				Task task = (Task) tmpTask;
				if (tmpSbc instanceof SymmetricBlockCipher) {
					SymmetricBlockCipher sbc = (SymmetricBlockCipher) tmpSbc;
					return new Object[] { kda, task, sbc, isApplicableMatch };
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_1_performtransformation_blackBBBFBB(
			KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc, PasswordBasedEncryption _this,
			IsApplicableMatch isApplicableMatch) {
		for (EObject tmpCsp : isApplicableMatch.getAttributeInfo()) {
			if (tmpCsp instanceof CSP) {
				CSP csp = (CSP) tmpCsp;
				return new Object[] { kda, task, sbc, csp, _this, isApplicableMatch };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_1_performtransformation_bindingAndBlackFFFFBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch) {
		Object[] result_pattern_PasswordBasedEncryption_1_1_performtransformation_binding = pattern_PasswordBasedEncryption_1_1_performtransformation_bindingFFFB(
				isApplicableMatch);
		if (result_pattern_PasswordBasedEncryption_1_1_performtransformation_binding != null) {
			KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result_pattern_PasswordBasedEncryption_1_1_performtransformation_binding[0];
			Task task = (Task) result_pattern_PasswordBasedEncryption_1_1_performtransformation_binding[1];
			SymmetricBlockCipher sbc = (SymmetricBlockCipher) result_pattern_PasswordBasedEncryption_1_1_performtransformation_binding[2];

			Object[] result_pattern_PasswordBasedEncryption_1_1_performtransformation_black = pattern_PasswordBasedEncryption_1_1_performtransformation_blackBBBFBB(
					kda, task, sbc, _this, isApplicableMatch);
			if (result_pattern_PasswordBasedEncryption_1_1_performtransformation_black != null) {
				CSP csp = (CSP) result_pattern_PasswordBasedEncryption_1_1_performtransformation_black[3];

				return new Object[] { kda, task, sbc, csp, _this, isApplicableMatch };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_1_performtransformation_greenFFFFFFFFFFFFFFBFFFFFBFBFFFFB(
			KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc, CSP csp) {
		JavaLiteral exprIterationLiteral = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		JavaPackage javaPackage = SimpleJavaFactory.eINSTANCE.createJavaPackage();
		JavaMethodInvocation exprRetGetKey = SimpleJavaFactory.eINSTANCE.createJavaMethodInvocation();
		JavaLiteral exprOutputSizeLiteral = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		SymmetricBlockCipherToJcu sbc2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createSymmetricBlockCipherToJcu();
		JavaCompilationUnit kdaJcu = SimpleJavaFactory.eINSTANCE.createJavaCompilationUnit();
		JavaOpaqueMethod methodPerformEncryption = SimpleJavaFactory.eINSTANCE.createJavaOpaqueMethod();
		JavaCompilationUnit sbcJcu = SimpleJavaFactory.eINSTANCE.createJavaCompilationUnit();
		JavaVariableDeclaration keyEncryption = SimpleJavaFactory.eINSTANCE.createJavaVariableDeclaration();
		JavaVariableDeclaration dataEncryption = SimpleJavaFactory.eINSTANCE.createJavaVariableDeclaration();
		JavaWorkflowMethod methodGetKey = SimpleJavaFactory.eINSTANCE.createJavaWorkflowMethod();
		TaskToJavaPackage t2c = CryptoConfigToJavaFactory.eINSTANCE.createTaskToJavaPackage();
		JavaLiteral exprAlgNameLiteral = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		JavaVariableDeclaration pwdDeclaration = SimpleJavaFactory.eINSTANCE.createJavaVariableDeclaration();
		JavaOpaqueMethod methodPerformGetKey = SimpleJavaFactory.eINSTANCE.createJavaOpaqueMethod();
		JavaStatement statRetPerformEncryption = SimpleJavaFactory.eINSTANCE.createJavaStatement();
		JavaName exprKeyName = SimpleJavaFactory.eINSTANCE.createJavaName();
		JavaLiteral exprNameModePadding = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		JavaWorkflowMethod methodEncryption = SimpleJavaFactory.eINSTANCE.createJavaWorkflowMethod();
		JavaName exprPwdName = SimpleJavaFactory.eINSTANCE.createJavaName();
		JavaName exprDataName = SimpleJavaFactory.eINSTANCE.createJavaName();
		JavaMethodInvocation exprRetPerformEncryption = SimpleJavaFactory.eINSTANCE.createJavaMethodInvocation();
		JavaStatement statRetGetKey = SimpleJavaFactory.eINSTANCE.createJavaStatement();
		KeyDerivationAlgorithmToJcu kda2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createKeyDerivationAlgorithmToJcu();
		int exprIterationLiteral_index_prime = Integer.valueOf(2);
		Object _localVariable_0 = csp.getValue("exprIterationLiteral", "value");
		Object _localVariable_1 = csp.getValue("javaPackage", "name");
		String exprRetGetKey_name_prime = "performGetKey";
		int exprOutputSizeLiteral_index_prime = Integer.valueOf(3);
		Object _localVariable_2 = csp.getValue("exprOutputSizeLiteral", "value");
		String kdaJcu_name_prime = "KeyDeriv";
		String methodPerformEncryption_modifier_prime = "private";
		String methodPerformEncryption_name_prime = "performEncryption";
		String methodPerformEncryption_type_prime = "byte[] ";
		Object _localVariable_3 = csp.getValue("methodPerformEncryption", "body");
		Object _localVariable_4 = csp.getValue("methodPerformEncryption", "index");
		Object _localVariable_5 = csp.getValue("methodPerformEncryption", "throws");
		Object _localVariable_6 = csp.getValue("methodPerformEncryption", "parameters");
		Object _localVariable_7 = csp.getValue("sbcJcu", "name");
		String keyEncryption_type_prime = "SecretKey";
		int keyEncryption_index_prime = Integer.valueOf(1);
		String keyEncryption_name_prime = "key";
		int dataEncryption_index_prime = Integer.valueOf(0);
		String dataEncryption_type_prime = "byte[]";
		String dataEncryption_name_prime = "data";
		String methodGetKey_modifier_prime = "public";
		String methodGetKey_type_prime = "SecretKey ";
		String methodGetKey_name_prime = "getKey";
		Object _localVariable_8 = csp.getValue("methodGetKey", "throws");
		Object _localVariable_9 = csp.getValue("methodGetKey", "index");
		int exprAlgNameLiteral_index_prime = Integer.valueOf(1);
		Object _localVariable_10 = csp.getValue("exprAlgNameLiteral", "value");
		String pwdDeclaration_name_prime = "pwd";
		int pwdDeclaration_index_prime = Integer.valueOf(0);
		String pwdDeclaration_type_prime = "char[]";
		String methodPerformGetKey_name_prime = "performGetKey";
		String methodPerformGetKey_type_prime = "SecretKey ";
		String methodPerformGetKey_modifier_prime = "private";
		Object _localVariable_11 = csp.getValue("methodPerformGetKey", "body");
		Object _localVariable_12 = csp.getValue("methodPerformGetKey", "index");
		Object _localVariable_13 = csp.getValue("methodPerformGetKey", "throws");
		Object _localVariable_14 = csp.getValue("methodPerformGetKey", "parameters");
		boolean statRetPerformEncryption_return_prime = Boolean.valueOf(true);
		int exprKeyName_index_prime = Integer.valueOf(1);
		String exprKeyName_identifier_prime = "key";
		int exprNameModePadding_index_prime = Integer.valueOf(2);
		Object _localVariable_15 = csp.getValue("exprNameModePadding", "value");
		String methodEncryption_type_prime = "byte[] ";
		String methodEncryption_modifier_prime = "public";
		String methodEncryption_name_prime = "encrypt";
		Object _localVariable_16 = csp.getValue("methodEncryption", "index");
		Object _localVariable_17 = csp.getValue("methodEncryption", "throws");
		String exprPwdName_identifier_prime = "pwd";
		int exprPwdName_index_prime = Integer.valueOf(0);
		int exprDataName_index_prime = Integer.valueOf(0);
		String exprDataName_identifier_prime = "data";
		String exprRetPerformEncryption_name_prime = "performEncryption";
		boolean statRetGetKey_return_prime = Boolean.valueOf(true);
		exprRetGetKey.getArguments().add(exprIterationLiteral);
		exprRetGetKey.getArguments().add(exprOutputSizeLiteral);
		sbc2Jcu.setSource(sbc);
		javaPackage.getCunits().add(kdaJcu);
		sbc2Jcu.setTarget(sbcJcu);
		javaPackage.getCunits().add(sbcJcu);
		sbcJcu.getMethods().add(methodPerformEncryption);
		kdaJcu.getMethods().add(methodGetKey);
		t2c.setSource(task);
		t2c.setTarget(javaPackage);
		exprRetGetKey.getArguments().add(exprAlgNameLiteral);
		methodGetKey.getParams().add(pwdDeclaration);
		kdaJcu.getMethods().add(methodPerformGetKey);
		sbcJcu.getMethods().add(methodEncryption);
		methodEncryption.getStatements().add(statRetPerformEncryption);
		methodEncryption.getParams().add(keyEncryption);
		methodEncryption.getParams().add(dataEncryption);
		exprRetGetKey.getArguments().add(exprPwdName);
		exprRetPerformEncryption.getArguments().add(exprKeyName);
		statRetPerformEncryption.setExpr(exprRetPerformEncryption);
		exprRetPerformEncryption.getArguments().add(exprDataName);
		exprRetPerformEncryption.getArguments().add(exprNameModePadding);
		methodGetKey.getStatements().add(statRetGetKey);
		statRetGetKey.setExpr(exprRetGetKey);
		kda2Jcu.setSource(kda);
		kda2Jcu.setTarget(kdaJcu);
		exprIterationLiteral.setIndex(Integer.valueOf(exprIterationLiteral_index_prime));
		String exprIterationLiteral_value_prime = (String) _localVariable_0;
		String javaPackage_name_prime = (String) _localVariable_1;
		exprRetGetKey.setName(exprRetGetKey_name_prime);
		exprOutputSizeLiteral.setIndex(Integer.valueOf(exprOutputSizeLiteral_index_prime));
		String exprOutputSizeLiteral_value_prime = (String) _localVariable_2;
		kdaJcu.setName(kdaJcu_name_prime);
		methodPerformEncryption.setModifier(methodPerformEncryption_modifier_prime);
		methodPerformEncryption.setName(methodPerformEncryption_name_prime);
		methodPerformEncryption.setType(methodPerformEncryption_type_prime);
		String methodPerformEncryption_body_prime = (String) _localVariable_3;
		int methodPerformEncryption_index_prime = (int) _localVariable_4;
		String methodPerformEncryption_throws_prime = (String) _localVariable_5;
		String methodPerformEncryption_parameters_prime = (String) _localVariable_6;
		String sbcJcu_name_prime = (String) _localVariable_7;
		keyEncryption.setType(keyEncryption_type_prime);
		keyEncryption.setIndex(Integer.valueOf(keyEncryption_index_prime));
		keyEncryption.setName(keyEncryption_name_prime);
		dataEncryption.setIndex(Integer.valueOf(dataEncryption_index_prime));
		dataEncryption.setType(dataEncryption_type_prime);
		dataEncryption.setName(dataEncryption_name_prime);
		methodGetKey.setModifier(methodGetKey_modifier_prime);
		methodGetKey.setType(methodGetKey_type_prime);
		methodGetKey.setName(methodGetKey_name_prime);
		String methodGetKey_throws_prime = (String) _localVariable_8;
		int methodGetKey_index_prime = (int) _localVariable_9;
		exprAlgNameLiteral.setIndex(Integer.valueOf(exprAlgNameLiteral_index_prime));
		String exprAlgNameLiteral_value_prime = (String) _localVariable_10;
		pwdDeclaration.setName(pwdDeclaration_name_prime);
		pwdDeclaration.setIndex(Integer.valueOf(pwdDeclaration_index_prime));
		pwdDeclaration.setType(pwdDeclaration_type_prime);
		methodPerformGetKey.setName(methodPerformGetKey_name_prime);
		methodPerformGetKey.setType(methodPerformGetKey_type_prime);
		methodPerformGetKey.setModifier(methodPerformGetKey_modifier_prime);
		String methodPerformGetKey_body_prime = (String) _localVariable_11;
		int methodPerformGetKey_index_prime = (int) _localVariable_12;
		String methodPerformGetKey_throws_prime = (String) _localVariable_13;
		String methodPerformGetKey_parameters_prime = (String) _localVariable_14;
		statRetPerformEncryption.setReturn(Boolean.valueOf(statRetPerformEncryption_return_prime));
		exprKeyName.setIndex(Integer.valueOf(exprKeyName_index_prime));
		exprKeyName.setIdentifier(exprKeyName_identifier_prime);
		exprNameModePadding.setIndex(Integer.valueOf(exprNameModePadding_index_prime));
		String exprNameModePadding_value_prime = (String) _localVariable_15;
		methodEncryption.setType(methodEncryption_type_prime);
		methodEncryption.setModifier(methodEncryption_modifier_prime);
		methodEncryption.setName(methodEncryption_name_prime);
		int methodEncryption_index_prime = (int) _localVariable_16;
		String methodEncryption_throws_prime = (String) _localVariable_17;
		exprPwdName.setIdentifier(exprPwdName_identifier_prime);
		exprPwdName.setIndex(Integer.valueOf(exprPwdName_index_prime));
		exprDataName.setIndex(Integer.valueOf(exprDataName_index_prime));
		exprDataName.setIdentifier(exprDataName_identifier_prime);
		exprRetPerformEncryption.setName(exprRetPerformEncryption_name_prime);
		statRetGetKey.setReturn(Boolean.valueOf(statRetGetKey_return_prime));
		exprIterationLiteral.setValue(exprIterationLiteral_value_prime);
		javaPackage.setName(javaPackage_name_prime);
		exprOutputSizeLiteral.setValue(exprOutputSizeLiteral_value_prime);
		methodPerformEncryption.setBody(methodPerformEncryption_body_prime);
		methodPerformEncryption.setIndex(Integer.valueOf(methodPerformEncryption_index_prime));
		methodPerformEncryption.setThrows(methodPerformEncryption_throws_prime);
		methodPerformEncryption.setParameters(methodPerformEncryption_parameters_prime);
		sbcJcu.setName(sbcJcu_name_prime);
		methodGetKey.setThrows(methodGetKey_throws_prime);
		methodGetKey.setIndex(Integer.valueOf(methodGetKey_index_prime));
		exprAlgNameLiteral.setValue(exprAlgNameLiteral_value_prime);
		methodPerformGetKey.setBody(methodPerformGetKey_body_prime);
		methodPerformGetKey.setIndex(Integer.valueOf(methodPerformGetKey_index_prime));
		methodPerformGetKey.setThrows(methodPerformGetKey_throws_prime);
		methodPerformGetKey.setParameters(methodPerformGetKey_parameters_prime);
		exprNameModePadding.setValue(exprNameModePadding_value_prime);
		methodEncryption.setIndex(Integer.valueOf(methodEncryption_index_prime));
		methodEncryption.setThrows(methodEncryption_throws_prime);
		return new Object[] { exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
				methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c, exprAlgNameLiteral,
				pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
				methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption, statRetGetKey,
				kda2Jcu, csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_2_collecttranslatedelements_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, SymmetricBlockCipherToJcu sbc2Jcu, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, TaskToJavaPackage t2c,
			JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration, KeyDerivationAlgorithm kda,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, Task task, JavaName exprPwdName,
			SymmetricBlockCipher sbc, JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption,
			JavaStatement statRetGetKey, KeyDerivationAlgorithmToJcu kda2Jcu) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			return new Object[] { exprIterationLiteral,
																					javaPackage, exprRetGetKey,
																					exprOutputSizeLiteral, sbc2Jcu,
																					kdaJcu, methodPerformEncryption,
																					sbcJcu, keyEncryption,
																					dataEncryption, methodGetKey, t2c,
																					exprAlgNameLiteral, pwdDeclaration,
																					kda, methodPerformGetKey,
																					statRetPerformEncryption,
																					exprKeyName, exprNameModePadding,
																					methodEncryption, task, exprPwdName,
																					sbc, exprDataName,
																					exprRetPerformEncryption,
																					statRetGetKey, kda2Jcu };
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_2_collecttranslatedelements_greenFBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, SymmetricBlockCipherToJcu sbc2Jcu, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, TaskToJavaPackage t2c,
			JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration, KeyDerivationAlgorithm kda,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, Task task, JavaName exprPwdName,
			SymmetricBlockCipher sbc, JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption,
			JavaStatement statRetGetKey, KeyDerivationAlgorithmToJcu kda2Jcu) {
		PerformRuleResult ruleresult = RuntimeFactory.eINSTANCE.createPerformRuleResult();
		ruleresult.getCreatedElements().add(exprIterationLiteral);
		ruleresult.getCreatedElements().add(javaPackage);
		ruleresult.getCreatedElements().add(exprRetGetKey);
		ruleresult.getCreatedElements().add(exprOutputSizeLiteral);
		ruleresult.getCreatedLinkElements().add(sbc2Jcu);
		ruleresult.getCreatedElements().add(kdaJcu);
		ruleresult.getCreatedElements().add(methodPerformEncryption);
		ruleresult.getCreatedElements().add(sbcJcu);
		ruleresult.getCreatedElements().add(keyEncryption);
		ruleresult.getCreatedElements().add(dataEncryption);
		ruleresult.getCreatedElements().add(methodGetKey);
		ruleresult.getCreatedLinkElements().add(t2c);
		ruleresult.getCreatedElements().add(exprAlgNameLiteral);
		ruleresult.getCreatedElements().add(pwdDeclaration);
		ruleresult.getTranslatedElements().add(kda);
		ruleresult.getCreatedElements().add(methodPerformGetKey);
		ruleresult.getCreatedElements().add(statRetPerformEncryption);
		ruleresult.getCreatedElements().add(exprKeyName);
		ruleresult.getCreatedElements().add(exprNameModePadding);
		ruleresult.getCreatedElements().add(methodEncryption);
		ruleresult.getTranslatedElements().add(task);
		ruleresult.getCreatedElements().add(exprPwdName);
		ruleresult.getTranslatedElements().add(sbc);
		ruleresult.getCreatedElements().add(exprDataName);
		ruleresult.getCreatedElements().add(exprRetPerformEncryption);
		ruleresult.getCreatedElements().add(statRetGetKey);
		ruleresult.getCreatedLinkElements().add(kda2Jcu);
		return new Object[] { ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				sbc2Jcu, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
				exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption,
				statRetGetKey, kda2Jcu };
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_3_bookkeepingforedges_blackBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PerformRuleResult ruleresult, EObject exprIterationLiteral, EObject javaPackage, EObject exprRetGetKey,
			EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu, EObject methodPerformEncryption,
			EObject sbcJcu, EObject keyEncryption, EObject dataEncryption, EObject methodGetKey, EObject t2c,
			EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda, EObject methodPerformGetKey,
			EObject statRetPerformEncryption, EObject exprKeyName, EObject exprNameModePadding,
			EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc, EObject exprDataName,
			EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		if (!exprIterationLiteral.equals(javaPackage)) {
			if (!exprIterationLiteral.equals(exprRetGetKey)) {
				if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
					if (!exprIterationLiteral.equals(sbc2Jcu)) {
						if (!exprIterationLiteral.equals(kdaJcu)) {
							if (!exprIterationLiteral.equals(methodPerformEncryption)) {
								if (!exprIterationLiteral.equals(sbcJcu)) {
									if (!exprIterationLiteral.equals(keyEncryption)) {
										if (!exprIterationLiteral.equals(methodGetKey)) {
											if (!exprIterationLiteral.equals(t2c)) {
												if (!exprIterationLiteral.equals(pwdDeclaration)) {
													if (!exprIterationLiteral.equals(kda)) {
														if (!exprIterationLiteral.equals(methodPerformGetKey)) {
															if (!exprIterationLiteral
																	.equals(statRetPerformEncryption)) {
																if (!exprIterationLiteral.equals(exprKeyName)) {
																	if (!exprIterationLiteral
																			.equals(exprNameModePadding)) {
																		if (!exprIterationLiteral
																				.equals(methodEncryption)) {
																			if (!exprIterationLiteral.equals(task)) {
																				if (!exprIterationLiteral
																						.equals(exprPwdName)) {
																					if (!exprIterationLiteral
																							.equals(sbc)) {
																						if (!exprIterationLiteral
																								.equals(exprRetPerformEncryption)) {
																							if (!exprIterationLiteral
																									.equals(statRetGetKey)) {
																								if (!exprIterationLiteral
																										.equals(kda2Jcu)) {
																									if (!javaPackage
																											.equals(sbc2Jcu)) {
																										if (!javaPackage
																												.equals(kdaJcu)) {
																											if (!javaPackage
																													.equals(methodPerformEncryption)) {
																												if (!javaPackage
																														.equals(sbcJcu)) {
																													if (!javaPackage
																															.equals(keyEncryption)) {
																														if (!javaPackage
																																.equals(methodGetKey)) {
																															if (!javaPackage
																																	.equals(t2c)) {
																																if (!javaPackage
																																		.equals(pwdDeclaration)) {
																																	if (!javaPackage
																																			.equals(kda)) {
																																		if (!javaPackage
																																				.equals(methodPerformGetKey)) {
																																			if (!javaPackage
																																					.equals(statRetPerformEncryption)) {
																																				if (!javaPackage
																																						.equals(methodEncryption)) {
																																					if (!javaPackage
																																							.equals(task)) {
																																						if (!javaPackage
																																								.equals(sbc)) {
																																							if (!javaPackage
																																									.equals(statRetGetKey)) {
																																								if (!javaPackage
																																										.equals(kda2Jcu)) {
																																									if (!exprRetGetKey
																																											.equals(javaPackage)) {
																																										if (!exprRetGetKey
																																												.equals(sbc2Jcu)) {
																																											if (!exprRetGetKey
																																													.equals(kdaJcu)) {
																																												if (!exprRetGetKey
																																														.equals(methodPerformEncryption)) {
																																													if (!exprRetGetKey
																																															.equals(sbcJcu)) {
																																														if (!exprRetGetKey
																																																.equals(keyEncryption)) {
																																															if (!exprRetGetKey
																																																	.equals(methodGetKey)) {
																																																if (!exprRetGetKey
																																																		.equals(t2c)) {
																																																	if (!exprRetGetKey
																																																			.equals(pwdDeclaration)) {
																																																		if (!exprRetGetKey
																																																				.equals(kda)) {
																																																			if (!exprRetGetKey
																																																					.equals(methodPerformGetKey)) {
																																																				if (!exprRetGetKey
																																																						.equals(statRetPerformEncryption)) {
																																																					if (!exprRetGetKey
																																																							.equals(methodEncryption)) {
																																																						if (!exprRetGetKey
																																																								.equals(task)) {
																																																							if (!exprRetGetKey
																																																									.equals(sbc)) {
																																																								if (!exprRetGetKey
																																																										.equals(exprRetPerformEncryption)) {
																																																									if (!exprRetGetKey
																																																											.equals(statRetGetKey)) {
																																																										if (!exprRetGetKey
																																																												.equals(kda2Jcu)) {
																																																											if (!exprOutputSizeLiteral
																																																													.equals(javaPackage)) {
																																																												if (!exprOutputSizeLiteral
																																																														.equals(exprRetGetKey)) {
																																																													if (!exprOutputSizeLiteral
																																																															.equals(sbc2Jcu)) {
																																																														if (!exprOutputSizeLiteral
																																																																.equals(kdaJcu)) {
																																																															if (!exprOutputSizeLiteral
																																																																	.equals(methodPerformEncryption)) {
																																																																if (!exprOutputSizeLiteral
																																																																		.equals(sbcJcu)) {
																																																																	if (!exprOutputSizeLiteral
																																																																			.equals(keyEncryption)) {
																																																																		if (!exprOutputSizeLiteral
																																																																				.equals(methodGetKey)) {
																																																																			if (!exprOutputSizeLiteral
																																																																					.equals(t2c)) {
																																																																				if (!exprOutputSizeLiteral
																																																																						.equals(pwdDeclaration)) {
																																																																					if (!exprOutputSizeLiteral
																																																																							.equals(kda)) {
																																																																						if (!exprOutputSizeLiteral
																																																																								.equals(methodPerformGetKey)) {
																																																																							if (!exprOutputSizeLiteral
																																																																									.equals(statRetPerformEncryption)) {
																																																																								if (!exprOutputSizeLiteral
																																																																										.equals(methodEncryption)) {
																																																																									if (!exprOutputSizeLiteral
																																																																											.equals(task)) {
																																																																										if (!exprOutputSizeLiteral
																																																																												.equals(exprPwdName)) {
																																																																											if (!exprOutputSizeLiteral
																																																																													.equals(sbc)) {
																																																																												if (!exprOutputSizeLiteral
																																																																														.equals(exprRetPerformEncryption)) {
																																																																													if (!exprOutputSizeLiteral
																																																																															.equals(statRetGetKey)) {
																																																																														if (!exprOutputSizeLiteral
																																																																																.equals(kda2Jcu)) {
																																																																															if (!sbc2Jcu
																																																																																	.equals(sbcJcu)) {
																																																																																if (!sbc2Jcu
																																																																																		.equals(t2c)) {
																																																																																	if (!sbc2Jcu
																																																																																			.equals(statRetPerformEncryption)) {
																																																																																		if (!sbc2Jcu
																																																																																				.equals(task)) {
																																																																																			if (!sbc2Jcu
																																																																																					.equals(statRetGetKey)) {
																																																																																				if (!kdaJcu
																																																																																						.equals(sbc2Jcu)) {
																																																																																					if (!kdaJcu
																																																																																							.equals(methodPerformEncryption)) {
																																																																																						if (!kdaJcu
																																																																																								.equals(sbcJcu)) {
																																																																																							if (!kdaJcu
																																																																																									.equals(keyEncryption)) {
																																																																																								if (!kdaJcu
																																																																																										.equals(methodGetKey)) {
																																																																																									if (!kdaJcu
																																																																																											.equals(t2c)) {
																																																																																										if (!kdaJcu
																																																																																												.equals(pwdDeclaration)) {
																																																																																											if (!kdaJcu
																																																																																													.equals(methodPerformGetKey)) {
																																																																																												if (!kdaJcu
																																																																																														.equals(statRetPerformEncryption)) {
																																																																																													if (!kdaJcu
																																																																																															.equals(methodEncryption)) {
																																																																																														if (!kdaJcu
																																																																																																.equals(task)) {
																																																																																															if (!kdaJcu
																																																																																																	.equals(sbc)) {
																																																																																																if (!kdaJcu
																																																																																																		.equals(statRetGetKey)) {
																																																																																																	if (!methodPerformEncryption
																																																																																																			.equals(sbc2Jcu)) {
																																																																																																		if (!methodPerformEncryption
																																																																																																				.equals(sbcJcu)) {
																																																																																																			if (!methodPerformEncryption
																																																																																																					.equals(t2c)) {
																																																																																																				if (!methodPerformEncryption
																																																																																																						.equals(pwdDeclaration)) {
																																																																																																					if (!methodPerformEncryption
																																																																																																							.equals(methodPerformGetKey)) {
																																																																																																						if (!methodPerformEncryption
																																																																																																								.equals(statRetPerformEncryption)) {
																																																																																																							if (!methodPerformEncryption
																																																																																																									.equals(task)) {
																																																																																																								if (!methodPerformEncryption
																																																																																																										.equals(sbc)) {
																																																																																																									if (!methodPerformEncryption
																																																																																																											.equals(statRetGetKey)) {
																																																																																																										if (!sbcJcu
																																																																																																												.equals(t2c)) {
																																																																																																											if (!sbcJcu
																																																																																																													.equals(statRetPerformEncryption)) {
																																																																																																												if (!sbcJcu
																																																																																																														.equals(task)) {
																																																																																																													if (!sbcJcu
																																																																																																															.equals(statRetGetKey)) {
																																																																																																														if (!keyEncryption
																																																																																																																.equals(sbc2Jcu)) {
																																																																																																															if (!keyEncryption
																																																																																																																	.equals(methodPerformEncryption)) {
																																																																																																																if (!keyEncryption
																																																																																																																		.equals(sbcJcu)) {
																																																																																																																	if (!keyEncryption
																																																																																																																			.equals(methodGetKey)) {
																																																																																																																		if (!keyEncryption
																																																																																																																				.equals(t2c)) {
																																																																																																																			if (!keyEncryption
																																																																																																																					.equals(pwdDeclaration)) {
																																																																																																																				if (!keyEncryption
																																																																																																																						.equals(methodPerformGetKey)) {
																																																																																																																					if (!keyEncryption
																																																																																																																							.equals(statRetPerformEncryption)) {
																																																																																																																						if (!keyEncryption
																																																																																																																								.equals(methodEncryption)) {
																																																																																																																							if (!keyEncryption
																																																																																																																									.equals(task)) {
																																																																																																																								if (!keyEncryption
																																																																																																																										.equals(sbc)) {
																																																																																																																									if (!keyEncryption
																																																																																																																											.equals(statRetGetKey)) {
																																																																																																																										if (!dataEncryption
																																																																																																																												.equals(exprIterationLiteral)) {
																																																																																																																											if (!dataEncryption
																																																																																																																													.equals(javaPackage)) {
																																																																																																																												if (!dataEncryption
																																																																																																																														.equals(exprRetGetKey)) {
																																																																																																																													if (!dataEncryption
																																																																																																																															.equals(exprOutputSizeLiteral)) {
																																																																																																																														if (!dataEncryption
																																																																																																																																.equals(sbc2Jcu)) {
																																																																																																																															if (!dataEncryption
																																																																																																																																	.equals(kdaJcu)) {
																																																																																																																																if (!dataEncryption
																																																																																																																																		.equals(methodPerformEncryption)) {
																																																																																																																																	if (!dataEncryption
																																																																																																																																			.equals(sbcJcu)) {
																																																																																																																																		if (!dataEncryption
																																																																																																																																				.equals(keyEncryption)) {
																																																																																																																																			if (!dataEncryption
																																																																																																																																					.equals(methodGetKey)) {
																																																																																																																																				if (!dataEncryption
																																																																																																																																						.equals(t2c)) {
																																																																																																																																					if (!dataEncryption
																																																																																																																																							.equals(exprAlgNameLiteral)) {
																																																																																																																																						if (!dataEncryption
																																																																																																																																								.equals(pwdDeclaration)) {
																																																																																																																																							if (!dataEncryption
																																																																																																																																									.equals(kda)) {
																																																																																																																																								if (!dataEncryption
																																																																																																																																										.equals(methodPerformGetKey)) {
																																																																																																																																									if (!dataEncryption
																																																																																																																																											.equals(statRetPerformEncryption)) {
																																																																																																																																										if (!dataEncryption
																																																																																																																																												.equals(exprKeyName)) {
																																																																																																																																											if (!dataEncryption
																																																																																																																																													.equals(exprNameModePadding)) {
																																																																																																																																												if (!dataEncryption
																																																																																																																																														.equals(methodEncryption)) {
																																																																																																																																													if (!dataEncryption
																																																																																																																																															.equals(task)) {
																																																																																																																																														if (!dataEncryption
																																																																																																																																																.equals(exprPwdName)) {
																																																																																																																																															if (!dataEncryption
																																																																																																																																																	.equals(sbc)) {
																																																																																																																																																if (!dataEncryption
																																																																																																																																																		.equals(exprDataName)) {
																																																																																																																																																	if (!dataEncryption
																																																																																																																																																			.equals(exprRetPerformEncryption)) {
																																																																																																																																																		if (!dataEncryption
																																																																																																																																																				.equals(statRetGetKey)) {
																																																																																																																																																			if (!dataEncryption
																																																																																																																																																					.equals(kda2Jcu)) {
																																																																																																																																																				if (!methodGetKey
																																																																																																																																																						.equals(sbc2Jcu)) {
																																																																																																																																																					if (!methodGetKey
																																																																																																																																																							.equals(methodPerformEncryption)) {
																																																																																																																																																						if (!methodGetKey
																																																																																																																																																								.equals(sbcJcu)) {
																																																																																																																																																							if (!methodGetKey
																																																																																																																																																									.equals(t2c)) {
																																																																																																																																																								if (!methodGetKey
																																																																																																																																																										.equals(pwdDeclaration)) {
																																																																																																																																																									if (!methodGetKey
																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																										if (!methodGetKey
																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																											if (!methodGetKey
																																																																																																																																																													.equals(task)) {
																																																																																																																																																												if (!methodGetKey
																																																																																																																																																														.equals(sbc)) {
																																																																																																																																																													if (!methodGetKey
																																																																																																																																																															.equals(statRetGetKey)) {
																																																																																																																																																														if (!t2c.equals(
																																																																																																																																																																task)) {
																																																																																																																																																															if (!exprAlgNameLiteral
																																																																																																																																																																	.equals(exprIterationLiteral)) {
																																																																																																																																																																if (!exprAlgNameLiteral
																																																																																																																																																																		.equals(javaPackage)) {
																																																																																																																																																																	if (!exprAlgNameLiteral
																																																																																																																																																																			.equals(exprRetGetKey)) {
																																																																																																																																																																		if (!exprAlgNameLiteral
																																																																																																																																																																				.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																			if (!exprAlgNameLiteral
																																																																																																																																																																					.equals(sbc2Jcu)) {
																																																																																																																																																																				if (!exprAlgNameLiteral
																																																																																																																																																																						.equals(kdaJcu)) {
																																																																																																																																																																					if (!exprAlgNameLiteral
																																																																																																																																																																							.equals(methodPerformEncryption)) {
																																																																																																																																																																						if (!exprAlgNameLiteral
																																																																																																																																																																								.equals(sbcJcu)) {
																																																																																																																																																																							if (!exprAlgNameLiteral
																																																																																																																																																																									.equals(keyEncryption)) {
																																																																																																																																																																								if (!exprAlgNameLiteral
																																																																																																																																																																										.equals(methodGetKey)) {
																																																																																																																																																																									if (!exprAlgNameLiteral
																																																																																																																																																																											.equals(t2c)) {
																																																																																																																																																																										if (!exprAlgNameLiteral
																																																																																																																																																																												.equals(pwdDeclaration)) {
																																																																																																																																																																											if (!exprAlgNameLiteral
																																																																																																																																																																													.equals(kda)) {
																																																																																																																																																																												if (!exprAlgNameLiteral
																																																																																																																																																																														.equals(methodPerformGetKey)) {
																																																																																																																																																																													if (!exprAlgNameLiteral
																																																																																																																																																																															.equals(statRetPerformEncryption)) {
																																																																																																																																																																														if (!exprAlgNameLiteral
																																																																																																																																																																																.equals(exprKeyName)) {
																																																																																																																																																																															if (!exprAlgNameLiteral
																																																																																																																																																																																	.equals(exprNameModePadding)) {
																																																																																																																																																																																if (!exprAlgNameLiteral
																																																																																																																																																																																		.equals(methodEncryption)) {
																																																																																																																																																																																	if (!exprAlgNameLiteral
																																																																																																																																																																																			.equals(task)) {
																																																																																																																																																																																		if (!exprAlgNameLiteral
																																																																																																																																																																																				.equals(exprPwdName)) {
																																																																																																																																																																																			if (!exprAlgNameLiteral
																																																																																																																																																																																					.equals(sbc)) {
																																																																																																																																																																																				if (!exprAlgNameLiteral
																																																																																																																																																																																						.equals(exprDataName)) {
																																																																																																																																																																																					if (!exprAlgNameLiteral
																																																																																																																																																																																							.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																						if (!exprAlgNameLiteral
																																																																																																																																																																																								.equals(statRetGetKey)) {
																																																																																																																																																																																							if (!exprAlgNameLiteral
																																																																																																																																																																																									.equals(kda2Jcu)) {
																																																																																																																																																																																								if (!pwdDeclaration
																																																																																																																																																																																										.equals(sbc2Jcu)) {
																																																																																																																																																																																									if (!pwdDeclaration
																																																																																																																																																																																											.equals(sbcJcu)) {
																																																																																																																																																																																										if (!pwdDeclaration
																																																																																																																																																																																												.equals(t2c)) {
																																																																																																																																																																																											if (!pwdDeclaration
																																																																																																																																																																																													.equals(statRetPerformEncryption)) {
																																																																																																																																																																																												if (!pwdDeclaration
																																																																																																																																																																																														.equals(task)) {
																																																																																																																																																																																													if (!pwdDeclaration
																																																																																																																																																																																															.equals(sbc)) {
																																																																																																																																																																																														if (!pwdDeclaration
																																																																																																																																																																																																.equals(statRetGetKey)) {
																																																																																																																																																																																															if (!kda.equals(
																																																																																																																																																																																																	sbc2Jcu)) {
																																																																																																																																																																																																if (!kda.equals(
																																																																																																																																																																																																		kdaJcu)) {
																																																																																																																																																																																																	if (!kda.equals(
																																																																																																																																																																																																			methodPerformEncryption)) {
																																																																																																																																																																																																		if (!kda.equals(
																																																																																																																																																																																																				sbcJcu)) {
																																																																																																																																																																																																			if (!kda.equals(
																																																																																																																																																																																																					keyEncryption)) {
																																																																																																																																																																																																				if (!kda.equals(
																																																																																																																																																																																																						methodGetKey)) {
																																																																																																																																																																																																					if (!kda.equals(
																																																																																																																																																																																																							t2c)) {
																																																																																																																																																																																																						if (!kda.equals(
																																																																																																																																																																																																								pwdDeclaration)) {
																																																																																																																																																																																																							if (!kda.equals(
																																																																																																																																																																																																									methodPerformGetKey)) {
																																																																																																																																																																																																								if (!kda.equals(
																																																																																																																																																																																																										statRetPerformEncryption)) {
																																																																																																																																																																																																									if (!kda.equals(
																																																																																																																																																																																																											methodEncryption)) {
																																																																																																																																																																																																										if (!kda.equals(
																																																																																																																																																																																																												task)) {
																																																																																																																																																																																																											if (!kda.equals(
																																																																																																																																																																																																													sbc)) {
																																																																																																																																																																																																												if (!kda.equals(
																																																																																																																																																																																																														statRetGetKey)) {
																																																																																																																																																																																																													if (!kda.equals(
																																																																																																																																																																																																															kda2Jcu)) {
																																																																																																																																																																																																														if (!methodPerformGetKey
																																																																																																																																																																																																																.equals(sbc2Jcu)) {
																																																																																																																																																																																																															if (!methodPerformGetKey
																																																																																																																																																																																																																	.equals(sbcJcu)) {
																																																																																																																																																																																																																if (!methodPerformGetKey
																																																																																																																																																																																																																		.equals(t2c)) {
																																																																																																																																																																																																																	if (!methodPerformGetKey
																																																																																																																																																																																																																			.equals(pwdDeclaration)) {
																																																																																																																																																																																																																		if (!methodPerformGetKey
																																																																																																																																																																																																																				.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																			if (!methodPerformGetKey
																																																																																																																																																																																																																					.equals(task)) {
																																																																																																																																																																																																																				if (!methodPerformGetKey
																																																																																																																																																																																																																						.equals(sbc)) {
																																																																																																																																																																																																																					if (!methodPerformGetKey
																																																																																																																																																																																																																							.equals(statRetGetKey)) {
																																																																																																																																																																																																																						if (!statRetPerformEncryption
																																																																																																																																																																																																																								.equals(t2c)) {
																																																																																																																																																																																																																							if (!statRetPerformEncryption
																																																																																																																																																																																																																									.equals(task)) {
																																																																																																																																																																																																																								if (!exprKeyName
																																																																																																																																																																																																																										.equals(javaPackage)) {
																																																																																																																																																																																																																									if (!exprKeyName
																																																																																																																																																																																																																											.equals(exprRetGetKey)) {
																																																																																																																																																																																																																										if (!exprKeyName
																																																																																																																																																																																																																												.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																																																																											if (!exprKeyName
																																																																																																																																																																																																																													.equals(sbc2Jcu)) {
																																																																																																																																																																																																																												if (!exprKeyName
																																																																																																																																																																																																																														.equals(kdaJcu)) {
																																																																																																																																																																																																																													if (!exprKeyName
																																																																																																																																																																																																																															.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																														if (!exprKeyName
																																																																																																																																																																																																																																.equals(sbcJcu)) {
																																																																																																																																																																																																																															if (!exprKeyName
																																																																																																																																																																																																																																	.equals(keyEncryption)) {
																																																																																																																																																																																																																																if (!exprKeyName
																																																																																																																																																																																																																																		.equals(methodGetKey)) {
																																																																																																																																																																																																																																	if (!exprKeyName
																																																																																																																																																																																																																																			.equals(t2c)) {
																																																																																																																																																																																																																																		if (!exprKeyName
																																																																																																																																																																																																																																				.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																			if (!exprKeyName
																																																																																																																																																																																																																																					.equals(kda)) {
																																																																																																																																																																																																																																				if (!exprKeyName
																																																																																																																																																																																																																																						.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																					if (!exprKeyName
																																																																																																																																																																																																																																							.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																						if (!exprKeyName
																																																																																																																																																																																																																																								.equals(exprNameModePadding)) {
																																																																																																																																																																																																																																							if (!exprKeyName
																																																																																																																																																																																																																																									.equals(methodEncryption)) {
																																																																																																																																																																																																																																								if (!exprKeyName
																																																																																																																																																																																																																																										.equals(task)) {
																																																																																																																																																																																																																																									if (!exprKeyName
																																																																																																																																																																																																																																											.equals(exprPwdName)) {
																																																																																																																																																																																																																																										if (!exprKeyName
																																																																																																																																																																																																																																												.equals(sbc)) {
																																																																																																																																																																																																																																											if (!exprKeyName
																																																																																																																																																																																																																																													.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																												if (!exprKeyName
																																																																																																																																																																																																																																														.equals(statRetGetKey)) {
																																																																																																																																																																																																																																													if (!exprKeyName
																																																																																																																																																																																																																																															.equals(kda2Jcu)) {
																																																																																																																																																																																																																																														if (!exprNameModePadding
																																																																																																																																																																																																																																																.equals(javaPackage)) {
																																																																																																																																																																																																																																															if (!exprNameModePadding
																																																																																																																																																																																																																																																	.equals(exprRetGetKey)) {
																																																																																																																																																																																																																																																if (!exprNameModePadding
																																																																																																																																																																																																																																																		.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																																																																																																	if (!exprNameModePadding
																																																																																																																																																																																																																																																			.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																		if (!exprNameModePadding
																																																																																																																																																																																																																																																				.equals(kdaJcu)) {
																																																																																																																																																																																																																																																			if (!exprNameModePadding
																																																																																																																																																																																																																																																					.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																				if (!exprNameModePadding
																																																																																																																																																																																																																																																						.equals(sbcJcu)) {
																																																																																																																																																																																																																																																					if (!exprNameModePadding
																																																																																																																																																																																																																																																							.equals(keyEncryption)) {
																																																																																																																																																																																																																																																						if (!exprNameModePadding
																																																																																																																																																																																																																																																								.equals(methodGetKey)) {
																																																																																																																																																																																																																																																							if (!exprNameModePadding
																																																																																																																																																																																																																																																									.equals(t2c)) {
																																																																																																																																																																																																																																																								if (!exprNameModePadding
																																																																																																																																																																																																																																																										.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																									if (!exprNameModePadding
																																																																																																																																																																																																																																																											.equals(kda)) {
																																																																																																																																																																																																																																																										if (!exprNameModePadding
																																																																																																																																																																																																																																																												.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																											if (!exprNameModePadding
																																																																																																																																																																																																																																																													.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																												if (!exprNameModePadding
																																																																																																																																																																																																																																																														.equals(methodEncryption)) {
																																																																																																																																																																																																																																																													if (!exprNameModePadding
																																																																																																																																																																																																																																																															.equals(task)) {
																																																																																																																																																																																																																																																														if (!exprNameModePadding
																																																																																																																																																																																																																																																																.equals(exprPwdName)) {
																																																																																																																																																																																																																																																															if (!exprNameModePadding
																																																																																																																																																																																																																																																																	.equals(sbc)) {
																																																																																																																																																																																																																																																																if (!exprNameModePadding
																																																																																																																																																																																																																																																																		.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																																																	if (!exprNameModePadding
																																																																																																																																																																																																																																																																			.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																		if (!exprNameModePadding
																																																																																																																																																																																																																																																																				.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																			if (!methodEncryption
																																																																																																																																																																																																																																																																					.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																				if (!methodEncryption
																																																																																																																																																																																																																																																																						.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																					if (!methodEncryption
																																																																																																																																																																																																																																																																							.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																						if (!methodEncryption
																																																																																																																																																																																																																																																																								.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																							if (!methodEncryption
																																																																																																																																																																																																																																																																									.equals(t2c)) {
																																																																																																																																																																																																																																																																								if (!methodEncryption
																																																																																																																																																																																																																																																																										.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																									if (!methodEncryption
																																																																																																																																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																										if (!methodEncryption
																																																																																																																																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																											if (!methodEncryption
																																																																																																																																																																																																																																																																													.equals(task)) {
																																																																																																																																																																																																																																																																												if (!methodEncryption
																																																																																																																																																																																																																																																																														.equals(sbc)) {
																																																																																																																																																																																																																																																																													if (!methodEncryption
																																																																																																																																																																																																																																																																															.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																														if (!exprPwdName
																																																																																																																																																																																																																																																																																.equals(javaPackage)) {
																																																																																																																																																																																																																																																																															if (!exprPwdName
																																																																																																																																																																																																																																																																																	.equals(exprRetGetKey)) {
																																																																																																																																																																																																																																																																																if (!exprPwdName
																																																																																																																																																																																																																																																																																		.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																	if (!exprPwdName
																																																																																																																																																																																																																																																																																			.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																		if (!exprPwdName
																																																																																																																																																																																																																																																																																				.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																			if (!exprPwdName
																																																																																																																																																																																																																																																																																					.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																				if (!exprPwdName
																																																																																																																																																																																																																																																																																						.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																					if (!exprPwdName
																																																																																																																																																																																																																																																																																							.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																						if (!exprPwdName
																																																																																																																																																																																																																																																																																								.equals(t2c)) {
																																																																																																																																																																																																																																																																																							if (!exprPwdName
																																																																																																																																																																																																																																																																																									.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																								if (!exprPwdName
																																																																																																																																																																																																																																																																																										.equals(kda)) {
																																																																																																																																																																																																																																																																																									if (!exprPwdName
																																																																																																																																																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																										if (!exprPwdName
																																																																																																																																																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																											if (!exprPwdName
																																																																																																																																																																																																																																																																																													.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																												if (!exprPwdName
																																																																																																																																																																																																																																																																																														.equals(task)) {
																																																																																																																																																																																																																																																																																													if (!exprPwdName
																																																																																																																																																																																																																																																																																															.equals(sbc)) {
																																																																																																																																																																																																																																																																																														if (!exprPwdName
																																																																																																																																																																																																																																																																																																.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																															if (!exprPwdName
																																																																																																																																																																																																																																																																																																	.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																if (!exprPwdName
																																																																																																																																																																																																																																																																																																		.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																																																	if (!sbc.equals(
																																																																																																																																																																																																																																																																																																			sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																		if (!sbc.equals(
																																																																																																																																																																																																																																																																																																				sbcJcu)) {
																																																																																																																																																																																																																																																																																																			if (!sbc.equals(
																																																																																																																																																																																																																																																																																																					t2c)) {
																																																																																																																																																																																																																																																																																																				if (!sbc.equals(
																																																																																																																																																																																																																																																																																																						statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																					if (!sbc.equals(
																																																																																																																																																																																																																																																																																																							task)) {
																																																																																																																																																																																																																																																																																																						if (!sbc.equals(
																																																																																																																																																																																																																																																																																																								statRetGetKey)) {
																																																																																																																																																																																																																																																																																																							if (!exprDataName
																																																																																																																																																																																																																																																																																																									.equals(exprIterationLiteral)) {
																																																																																																																																																																																																																																																																																																								if (!exprDataName
																																																																																																																																																																																																																																																																																																										.equals(javaPackage)) {
																																																																																																																																																																																																																																																																																																									if (!exprDataName
																																																																																																																																																																																																																																																																																																											.equals(exprRetGetKey)) {
																																																																																																																																																																																																																																																																																																										if (!exprDataName
																																																																																																																																																																																																																																																																																																												.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																																																																																																																																																											if (!exprDataName
																																																																																																																																																																																																																																																																																																													.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																												if (!exprDataName
																																																																																																																																																																																																																																																																																																														.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																																													if (!exprDataName
																																																																																																																																																																																																																																																																																																															.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																																														if (!exprDataName
																																																																																																																																																																																																																																																																																																																.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																																															if (!exprDataName
																																																																																																																																																																																																																																																																																																																	.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																																																if (!exprDataName
																																																																																																																																																																																																																																																																																																																		.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																																																	if (!exprDataName
																																																																																																																																																																																																																																																																																																																			.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																		if (!exprDataName
																																																																																																																																																																																																																																																																																																																				.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																																																			if (!exprDataName
																																																																																																																																																																																																																																																																																																																					.equals(kda)) {
																																																																																																																																																																																																																																																																																																																				if (!exprDataName
																																																																																																																																																																																																																																																																																																																						.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																																																					if (!exprDataName
																																																																																																																																																																																																																																																																																																																							.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																						if (!exprDataName
																																																																																																																																																																																																																																																																																																																								.equals(exprKeyName)) {
																																																																																																																																																																																																																																																																																																																							if (!exprDataName
																																																																																																																																																																																																																																																																																																																									.equals(exprNameModePadding)) {
																																																																																																																																																																																																																																																																																																																								if (!exprDataName
																																																																																																																																																																																																																																																																																																																										.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																																																									if (!exprDataName
																																																																																																																																																																																																																																																																																																																											.equals(task)) {
																																																																																																																																																																																																																																																																																																																										if (!exprDataName
																																																																																																																																																																																																																																																																																																																												.equals(exprPwdName)) {
																																																																																																																																																																																																																																																																																																																											if (!exprDataName
																																																																																																																																																																																																																																																																																																																													.equals(sbc)) {
																																																																																																																																																																																																																																																																																																																												if (!exprDataName
																																																																																																																																																																																																																																																																																																																														.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																													if (!exprDataName
																																																																																																																																																																																																																																																																																																																															.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																																														if (!exprDataName
																																																																																																																																																																																																																																																																																																																																.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																																																																															if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																	.equals(javaPackage)) {
																																																																																																																																																																																																																																																																																																																																if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																		.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																																																	if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																			.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																																																																		if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																				.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																			if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																					.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																																																																				if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																						.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																																																																					if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																							.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																																																																						if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																								.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																																							if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																									.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																																																																								if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																										.equals(kda)) {
																																																																																																																																																																																																																																																																																																																																									if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																																																																										if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																											if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																													.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																																																																												if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																														.equals(task)) {
																																																																																																																																																																																																																																																																																																																																													if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																															.equals(sbc)) {
																																																																																																																																																																																																																																																																																																																																														if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																																.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																																																															if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																																	.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																																																																																																if (!statRetGetKey
																																																																																																																																																																																																																																																																																																																																																		.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																																																	if (!statRetGetKey
																																																																																																																																																																																																																																																																																																																																																			.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																																		if (!statRetGetKey
																																																																																																																																																																																																																																																																																																																																																				.equals(task)) {
																																																																																																																																																																																																																																																																																																																																																			if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																					.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																																																																				if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																						.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																																																																																					if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																							.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																																						if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																								.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																																																																																							if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																									.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																																																																																								if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																										.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																																																																																									if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																											.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																																																										if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																												.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																																																																																											if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																													.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																																																																																												if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																														.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																																													if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																															.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																																																																																														if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																																.equals(task)) {
																																																																																																																																																																																																																																																																																																																																																															if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																																	.equals(sbc)) {
																																																																																																																																																																																																																																																																																																																																																																if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																																		.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																																																																																	return new Object[] {
																																																																																																																																																																																																																																																																																																																																																																			ruleresult,
																																																																																																																																																																																																																																																																																																																																																																			exprIterationLiteral,
																																																																																																																																																																																																																																																																																																																																																																			javaPackage,
																																																																																																																																																																																																																																																																																																																																																																			exprRetGetKey,
																																																																																																																																																																																																																																																																																																																																																																			exprOutputSizeLiteral,
																																																																																																																																																																																																																																																																																																																																																																			sbc2Jcu,
																																																																																																																																																																																																																																																																																																																																																																			kdaJcu,
																																																																																																																																																																																																																																																																																																																																																																			methodPerformEncryption,
																																																																																																																																																																																																																																																																																																																																																																			sbcJcu,
																																																																																																																																																																																																																																																																																																																																																																			keyEncryption,
																																																																																																																																																																																																																																																																																																																																																																			dataEncryption,
																																																																																																																																																																																																																																																																																																																																																																			methodGetKey,
																																																																																																																																																																																																																																																																																																																																																																			t2c,
																																																																																																																																																																																																																																																																																																																																																																			exprAlgNameLiteral,
																																																																																																																																																																																																																																																																																																																																																																			pwdDeclaration,
																																																																																																																																																																																																																																																																																																																																																																			kda,
																																																																																																																																																																																																																																																																																																																																																																			methodPerformGetKey,
																																																																																																																																																																																																																																																																																																																																																																			statRetPerformEncryption,
																																																																																																																																																																																																																																																																																																																																																																			exprKeyName,
																																																																																																																																																																																																																																																																																																																																																																			exprNameModePadding,
																																																																																																																																																																																																																																																																																																																																																																			methodEncryption,
																																																																																																																																																																																																																																																																																																																																																																			task,
																																																																																																																																																																																																																																																																																																																																																																			exprPwdName,
																																																																																																																																																																																																																																																																																																																																																																			sbc,
																																																																																																																																																																																																																																																																																																																																																																			exprDataName,
																																																																																																																																																																																																																																																																																																																																																																			exprRetPerformEncryption,
																																																																																																																																																																																																																																																																																																																																																																			statRetGetKey,
																																																																																																																																																																																																																																																																																																																																																																			kda2Jcu };
																																																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																}
																																																																																																																																																																																																																															}
																																																																																																																																																																																																																														}
																																																																																																																																																																																																																													}
																																																																																																																																																																																																																												}
																																																																																																																																																																																																																											}
																																																																																																																																																																																																																										}
																																																																																																																																																																																																																									}
																																																																																																																																																																																																																								}
																																																																																																																																																																																																																							}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_1_3_bookkeepingforedges_greenBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
			PerformRuleResult ruleresult, EObject exprIterationLiteral, EObject javaPackage, EObject exprRetGetKey,
			EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu, EObject methodPerformEncryption,
			EObject sbcJcu, EObject keyEncryption, EObject dataEncryption, EObject methodGetKey, EObject t2c,
			EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda, EObject methodPerformGetKey,
			EObject statRetPerformEncryption, EObject exprKeyName, EObject exprNameModePadding,
			EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc, EObject exprDataName,
			EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__statRetGetKey____statements = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprPwdName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge statRetGetKey__exprRetGetKey____expr = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge t2c__task____source = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge task__kda____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kda2Jcu__kda____source = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__statRetPerformEncryption____statements = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sbc2Jcu__sbcJcu____target = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__keyEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__pwdDeclaration____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__sbcJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__kdaJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge task__sbc____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kda2Jcu__kdaJcu____target = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__dataEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge t2c__javaPackage____target = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodPerformGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sbc2Jcu__sbc____source = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodPerformEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		String ruleresult_ruleName_prime = "PasswordBasedEncryption";
		String exprRetPerformEncryption__exprKeyName____arguments_name_prime = "arguments";
		String methodGetKey__statRetGetKey____statements_name_prime = "statements";
		String exprRetGetKey__exprPwdName____arguments_name_prime = "arguments";
		String statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime = "expr";
		String statRetGetKey__exprRetGetKey____expr_name_prime = "expr";
		String kdaJcu__methodGetKey____methods_name_prime = "methods";
		String sbcJcu__methodEncryption____methods_name_prime = "methods";
		String t2c__task____source_name_prime = "source";
		String exprRetPerformEncryption__exprDataName____arguments_name_prime = "arguments";
		String task__kda____algorithms_name_prime = "algorithms";
		String kda2Jcu__kda____source_name_prime = "source";
		String methodEncryption__statRetPerformEncryption____statements_name_prime = "statements";
		String sbc2Jcu__sbcJcu____target_name_prime = "target";
		String methodEncryption__keyEncryption____params_name_prime = "params";
		String methodGetKey__pwdDeclaration____params_name_prime = "params";
		String javaPackage__sbcJcu____cunits_name_prime = "cunits";
		String javaPackage__kdaJcu____cunits_name_prime = "cunits";
		String task__sbc____algorithms_name_prime = "algorithms";
		String kda2Jcu__kdaJcu____target_name_prime = "target";
		String methodEncryption__dataEncryption____params_name_prime = "params";
		String t2c__javaPackage____target_name_prime = "target";
		String exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime = "arguments";
		String kdaJcu__methodPerformGetKey____methods_name_prime = "methods";
		String exprRetPerformEncryption__exprNameModePadding____arguments_name_prime = "arguments";
		String sbc2Jcu__sbc____source_name_prime = "source";
		String sbcJcu__methodPerformEncryption____methods_name_prime = "methods";
		String exprRetGetKey__exprAlgNameLiteral____arguments_name_prime = "arguments";
		String exprRetGetKey__exprIterationLiteral____arguments_name_prime = "arguments";
		exprRetPerformEncryption__exprKeyName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprKeyName____arguments.setTrg(exprKeyName);
		ruleresult.getCreatedEdges().add(exprRetPerformEncryption__exprKeyName____arguments);
		methodGetKey__statRetGetKey____statements.setSrc(methodGetKey);
		methodGetKey__statRetGetKey____statements.setTrg(statRetGetKey);
		ruleresult.getCreatedEdges().add(methodGetKey__statRetGetKey____statements);
		exprRetGetKey__exprPwdName____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprPwdName____arguments.setTrg(exprPwdName);
		ruleresult.getCreatedEdges().add(exprRetGetKey__exprPwdName____arguments);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setSrc(statRetPerformEncryption);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setTrg(exprRetPerformEncryption);
		ruleresult.getCreatedEdges().add(statRetPerformEncryption__exprRetPerformEncryption____expr);
		statRetGetKey__exprRetGetKey____expr.setSrc(statRetGetKey);
		statRetGetKey__exprRetGetKey____expr.setTrg(exprRetGetKey);
		ruleresult.getCreatedEdges().add(statRetGetKey__exprRetGetKey____expr);
		kdaJcu__methodGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodGetKey____methods.setTrg(methodGetKey);
		ruleresult.getCreatedEdges().add(kdaJcu__methodGetKey____methods);
		sbcJcu__methodEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodEncryption____methods.setTrg(methodEncryption);
		ruleresult.getCreatedEdges().add(sbcJcu__methodEncryption____methods);
		t2c__task____source.setSrc(t2c);
		t2c__task____source.setTrg(task);
		ruleresult.getCreatedEdges().add(t2c__task____source);
		exprRetPerformEncryption__exprDataName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprDataName____arguments.setTrg(exprDataName);
		ruleresult.getCreatedEdges().add(exprRetPerformEncryption__exprDataName____arguments);
		task__kda____algorithms.setSrc(task);
		task__kda____algorithms.setTrg(kda);
		ruleresult.getTranslatedEdges().add(task__kda____algorithms);
		kda2Jcu__kda____source.setSrc(kda2Jcu);
		kda2Jcu__kda____source.setTrg(kda);
		ruleresult.getCreatedEdges().add(kda2Jcu__kda____source);
		methodEncryption__statRetPerformEncryption____statements.setSrc(methodEncryption);
		methodEncryption__statRetPerformEncryption____statements.setTrg(statRetPerformEncryption);
		ruleresult.getCreatedEdges().add(methodEncryption__statRetPerformEncryption____statements);
		sbc2Jcu__sbcJcu____target.setSrc(sbc2Jcu);
		sbc2Jcu__sbcJcu____target.setTrg(sbcJcu);
		ruleresult.getCreatedEdges().add(sbc2Jcu__sbcJcu____target);
		methodEncryption__keyEncryption____params.setSrc(methodEncryption);
		methodEncryption__keyEncryption____params.setTrg(keyEncryption);
		ruleresult.getCreatedEdges().add(methodEncryption__keyEncryption____params);
		methodGetKey__pwdDeclaration____params.setSrc(methodGetKey);
		methodGetKey__pwdDeclaration____params.setTrg(pwdDeclaration);
		ruleresult.getCreatedEdges().add(methodGetKey__pwdDeclaration____params);
		javaPackage__sbcJcu____cunits.setSrc(javaPackage);
		javaPackage__sbcJcu____cunits.setTrg(sbcJcu);
		ruleresult.getCreatedEdges().add(javaPackage__sbcJcu____cunits);
		javaPackage__kdaJcu____cunits.setSrc(javaPackage);
		javaPackage__kdaJcu____cunits.setTrg(kdaJcu);
		ruleresult.getCreatedEdges().add(javaPackage__kdaJcu____cunits);
		task__sbc____algorithms.setSrc(task);
		task__sbc____algorithms.setTrg(sbc);
		ruleresult.getTranslatedEdges().add(task__sbc____algorithms);
		kda2Jcu__kdaJcu____target.setSrc(kda2Jcu);
		kda2Jcu__kdaJcu____target.setTrg(kdaJcu);
		ruleresult.getCreatedEdges().add(kda2Jcu__kdaJcu____target);
		methodEncryption__dataEncryption____params.setSrc(methodEncryption);
		methodEncryption__dataEncryption____params.setTrg(dataEncryption);
		ruleresult.getCreatedEdges().add(methodEncryption__dataEncryption____params);
		t2c__javaPackage____target.setSrc(t2c);
		t2c__javaPackage____target.setTrg(javaPackage);
		ruleresult.getCreatedEdges().add(t2c__javaPackage____target);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setTrg(exprOutputSizeLiteral);
		ruleresult.getCreatedEdges().add(exprRetGetKey__exprOutputSizeLiteral____arguments);
		kdaJcu__methodPerformGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodPerformGetKey____methods.setTrg(methodPerformGetKey);
		ruleresult.getCreatedEdges().add(kdaJcu__methodPerformGetKey____methods);
		exprRetPerformEncryption__exprNameModePadding____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprNameModePadding____arguments.setTrg(exprNameModePadding);
		ruleresult.getCreatedEdges().add(exprRetPerformEncryption__exprNameModePadding____arguments);
		sbc2Jcu__sbc____source.setSrc(sbc2Jcu);
		sbc2Jcu__sbc____source.setTrg(sbc);
		ruleresult.getCreatedEdges().add(sbc2Jcu__sbc____source);
		sbcJcu__methodPerformEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodPerformEncryption____methods.setTrg(methodPerformEncryption);
		ruleresult.getCreatedEdges().add(sbcJcu__methodPerformEncryption____methods);
		exprRetGetKey__exprAlgNameLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprAlgNameLiteral____arguments.setTrg(exprAlgNameLiteral);
		ruleresult.getCreatedEdges().add(exprRetGetKey__exprAlgNameLiteral____arguments);
		exprRetGetKey__exprIterationLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprIterationLiteral____arguments.setTrg(exprIterationLiteral);
		ruleresult.getCreatedEdges().add(exprRetGetKey__exprIterationLiteral____arguments);
		ruleresult.setRuleName(ruleresult_ruleName_prime);
		exprRetPerformEncryption__exprKeyName____arguments
				.setName(exprRetPerformEncryption__exprKeyName____arguments_name_prime);
		methodGetKey__statRetGetKey____statements.setName(methodGetKey__statRetGetKey____statements_name_prime);
		exprRetGetKey__exprPwdName____arguments.setName(exprRetGetKey__exprPwdName____arguments_name_prime);
		statRetPerformEncryption__exprRetPerformEncryption____expr
				.setName(statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime);
		statRetGetKey__exprRetGetKey____expr.setName(statRetGetKey__exprRetGetKey____expr_name_prime);
		kdaJcu__methodGetKey____methods.setName(kdaJcu__methodGetKey____methods_name_prime);
		sbcJcu__methodEncryption____methods.setName(sbcJcu__methodEncryption____methods_name_prime);
		t2c__task____source.setName(t2c__task____source_name_prime);
		exprRetPerformEncryption__exprDataName____arguments
				.setName(exprRetPerformEncryption__exprDataName____arguments_name_prime);
		task__kda____algorithms.setName(task__kda____algorithms_name_prime);
		kda2Jcu__kda____source.setName(kda2Jcu__kda____source_name_prime);
		methodEncryption__statRetPerformEncryption____statements
				.setName(methodEncryption__statRetPerformEncryption____statements_name_prime);
		sbc2Jcu__sbcJcu____target.setName(sbc2Jcu__sbcJcu____target_name_prime);
		methodEncryption__keyEncryption____params.setName(methodEncryption__keyEncryption____params_name_prime);
		methodGetKey__pwdDeclaration____params.setName(methodGetKey__pwdDeclaration____params_name_prime);
		javaPackage__sbcJcu____cunits.setName(javaPackage__sbcJcu____cunits_name_prime);
		javaPackage__kdaJcu____cunits.setName(javaPackage__kdaJcu____cunits_name_prime);
		task__sbc____algorithms.setName(task__sbc____algorithms_name_prime);
		kda2Jcu__kdaJcu____target.setName(kda2Jcu__kdaJcu____target_name_prime);
		methodEncryption__dataEncryption____params.setName(methodEncryption__dataEncryption____params_name_prime);
		t2c__javaPackage____target.setName(t2c__javaPackage____target_name_prime);
		exprRetGetKey__exprOutputSizeLiteral____arguments
				.setName(exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime);
		kdaJcu__methodPerformGetKey____methods.setName(kdaJcu__methodPerformGetKey____methods_name_prime);
		exprRetPerformEncryption__exprNameModePadding____arguments
				.setName(exprRetPerformEncryption__exprNameModePadding____arguments_name_prime);
		sbc2Jcu__sbc____source.setName(sbc2Jcu__sbc____source_name_prime);
		sbcJcu__methodPerformEncryption____methods.setName(sbcJcu__methodPerformEncryption____methods_name_prime);
		exprRetGetKey__exprAlgNameLiteral____arguments
				.setName(exprRetGetKey__exprAlgNameLiteral____arguments_name_prime);
		exprRetGetKey__exprIterationLiteral____arguments
				.setName(exprRetGetKey__exprIterationLiteral____arguments_name_prime);
		return new Object[] { ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				sbc2Jcu, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
				exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption,
				statRetGetKey, kda2Jcu, exprRetPerformEncryption__exprKeyName____arguments,
				methodGetKey__statRetGetKey____statements, exprRetGetKey__exprPwdName____arguments,
				statRetPerformEncryption__exprRetPerformEncryption____expr, statRetGetKey__exprRetGetKey____expr,
				kdaJcu__methodGetKey____methods, sbcJcu__methodEncryption____methods, t2c__task____source,
				exprRetPerformEncryption__exprDataName____arguments, task__kda____algorithms, kda2Jcu__kda____source,
				methodEncryption__statRetPerformEncryption____statements, sbc2Jcu__sbcJcu____target,
				methodEncryption__keyEncryption____params, methodGetKey__pwdDeclaration____params,
				javaPackage__sbcJcu____cunits, javaPackage__kdaJcu____cunits, task__sbc____algorithms,
				kda2Jcu__kdaJcu____target, methodEncryption__dataEncryption____params, t2c__javaPackage____target,
				exprRetGetKey__exprOutputSizeLiteral____arguments, kdaJcu__methodPerformGetKey____methods,
				exprRetPerformEncryption__exprNameModePadding____arguments, sbc2Jcu__sbc____source,
				sbcJcu__methodPerformEncryption____methods, exprRetGetKey__exprAlgNameLiteral____arguments,
				exprRetGetKey__exprIterationLiteral____arguments };
	}

	public static final void pattern_PasswordBasedEncryption_1_5_registerobjects_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, PerformRuleResult ruleresult, EObject exprIterationLiteral,
			EObject javaPackage, EObject exprRetGetKey, EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu,
			EObject methodPerformEncryption, EObject sbcJcu, EObject keyEncryption, EObject dataEncryption,
			EObject methodGetKey, EObject t2c, EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda,
			EObject methodPerformGetKey, EObject statRetPerformEncryption, EObject exprKeyName,
			EObject exprNameModePadding, EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc,
			EObject exprDataName, EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		_this.registerObjects_FWD(ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				sbc2Jcu, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
				exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption,
				statRetGetKey, kda2Jcu);

	}

	public static final PerformRuleResult pattern_PasswordBasedEncryption_1_6_expressionFB(
			PerformRuleResult ruleresult) {
		PerformRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_1_preparereturnvalue_bindingFB(
			PasswordBasedEncryption _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass eClass = _localVariable_0;
		if (eClass != null) {
			return new Object[] { eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_1_preparereturnvalue_blackFBB(EClass eClass,
			PasswordBasedEncryption _this) {
		for (EOperation performOperation : eClass.getEOperations()) {
			String performOperation_name = performOperation.getName();
			if (performOperation_name.equals("perform_FWD")) {
				return new Object[] { performOperation, eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_1_preparereturnvalue_bindingAndBlackFFB(
			PasswordBasedEncryption _this) {
		Object[] result_pattern_PasswordBasedEncryption_2_1_preparereturnvalue_binding = pattern_PasswordBasedEncryption_2_1_preparereturnvalue_bindingFB(
				_this);
		if (result_pattern_PasswordBasedEncryption_2_1_preparereturnvalue_binding != null) {
			EClass eClass = (EClass) result_pattern_PasswordBasedEncryption_2_1_preparereturnvalue_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_2_1_preparereturnvalue_black = pattern_PasswordBasedEncryption_2_1_preparereturnvalue_blackFBB(
					eClass, _this);
			if (result_pattern_PasswordBasedEncryption_2_1_preparereturnvalue_black != null) {
				EOperation performOperation = (EOperation) result_pattern_PasswordBasedEncryption_2_1_preparereturnvalue_black[0];

				return new Object[] { performOperation, eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_1_preparereturnvalue_greenBF(
			EOperation performOperation) {
		IsApplicableRuleResult ruleresult = RuntimeFactory.eINSTANCE.createIsApplicableRuleResult();
		boolean ruleresult_success_prime = Boolean.valueOf(false);
		String ruleresult_rule_prime = "PasswordBasedEncryption";
		ruleresult.setPerformOperation(performOperation);
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		ruleresult.setRule(ruleresult_rule_prime);
		return new Object[] { performOperation, ruleresult };
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_2_corematch_bindingFFFB(Match match) {
		EObject _localVariable_0 = match.getObject("kda");
		EObject _localVariable_1 = match.getObject("task");
		EObject _localVariable_2 = match.getObject("sbc");
		EObject tmpKda = _localVariable_0;
		EObject tmpTask = _localVariable_1;
		EObject tmpSbc = _localVariable_2;
		if (tmpKda instanceof KeyDerivationAlgorithm) {
			KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) tmpKda;
			if (tmpTask instanceof Task) {
				Task task = (Task) tmpTask;
				if (tmpSbc instanceof SymmetricBlockCipher) {
					SymmetricBlockCipher sbc = (SymmetricBlockCipher) tmpSbc;
					return new Object[] { kda, task, sbc, match };
				}
			}
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_PasswordBasedEncryption_2_2_corematch_blackBBBB(
			KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc, Match match) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		String task_description = task.getDescription();
		if (task_description.equals("PasswordBasedEncryption")) {
			_result.add(new Object[] { kda, task, sbc, match });
		}

		return _result;
	}

	public static final Iterable<Object[]> pattern_PasswordBasedEncryption_2_3_findcontext_blackBBB(
			KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (task.getAlgorithms().contains(kda)) {
			if (task.getAlgorithms().contains(sbc)) {
				String task_description = task.getDescription();
				if (task_description.equals("PasswordBasedEncryption")) {
					_result.add(new Object[] { kda, task, sbc });
				}

			}
		}
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_3_findcontext_greenBBBFFF(KeyDerivationAlgorithm kda,
			Task task, SymmetricBlockCipher sbc) {
		IsApplicableMatch isApplicableMatch = RuntimeFactory.eINSTANCE.createIsApplicableMatch();
		EMoflonEdge task__kda____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge task__sbc____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		String task__kda____algorithms_name_prime = "algorithms";
		String task__sbc____algorithms_name_prime = "algorithms";
		isApplicableMatch.getAllContextElements().add(kda);
		isApplicableMatch.getAllContextElements().add(task);
		isApplicableMatch.getAllContextElements().add(sbc);
		task__kda____algorithms.setSrc(task);
		task__kda____algorithms.setTrg(kda);
		isApplicableMatch.getAllContextElements().add(task__kda____algorithms);
		task__sbc____algorithms.setSrc(task);
		task__sbc____algorithms.setTrg(sbc);
		isApplicableMatch.getAllContextElements().add(task__sbc____algorithms);
		task__kda____algorithms.setName(task__kda____algorithms_name_prime);
		task__sbc____algorithms.setName(task__sbc____algorithms_name_prime);
		return new Object[] { kda, task, sbc, isApplicableMatch, task__kda____algorithms, task__sbc____algorithms };
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_4_solveCSP_bindingFBBBBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		CSP _localVariable_0 = _this.isApplicable_solveCsp_FWD(isApplicableMatch, kda, task, sbc);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, isApplicableMatch, kda, task, sbc };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_4_solveCSP_blackB(CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_4_solveCSP_bindingAndBlackFBBBBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		Object[] result_pattern_PasswordBasedEncryption_2_4_solveCSP_binding = pattern_PasswordBasedEncryption_2_4_solveCSP_bindingFBBBBB(
				_this, isApplicableMatch, kda, task, sbc);
		if (result_pattern_PasswordBasedEncryption_2_4_solveCSP_binding != null) {
			CSP csp = (CSP) result_pattern_PasswordBasedEncryption_2_4_solveCSP_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_2_4_solveCSP_black = pattern_PasswordBasedEncryption_2_4_solveCSP_blackB(
					csp);
			if (result_pattern_PasswordBasedEncryption_2_4_solveCSP_black != null) {

				return new Object[] { csp, _this, isApplicableMatch, kda, task, sbc };
			}
		}
		return null;
	}

	public static final boolean pattern_PasswordBasedEncryption_2_5_checkCSP_expressionFBB(
			PasswordBasedEncryption _this, CSP csp) {
		boolean _localVariable_0 = _this.isApplicable_checkCsp_FWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_6_addmatchtoruleresult_blackBB(
			IsApplicableRuleResult ruleresult, IsApplicableMatch isApplicableMatch) {
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final Object[] pattern_PasswordBasedEncryption_2_6_addmatchtoruleresult_greenBB(
			IsApplicableRuleResult ruleresult, IsApplicableMatch isApplicableMatch) {
		ruleresult.getIsApplicableMatch().add(isApplicableMatch);
		boolean ruleresult_success_prime = Boolean.valueOf(true);
		String isApplicableMatch_ruleName_prime = "PasswordBasedEncryption";
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		isApplicableMatch.setRuleName(isApplicableMatch_ruleName_prime);
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final IsApplicableRuleResult pattern_PasswordBasedEncryption_2_7_expressionFB(
			IsApplicableRuleResult ruleresult) {
		IsApplicableRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_10_1_initialbindings_blackBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			return new Object[] { _this, match,
																					exprIterationLiteral, javaPackage,
																					exprRetGetKey,
																					exprOutputSizeLiteral, kdaJcu,
																					methodPerformEncryption, sbcJcu,
																					keyEncryption, dataEncryption,
																					methodGetKey, exprAlgNameLiteral,
																					pwdDeclaration, methodPerformGetKey,
																					statRetPerformEncryption,
																					exprKeyName, exprNameModePadding,
																					methodEncryption, exprPwdName,
																					exprDataName,
																					exprRetPerformEncryption,
																					statRetGetKey };
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_10_2_SolveCSP_bindingFBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		CSP _localVariable_0 = _this.isAppropriate_solveCsp_BWD(match, exprIterationLiteral, javaPackage, exprRetGetKey,
				exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
				methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
				exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption,
				statRetGetKey);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, match, exprIterationLiteral, javaPackage, exprRetGetKey,
					exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
					methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
					exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
					exprRetPerformEncryption, statRetGetKey };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_10_2_SolveCSP_blackB(CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_10_2_SolveCSP_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		Object[] result_pattern_PasswordBasedEncryption_10_2_SolveCSP_binding = pattern_PasswordBasedEncryption_10_2_SolveCSP_bindingFBBBBBBBBBBBBBBBBBBBBBBB(
				_this, match, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
				methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral,
				pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
				methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey);
		if (result_pattern_PasswordBasedEncryption_10_2_SolveCSP_binding != null) {
			CSP csp = (CSP) result_pattern_PasswordBasedEncryption_10_2_SolveCSP_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_10_2_SolveCSP_black = pattern_PasswordBasedEncryption_10_2_SolveCSP_blackB(
					csp);
			if (result_pattern_PasswordBasedEncryption_10_2_SolveCSP_black != null) {

				return new Object[] { csp, _this, match, exprIterationLiteral, javaPackage, exprRetGetKey,
						exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
						methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
						exprRetPerformEncryption, statRetGetKey };
			}
		}
		return null;
	}

	public static final boolean pattern_PasswordBasedEncryption_10_3_CheckCSP_expressionFBB(
			PasswordBasedEncryption _this, CSP csp) {
		boolean _localVariable_0 = _this.isAppropriate_checkCsp_BWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_10_4_collectelementstobetranslated_blackBBBBBBBBBBBBBBBBBBBBBB(
			Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			return new Object[] { match,
																					exprIterationLiteral, javaPackage,
																					exprRetGetKey,
																					exprOutputSizeLiteral, kdaJcu,
																					methodPerformEncryption, sbcJcu,
																					keyEncryption, dataEncryption,
																					methodGetKey, exprAlgNameLiteral,
																					pwdDeclaration, methodPerformGetKey,
																					statRetPerformEncryption,
																					exprKeyName, exprNameModePadding,
																					methodEncryption, exprPwdName,
																					exprDataName,
																					exprRetPerformEncryption,
																					statRetGetKey };
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_10_4_collectelementstobetranslated_greenBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFF(
			Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__statRetGetKey____statements = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprPwdName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge statRetGetKey__exprRetGetKey____expr = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__statRetPerformEncryption____statements = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge methodEncryption__keyEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__pwdDeclaration____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__sbcJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__kdaJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__dataEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodPerformGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodPerformEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		match.getToBeTranslatedNodes().add(exprIterationLiteral);
		match.getToBeTranslatedNodes().add(javaPackage);
		match.getToBeTranslatedNodes().add(exprRetGetKey);
		match.getToBeTranslatedNodes().add(exprOutputSizeLiteral);
		match.getToBeTranslatedNodes().add(kdaJcu);
		match.getToBeTranslatedNodes().add(methodPerformEncryption);
		match.getToBeTranslatedNodes().add(sbcJcu);
		match.getToBeTranslatedNodes().add(keyEncryption);
		match.getToBeTranslatedNodes().add(dataEncryption);
		match.getToBeTranslatedNodes().add(methodGetKey);
		match.getToBeTranslatedNodes().add(exprAlgNameLiteral);
		match.getToBeTranslatedNodes().add(pwdDeclaration);
		match.getToBeTranslatedNodes().add(methodPerformGetKey);
		match.getToBeTranslatedNodes().add(statRetPerformEncryption);
		match.getToBeTranslatedNodes().add(exprKeyName);
		match.getToBeTranslatedNodes().add(exprNameModePadding);
		match.getToBeTranslatedNodes().add(methodEncryption);
		match.getToBeTranslatedNodes().add(exprPwdName);
		match.getToBeTranslatedNodes().add(exprDataName);
		match.getToBeTranslatedNodes().add(exprRetPerformEncryption);
		match.getToBeTranslatedNodes().add(statRetGetKey);
		String exprRetPerformEncryption__exprKeyName____arguments_name_prime = "arguments";
		String methodGetKey__statRetGetKey____statements_name_prime = "statements";
		String exprRetGetKey__exprPwdName____arguments_name_prime = "arguments";
		String statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime = "expr";
		String statRetGetKey__exprRetGetKey____expr_name_prime = "expr";
		String kdaJcu__methodGetKey____methods_name_prime = "methods";
		String sbcJcu__methodEncryption____methods_name_prime = "methods";
		String exprRetPerformEncryption__exprDataName____arguments_name_prime = "arguments";
		String methodEncryption__statRetPerformEncryption____statements_name_prime = "statements";
		String methodEncryption__keyEncryption____params_name_prime = "params";
		String methodGetKey__pwdDeclaration____params_name_prime = "params";
		String javaPackage__sbcJcu____cunits_name_prime = "cunits";
		String javaPackage__kdaJcu____cunits_name_prime = "cunits";
		String methodEncryption__dataEncryption____params_name_prime = "params";
		String exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime = "arguments";
		String kdaJcu__methodPerformGetKey____methods_name_prime = "methods";
		String exprRetPerformEncryption__exprNameModePadding____arguments_name_prime = "arguments";
		String sbcJcu__methodPerformEncryption____methods_name_prime = "methods";
		String exprRetGetKey__exprAlgNameLiteral____arguments_name_prime = "arguments";
		String exprRetGetKey__exprIterationLiteral____arguments_name_prime = "arguments";
		exprRetPerformEncryption__exprKeyName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprKeyName____arguments.setTrg(exprKeyName);
		match.getToBeTranslatedEdges().add(exprRetPerformEncryption__exprKeyName____arguments);
		methodGetKey__statRetGetKey____statements.setSrc(methodGetKey);
		methodGetKey__statRetGetKey____statements.setTrg(statRetGetKey);
		match.getToBeTranslatedEdges().add(methodGetKey__statRetGetKey____statements);
		exprRetGetKey__exprPwdName____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprPwdName____arguments.setTrg(exprPwdName);
		match.getToBeTranslatedEdges().add(exprRetGetKey__exprPwdName____arguments);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setSrc(statRetPerformEncryption);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setTrg(exprRetPerformEncryption);
		match.getToBeTranslatedEdges().add(statRetPerformEncryption__exprRetPerformEncryption____expr);
		statRetGetKey__exprRetGetKey____expr.setSrc(statRetGetKey);
		statRetGetKey__exprRetGetKey____expr.setTrg(exprRetGetKey);
		match.getToBeTranslatedEdges().add(statRetGetKey__exprRetGetKey____expr);
		kdaJcu__methodGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodGetKey____methods.setTrg(methodGetKey);
		match.getToBeTranslatedEdges().add(kdaJcu__methodGetKey____methods);
		sbcJcu__methodEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodEncryption____methods.setTrg(methodEncryption);
		match.getToBeTranslatedEdges().add(sbcJcu__methodEncryption____methods);
		exprRetPerformEncryption__exprDataName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprDataName____arguments.setTrg(exprDataName);
		match.getToBeTranslatedEdges().add(exprRetPerformEncryption__exprDataName____arguments);
		methodEncryption__statRetPerformEncryption____statements.setSrc(methodEncryption);
		methodEncryption__statRetPerformEncryption____statements.setTrg(statRetPerformEncryption);
		match.getToBeTranslatedEdges().add(methodEncryption__statRetPerformEncryption____statements);
		methodEncryption__keyEncryption____params.setSrc(methodEncryption);
		methodEncryption__keyEncryption____params.setTrg(keyEncryption);
		match.getToBeTranslatedEdges().add(methodEncryption__keyEncryption____params);
		methodGetKey__pwdDeclaration____params.setSrc(methodGetKey);
		methodGetKey__pwdDeclaration____params.setTrg(pwdDeclaration);
		match.getToBeTranslatedEdges().add(methodGetKey__pwdDeclaration____params);
		javaPackage__sbcJcu____cunits.setSrc(javaPackage);
		javaPackage__sbcJcu____cunits.setTrg(sbcJcu);
		match.getToBeTranslatedEdges().add(javaPackage__sbcJcu____cunits);
		javaPackage__kdaJcu____cunits.setSrc(javaPackage);
		javaPackage__kdaJcu____cunits.setTrg(kdaJcu);
		match.getToBeTranslatedEdges().add(javaPackage__kdaJcu____cunits);
		methodEncryption__dataEncryption____params.setSrc(methodEncryption);
		methodEncryption__dataEncryption____params.setTrg(dataEncryption);
		match.getToBeTranslatedEdges().add(methodEncryption__dataEncryption____params);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setTrg(exprOutputSizeLiteral);
		match.getToBeTranslatedEdges().add(exprRetGetKey__exprOutputSizeLiteral____arguments);
		kdaJcu__methodPerformGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodPerformGetKey____methods.setTrg(methodPerformGetKey);
		match.getToBeTranslatedEdges().add(kdaJcu__methodPerformGetKey____methods);
		exprRetPerformEncryption__exprNameModePadding____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprNameModePadding____arguments.setTrg(exprNameModePadding);
		match.getToBeTranslatedEdges().add(exprRetPerformEncryption__exprNameModePadding____arguments);
		sbcJcu__methodPerformEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodPerformEncryption____methods.setTrg(methodPerformEncryption);
		match.getToBeTranslatedEdges().add(sbcJcu__methodPerformEncryption____methods);
		exprRetGetKey__exprAlgNameLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprAlgNameLiteral____arguments.setTrg(exprAlgNameLiteral);
		match.getToBeTranslatedEdges().add(exprRetGetKey__exprAlgNameLiteral____arguments);
		exprRetGetKey__exprIterationLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprIterationLiteral____arguments.setTrg(exprIterationLiteral);
		match.getToBeTranslatedEdges().add(exprRetGetKey__exprIterationLiteral____arguments);
		exprRetPerformEncryption__exprKeyName____arguments
				.setName(exprRetPerformEncryption__exprKeyName____arguments_name_prime);
		methodGetKey__statRetGetKey____statements.setName(methodGetKey__statRetGetKey____statements_name_prime);
		exprRetGetKey__exprPwdName____arguments.setName(exprRetGetKey__exprPwdName____arguments_name_prime);
		statRetPerformEncryption__exprRetPerformEncryption____expr
				.setName(statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime);
		statRetGetKey__exprRetGetKey____expr.setName(statRetGetKey__exprRetGetKey____expr_name_prime);
		kdaJcu__methodGetKey____methods.setName(kdaJcu__methodGetKey____methods_name_prime);
		sbcJcu__methodEncryption____methods.setName(sbcJcu__methodEncryption____methods_name_prime);
		exprRetPerformEncryption__exprDataName____arguments
				.setName(exprRetPerformEncryption__exprDataName____arguments_name_prime);
		methodEncryption__statRetPerformEncryption____statements
				.setName(methodEncryption__statRetPerformEncryption____statements_name_prime);
		methodEncryption__keyEncryption____params.setName(methodEncryption__keyEncryption____params_name_prime);
		methodGetKey__pwdDeclaration____params.setName(methodGetKey__pwdDeclaration____params_name_prime);
		javaPackage__sbcJcu____cunits.setName(javaPackage__sbcJcu____cunits_name_prime);
		javaPackage__kdaJcu____cunits.setName(javaPackage__kdaJcu____cunits_name_prime);
		methodEncryption__dataEncryption____params.setName(methodEncryption__dataEncryption____params_name_prime);
		exprRetGetKey__exprOutputSizeLiteral____arguments
				.setName(exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime);
		kdaJcu__methodPerformGetKey____methods.setName(kdaJcu__methodPerformGetKey____methods_name_prime);
		exprRetPerformEncryption__exprNameModePadding____arguments
				.setName(exprRetPerformEncryption__exprNameModePadding____arguments_name_prime);
		sbcJcu__methodPerformEncryption____methods.setName(sbcJcu__methodPerformEncryption____methods_name_prime);
		exprRetGetKey__exprAlgNameLiteral____arguments
				.setName(exprRetGetKey__exprAlgNameLiteral____arguments_name_prime);
		exprRetGetKey__exprIterationLiteral____arguments
				.setName(exprRetGetKey__exprIterationLiteral____arguments_name_prime);
		return new Object[] { match, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
				methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral,
				pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
				methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey,
				exprRetPerformEncryption__exprKeyName____arguments, methodGetKey__statRetGetKey____statements,
				exprRetGetKey__exprPwdName____arguments, statRetPerformEncryption__exprRetPerformEncryption____expr,
				statRetGetKey__exprRetGetKey____expr, kdaJcu__methodGetKey____methods,
				sbcJcu__methodEncryption____methods, exprRetPerformEncryption__exprDataName____arguments,
				methodEncryption__statRetPerformEncryption____statements, methodEncryption__keyEncryption____params,
				methodGetKey__pwdDeclaration____params, javaPackage__sbcJcu____cunits, javaPackage__kdaJcu____cunits,
				methodEncryption__dataEncryption____params, exprRetGetKey__exprOutputSizeLiteral____arguments,
				kdaJcu__methodPerformGetKey____methods, exprRetPerformEncryption__exprNameModePadding____arguments,
				sbcJcu__methodPerformEncryption____methods, exprRetGetKey__exprAlgNameLiteral____arguments,
				exprRetGetKey__exprIterationLiteral____arguments };
	}

	public static final Object[] pattern_PasswordBasedEncryption_10_5_collectcontextelements_blackBBBBBBBBBBBBBBBBBBBBBB(
			Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			return new Object[] { match,
																					exprIterationLiteral, javaPackage,
																					exprRetGetKey,
																					exprOutputSizeLiteral, kdaJcu,
																					methodPerformEncryption, sbcJcu,
																					keyEncryption, dataEncryption,
																					methodGetKey, exprAlgNameLiteral,
																					pwdDeclaration, methodPerformGetKey,
																					statRetPerformEncryption,
																					exprKeyName, exprNameModePadding,
																					methodEncryption, exprPwdName,
																					exprDataName,
																					exprRetPerformEncryption,
																					statRetGetKey };
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final void pattern_PasswordBasedEncryption_10_6_registerobjectstomatch_expressionBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		_this.registerObjectsToMatch_BWD(match, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
				exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption,
				statRetGetKey);

	}

	public static final boolean pattern_PasswordBasedEncryption_10_7_expressionF() {
		boolean _result = Boolean.valueOf(true);
		return _result;
	}

	public static final boolean pattern_PasswordBasedEncryption_10_8_expressionF() {
		boolean _result = Boolean.valueOf(false);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_1_performtransformation_bindingFFFFFFFFFFFFFFFFFFFFFB(
			IsApplicableMatch isApplicableMatch) {
		EObject _localVariable_0 = isApplicableMatch.getObject("exprIterationLiteral");
		EObject _localVariable_1 = isApplicableMatch.getObject("javaPackage");
		EObject _localVariable_2 = isApplicableMatch.getObject("exprRetGetKey");
		EObject _localVariable_3 = isApplicableMatch.getObject("exprOutputSizeLiteral");
		EObject _localVariable_4 = isApplicableMatch.getObject("kdaJcu");
		EObject _localVariable_5 = isApplicableMatch.getObject("methodPerformEncryption");
		EObject _localVariable_6 = isApplicableMatch.getObject("sbcJcu");
		EObject _localVariable_7 = isApplicableMatch.getObject("keyEncryption");
		EObject _localVariable_8 = isApplicableMatch.getObject("dataEncryption");
		EObject _localVariable_9 = isApplicableMatch.getObject("methodGetKey");
		EObject _localVariable_10 = isApplicableMatch.getObject("exprAlgNameLiteral");
		EObject _localVariable_11 = isApplicableMatch.getObject("pwdDeclaration");
		EObject _localVariable_12 = isApplicableMatch.getObject("methodPerformGetKey");
		EObject _localVariable_13 = isApplicableMatch.getObject("statRetPerformEncryption");
		EObject _localVariable_14 = isApplicableMatch.getObject("exprKeyName");
		EObject _localVariable_15 = isApplicableMatch.getObject("exprNameModePadding");
		EObject _localVariable_16 = isApplicableMatch.getObject("methodEncryption");
		EObject _localVariable_17 = isApplicableMatch.getObject("exprPwdName");
		EObject _localVariable_18 = isApplicableMatch.getObject("exprDataName");
		EObject _localVariable_19 = isApplicableMatch.getObject("exprRetPerformEncryption");
		EObject _localVariable_20 = isApplicableMatch.getObject("statRetGetKey");
		EObject tmpExprIterationLiteral = _localVariable_0;
		EObject tmpJavaPackage = _localVariable_1;
		EObject tmpExprRetGetKey = _localVariable_2;
		EObject tmpExprOutputSizeLiteral = _localVariable_3;
		EObject tmpKdaJcu = _localVariable_4;
		EObject tmpMethodPerformEncryption = _localVariable_5;
		EObject tmpSbcJcu = _localVariable_6;
		EObject tmpKeyEncryption = _localVariable_7;
		EObject tmpDataEncryption = _localVariable_8;
		EObject tmpMethodGetKey = _localVariable_9;
		EObject tmpExprAlgNameLiteral = _localVariable_10;
		EObject tmpPwdDeclaration = _localVariable_11;
		EObject tmpMethodPerformGetKey = _localVariable_12;
		EObject tmpStatRetPerformEncryption = _localVariable_13;
		EObject tmpExprKeyName = _localVariable_14;
		EObject tmpExprNameModePadding = _localVariable_15;
		EObject tmpMethodEncryption = _localVariable_16;
		EObject tmpExprPwdName = _localVariable_17;
		EObject tmpExprDataName = _localVariable_18;
		EObject tmpExprRetPerformEncryption = _localVariable_19;
		EObject tmpStatRetGetKey = _localVariable_20;
		if (tmpExprIterationLiteral instanceof JavaLiteral) {
			JavaLiteral exprIterationLiteral = (JavaLiteral) tmpExprIterationLiteral;
			if (tmpJavaPackage instanceof JavaPackage) {
				JavaPackage javaPackage = (JavaPackage) tmpJavaPackage;
				if (tmpExprRetGetKey instanceof JavaMethodInvocation) {
					JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) tmpExprRetGetKey;
					if (tmpExprOutputSizeLiteral instanceof JavaLiteral) {
						JavaLiteral exprOutputSizeLiteral = (JavaLiteral) tmpExprOutputSizeLiteral;
						if (tmpKdaJcu instanceof JavaCompilationUnit) {
							JavaCompilationUnit kdaJcu = (JavaCompilationUnit) tmpKdaJcu;
							if (tmpMethodPerformEncryption instanceof JavaOpaqueMethod) {
								JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) tmpMethodPerformEncryption;
								if (tmpSbcJcu instanceof JavaCompilationUnit) {
									JavaCompilationUnit sbcJcu = (JavaCompilationUnit) tmpSbcJcu;
									if (tmpKeyEncryption instanceof JavaVariableDeclaration) {
										JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) tmpKeyEncryption;
										if (tmpDataEncryption instanceof JavaVariableDeclaration) {
											JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) tmpDataEncryption;
											if (tmpMethodGetKey instanceof JavaWorkflowMethod) {
												JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) tmpMethodGetKey;
												if (tmpExprAlgNameLiteral instanceof JavaLiteral) {
													JavaLiteral exprAlgNameLiteral = (JavaLiteral) tmpExprAlgNameLiteral;
													if (tmpPwdDeclaration instanceof JavaVariableDeclaration) {
														JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) tmpPwdDeclaration;
														if (tmpMethodPerformGetKey instanceof JavaOpaqueMethod) {
															JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) tmpMethodPerformGetKey;
															if (tmpStatRetPerformEncryption instanceof JavaStatement) {
																JavaStatement statRetPerformEncryption = (JavaStatement) tmpStatRetPerformEncryption;
																if (tmpExprKeyName instanceof JavaName) {
																	JavaName exprKeyName = (JavaName) tmpExprKeyName;
																	if (tmpExprNameModePadding instanceof JavaLiteral) {
																		JavaLiteral exprNameModePadding = (JavaLiteral) tmpExprNameModePadding;
																		if (tmpMethodEncryption instanceof JavaWorkflowMethod) {
																			JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) tmpMethodEncryption;
																			if (tmpExprPwdName instanceof JavaName) {
																				JavaName exprPwdName = (JavaName) tmpExprPwdName;
																				if (tmpExprDataName instanceof JavaName) {
																					JavaName exprDataName = (JavaName) tmpExprDataName;
																					if (tmpExprRetPerformEncryption instanceof JavaMethodInvocation) {
																						JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) tmpExprRetPerformEncryption;
																						if (tmpStatRetGetKey instanceof JavaStatement) {
																							JavaStatement statRetGetKey = (JavaStatement) tmpStatRetGetKey;
																							return new Object[] {
																									exprIterationLiteral,
																									javaPackage,
																									exprRetGetKey,
																									exprOutputSizeLiteral,
																									kdaJcu,
																									methodPerformEncryption,
																									sbcJcu,
																									keyEncryption,
																									dataEncryption,
																									methodGetKey,
																									exprAlgNameLiteral,
																									pwdDeclaration,
																									methodPerformGetKey,
																									statRetPerformEncryption,
																									exprKeyName,
																									exprNameModePadding,
																									methodEncryption,
																									exprPwdName,
																									exprDataName,
																									exprRetPerformEncryption,
																									statRetGetKey,
																									isApplicableMatch };
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_1_performtransformation_blackBBBBBBBBBBBBBBBBBBBBBFBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey,
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			for (EObject tmpCsp : isApplicableMatch
																					.getAttributeInfo()) {
																				if (tmpCsp instanceof CSP) {
																					CSP csp = (CSP) tmpCsp;
																					return new Object[] {
																							exprIterationLiteral,
																							javaPackage, exprRetGetKey,
																							exprOutputSizeLiteral,
																							kdaJcu,
																							methodPerformEncryption,
																							sbcJcu, keyEncryption,
																							dataEncryption,
																							methodGetKey,
																							exprAlgNameLiteral,
																							pwdDeclaration,
																							methodPerformGetKey,
																							statRetPerformEncryption,
																							exprKeyName,
																							exprNameModePadding,
																							methodEncryption,
																							exprPwdName, exprDataName,
																							exprRetPerformEncryption,
																							statRetGetKey, csp, _this,
																							isApplicableMatch };
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_1_performtransformation_bindingAndBlackFFFFFFFFFFFFFFFFFFFFFFBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch) {
		Object[] result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding = pattern_PasswordBasedEncryption_11_1_performtransformation_bindingFFFFFFFFFFFFFFFFFFFFFB(
				isApplicableMatch);
		if (result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding != null) {
			JavaLiteral exprIterationLiteral = (JavaLiteral) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[0];
			JavaPackage javaPackage = (JavaPackage) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[1];
			JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[2];
			JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[3];
			JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[4];
			JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[5];
			JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[6];
			JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[7];
			JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[8];
			JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[9];
			JavaLiteral exprAlgNameLiteral = (JavaLiteral) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[10];
			JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[11];
			JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[12];
			JavaStatement statRetPerformEncryption = (JavaStatement) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[13];
			JavaName exprKeyName = (JavaName) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[14];
			JavaLiteral exprNameModePadding = (JavaLiteral) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[15];
			JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[16];
			JavaName exprPwdName = (JavaName) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[17];
			JavaName exprDataName = (JavaName) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[18];
			JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[19];
			JavaStatement statRetGetKey = (JavaStatement) result_pattern_PasswordBasedEncryption_11_1_performtransformation_binding[20];

			Object[] result_pattern_PasswordBasedEncryption_11_1_performtransformation_black = pattern_PasswordBasedEncryption_11_1_performtransformation_blackBBBBBBBBBBBBBBBBBBBBBFBB(
					exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
					methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral,
					pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
					methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey, _this,
					isApplicableMatch);
			if (result_pattern_PasswordBasedEncryption_11_1_performtransformation_black != null) {
				CSP csp = (CSP) result_pattern_PasswordBasedEncryption_11_1_performtransformation_black[21];

				return new Object[] { exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
						exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
						exprNameModePadding, methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption,
						statRetGetKey, csp, _this, isApplicableMatch };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_1_performtransformation_greenBFBBFFFFFB(
			JavaPackage javaPackage, JavaCompilationUnit kdaJcu, JavaCompilationUnit sbcJcu, CSP csp) {
		SymmetricBlockCipherToJcu sbc2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createSymmetricBlockCipherToJcu();
		TaskToJavaPackage t2c = CryptoConfigToJavaFactory.eINSTANCE.createTaskToJavaPackage();
		KeyDerivationAlgorithm kda = CryptoAPIConfigFactory.eINSTANCE.createKeyDerivationAlgorithm();
		Task task = CryptoAPIConfigFactory.eINSTANCE.createTask();
		SymmetricBlockCipher sbc = CryptoAPIConfigFactory.eINSTANCE.createSymmetricBlockCipher();
		KeyDerivationAlgorithmToJcu kda2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createKeyDerivationAlgorithmToJcu();
		Object _localVariable_0 = csp.getValue("kda", "iterations");
		Object _localVariable_1 = csp.getValue("kda", "name");
		Object _localVariable_2 = csp.getValue("kda", "outputSize");
		String task_description_prime = "PasswordBasedEncryption";
		Object _localVariable_3 = csp.getValue("task", "package");
		Object _localVariable_4 = csp.getValue("sbc", "name");
		Object _localVariable_5 = csp.getValue("sbc", "mode");
		Object _localVariable_6 = csp.getValue("sbc", "padding");
		sbc2Jcu.setTarget(sbcJcu);
		t2c.setTarget(javaPackage);
		t2c.setSource(task);
		task.getAlgorithms().add(kda);
		task.getAlgorithms().add(sbc);
		sbc2Jcu.setSource(sbc);
		kda2Jcu.setSource(kda);
		kda2Jcu.setTarget(kdaJcu);
		String kda_iterations_prime = (String) _localVariable_0;
		String kda_name_prime = (String) _localVariable_1;
		String kda_outputSize_prime = (String) _localVariable_2;
		task.setDescription(task_description_prime);
		String task_package_prime = (String) _localVariable_3;
		String sbc_name_prime = (String) _localVariable_4;
		String sbc_mode_prime = (String) _localVariable_5;
		String sbc_padding_prime = (String) _localVariable_6;
		kda.setIterations(kda_iterations_prime);
		kda.setName(kda_name_prime);
		kda.setOutputSize(kda_outputSize_prime);
		task.setPackage(task_package_prime);
		sbc.setName(sbc_name_prime);
		sbc.setMode(sbc_mode_prime);
		sbc.setPadding(sbc_padding_prime);
		return new Object[] { javaPackage, sbc2Jcu, kdaJcu, sbcJcu, t2c, kda, task, sbc, kda2Jcu, csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_2_collecttranslatedelements_blackBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, SymmetricBlockCipherToJcu sbc2Jcu, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, TaskToJavaPackage t2c,
			JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration, KeyDerivationAlgorithm kda,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, Task task, JavaName exprPwdName,
			SymmetricBlockCipher sbc, JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption,
			JavaStatement statRetGetKey, KeyDerivationAlgorithmToJcu kda2Jcu) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			return new Object[] { exprIterationLiteral,
																					javaPackage, exprRetGetKey,
																					exprOutputSizeLiteral, sbc2Jcu,
																					kdaJcu, methodPerformEncryption,
																					sbcJcu, keyEncryption,
																					dataEncryption, methodGetKey, t2c,
																					exprAlgNameLiteral, pwdDeclaration,
																					kda, methodPerformGetKey,
																					statRetPerformEncryption,
																					exprKeyName, exprNameModePadding,
																					methodEncryption, task, exprPwdName,
																					sbc, exprDataName,
																					exprRetPerformEncryption,
																					statRetGetKey, kda2Jcu };
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_2_collecttranslatedelements_greenFBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, SymmetricBlockCipherToJcu sbc2Jcu, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, TaskToJavaPackage t2c,
			JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration, KeyDerivationAlgorithm kda,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, Task task, JavaName exprPwdName,
			SymmetricBlockCipher sbc, JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption,
			JavaStatement statRetGetKey, KeyDerivationAlgorithmToJcu kda2Jcu) {
		PerformRuleResult ruleresult = RuntimeFactory.eINSTANCE.createPerformRuleResult();
		ruleresult.getTranslatedElements().add(exprIterationLiteral);
		ruleresult.getTranslatedElements().add(javaPackage);
		ruleresult.getTranslatedElements().add(exprRetGetKey);
		ruleresult.getTranslatedElements().add(exprOutputSizeLiteral);
		ruleresult.getCreatedLinkElements().add(sbc2Jcu);
		ruleresult.getTranslatedElements().add(kdaJcu);
		ruleresult.getTranslatedElements().add(methodPerformEncryption);
		ruleresult.getTranslatedElements().add(sbcJcu);
		ruleresult.getTranslatedElements().add(keyEncryption);
		ruleresult.getTranslatedElements().add(dataEncryption);
		ruleresult.getTranslatedElements().add(methodGetKey);
		ruleresult.getCreatedLinkElements().add(t2c);
		ruleresult.getTranslatedElements().add(exprAlgNameLiteral);
		ruleresult.getTranslatedElements().add(pwdDeclaration);
		ruleresult.getCreatedElements().add(kda);
		ruleresult.getTranslatedElements().add(methodPerformGetKey);
		ruleresult.getTranslatedElements().add(statRetPerformEncryption);
		ruleresult.getTranslatedElements().add(exprKeyName);
		ruleresult.getTranslatedElements().add(exprNameModePadding);
		ruleresult.getTranslatedElements().add(methodEncryption);
		ruleresult.getCreatedElements().add(task);
		ruleresult.getTranslatedElements().add(exprPwdName);
		ruleresult.getCreatedElements().add(sbc);
		ruleresult.getTranslatedElements().add(exprDataName);
		ruleresult.getTranslatedElements().add(exprRetPerformEncryption);
		ruleresult.getTranslatedElements().add(statRetGetKey);
		ruleresult.getCreatedLinkElements().add(kda2Jcu);
		return new Object[] { ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				sbc2Jcu, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
				exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption,
				statRetGetKey, kda2Jcu };
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_3_bookkeepingforedges_blackBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PerformRuleResult ruleresult, EObject exprIterationLiteral, EObject javaPackage, EObject exprRetGetKey,
			EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu, EObject methodPerformEncryption,
			EObject sbcJcu, EObject keyEncryption, EObject dataEncryption, EObject methodGetKey, EObject t2c,
			EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda, EObject methodPerformGetKey,
			EObject statRetPerformEncryption, EObject exprKeyName, EObject exprNameModePadding,
			EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc, EObject exprDataName,
			EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		if (!exprIterationLiteral.equals(javaPackage)) {
			if (!exprIterationLiteral.equals(exprRetGetKey)) {
				if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
					if (!exprIterationLiteral.equals(sbc2Jcu)) {
						if (!exprIterationLiteral.equals(kdaJcu)) {
							if (!exprIterationLiteral.equals(methodPerformEncryption)) {
								if (!exprIterationLiteral.equals(sbcJcu)) {
									if (!exprIterationLiteral.equals(keyEncryption)) {
										if (!exprIterationLiteral.equals(methodGetKey)) {
											if (!exprIterationLiteral.equals(t2c)) {
												if (!exprIterationLiteral.equals(pwdDeclaration)) {
													if (!exprIterationLiteral.equals(kda)) {
														if (!exprIterationLiteral.equals(methodPerformGetKey)) {
															if (!exprIterationLiteral
																	.equals(statRetPerformEncryption)) {
																if (!exprIterationLiteral.equals(exprKeyName)) {
																	if (!exprIterationLiteral
																			.equals(exprNameModePadding)) {
																		if (!exprIterationLiteral
																				.equals(methodEncryption)) {
																			if (!exprIterationLiteral.equals(task)) {
																				if (!exprIterationLiteral
																						.equals(exprPwdName)) {
																					if (!exprIterationLiteral
																							.equals(sbc)) {
																						if (!exprIterationLiteral
																								.equals(exprRetPerformEncryption)) {
																							if (!exprIterationLiteral
																									.equals(statRetGetKey)) {
																								if (!exprIterationLiteral
																										.equals(kda2Jcu)) {
																									if (!javaPackage
																											.equals(sbc2Jcu)) {
																										if (!javaPackage
																												.equals(kdaJcu)) {
																											if (!javaPackage
																													.equals(methodPerformEncryption)) {
																												if (!javaPackage
																														.equals(sbcJcu)) {
																													if (!javaPackage
																															.equals(keyEncryption)) {
																														if (!javaPackage
																																.equals(methodGetKey)) {
																															if (!javaPackage
																																	.equals(t2c)) {
																																if (!javaPackage
																																		.equals(pwdDeclaration)) {
																																	if (!javaPackage
																																			.equals(kda)) {
																																		if (!javaPackage
																																				.equals(methodPerformGetKey)) {
																																			if (!javaPackage
																																					.equals(statRetPerformEncryption)) {
																																				if (!javaPackage
																																						.equals(methodEncryption)) {
																																					if (!javaPackage
																																							.equals(task)) {
																																						if (!javaPackage
																																								.equals(sbc)) {
																																							if (!javaPackage
																																									.equals(statRetGetKey)) {
																																								if (!javaPackage
																																										.equals(kda2Jcu)) {
																																									if (!exprRetGetKey
																																											.equals(javaPackage)) {
																																										if (!exprRetGetKey
																																												.equals(sbc2Jcu)) {
																																											if (!exprRetGetKey
																																													.equals(kdaJcu)) {
																																												if (!exprRetGetKey
																																														.equals(methodPerformEncryption)) {
																																													if (!exprRetGetKey
																																															.equals(sbcJcu)) {
																																														if (!exprRetGetKey
																																																.equals(keyEncryption)) {
																																															if (!exprRetGetKey
																																																	.equals(methodGetKey)) {
																																																if (!exprRetGetKey
																																																		.equals(t2c)) {
																																																	if (!exprRetGetKey
																																																			.equals(pwdDeclaration)) {
																																																		if (!exprRetGetKey
																																																				.equals(kda)) {
																																																			if (!exprRetGetKey
																																																					.equals(methodPerformGetKey)) {
																																																				if (!exprRetGetKey
																																																						.equals(statRetPerformEncryption)) {
																																																					if (!exprRetGetKey
																																																							.equals(methodEncryption)) {
																																																						if (!exprRetGetKey
																																																								.equals(task)) {
																																																							if (!exprRetGetKey
																																																									.equals(sbc)) {
																																																								if (!exprRetGetKey
																																																										.equals(exprRetPerformEncryption)) {
																																																									if (!exprRetGetKey
																																																											.equals(statRetGetKey)) {
																																																										if (!exprRetGetKey
																																																												.equals(kda2Jcu)) {
																																																											if (!exprOutputSizeLiteral
																																																													.equals(javaPackage)) {
																																																												if (!exprOutputSizeLiteral
																																																														.equals(exprRetGetKey)) {
																																																													if (!exprOutputSizeLiteral
																																																															.equals(sbc2Jcu)) {
																																																														if (!exprOutputSizeLiteral
																																																																.equals(kdaJcu)) {
																																																															if (!exprOutputSizeLiteral
																																																																	.equals(methodPerformEncryption)) {
																																																																if (!exprOutputSizeLiteral
																																																																		.equals(sbcJcu)) {
																																																																	if (!exprOutputSizeLiteral
																																																																			.equals(keyEncryption)) {
																																																																		if (!exprOutputSizeLiteral
																																																																				.equals(methodGetKey)) {
																																																																			if (!exprOutputSizeLiteral
																																																																					.equals(t2c)) {
																																																																				if (!exprOutputSizeLiteral
																																																																						.equals(pwdDeclaration)) {
																																																																					if (!exprOutputSizeLiteral
																																																																							.equals(kda)) {
																																																																						if (!exprOutputSizeLiteral
																																																																								.equals(methodPerformGetKey)) {
																																																																							if (!exprOutputSizeLiteral
																																																																									.equals(statRetPerformEncryption)) {
																																																																								if (!exprOutputSizeLiteral
																																																																										.equals(methodEncryption)) {
																																																																									if (!exprOutputSizeLiteral
																																																																											.equals(task)) {
																																																																										if (!exprOutputSizeLiteral
																																																																												.equals(exprPwdName)) {
																																																																											if (!exprOutputSizeLiteral
																																																																													.equals(sbc)) {
																																																																												if (!exprOutputSizeLiteral
																																																																														.equals(exprRetPerformEncryption)) {
																																																																													if (!exprOutputSizeLiteral
																																																																															.equals(statRetGetKey)) {
																																																																														if (!exprOutputSizeLiteral
																																																																																.equals(kda2Jcu)) {
																																																																															if (!sbc2Jcu
																																																																																	.equals(sbcJcu)) {
																																																																																if (!sbc2Jcu
																																																																																		.equals(t2c)) {
																																																																																	if (!sbc2Jcu
																																																																																			.equals(statRetPerformEncryption)) {
																																																																																		if (!sbc2Jcu
																																																																																				.equals(task)) {
																																																																																			if (!sbc2Jcu
																																																																																					.equals(statRetGetKey)) {
																																																																																				if (!kdaJcu
																																																																																						.equals(sbc2Jcu)) {
																																																																																					if (!kdaJcu
																																																																																							.equals(methodPerformEncryption)) {
																																																																																						if (!kdaJcu
																																																																																								.equals(sbcJcu)) {
																																																																																							if (!kdaJcu
																																																																																									.equals(keyEncryption)) {
																																																																																								if (!kdaJcu
																																																																																										.equals(methodGetKey)) {
																																																																																									if (!kdaJcu
																																																																																											.equals(t2c)) {
																																																																																										if (!kdaJcu
																																																																																												.equals(pwdDeclaration)) {
																																																																																											if (!kdaJcu
																																																																																													.equals(methodPerformGetKey)) {
																																																																																												if (!kdaJcu
																																																																																														.equals(statRetPerformEncryption)) {
																																																																																													if (!kdaJcu
																																																																																															.equals(methodEncryption)) {
																																																																																														if (!kdaJcu
																																																																																																.equals(task)) {
																																																																																															if (!kdaJcu
																																																																																																	.equals(sbc)) {
																																																																																																if (!kdaJcu
																																																																																																		.equals(statRetGetKey)) {
																																																																																																	if (!methodPerformEncryption
																																																																																																			.equals(sbc2Jcu)) {
																																																																																																		if (!methodPerformEncryption
																																																																																																				.equals(sbcJcu)) {
																																																																																																			if (!methodPerformEncryption
																																																																																																					.equals(t2c)) {
																																																																																																				if (!methodPerformEncryption
																																																																																																						.equals(pwdDeclaration)) {
																																																																																																					if (!methodPerformEncryption
																																																																																																							.equals(methodPerformGetKey)) {
																																																																																																						if (!methodPerformEncryption
																																																																																																								.equals(statRetPerformEncryption)) {
																																																																																																							if (!methodPerformEncryption
																																																																																																									.equals(task)) {
																																																																																																								if (!methodPerformEncryption
																																																																																																										.equals(sbc)) {
																																																																																																									if (!methodPerformEncryption
																																																																																																											.equals(statRetGetKey)) {
																																																																																																										if (!sbcJcu
																																																																																																												.equals(t2c)) {
																																																																																																											if (!sbcJcu
																																																																																																													.equals(statRetPerformEncryption)) {
																																																																																																												if (!sbcJcu
																																																																																																														.equals(task)) {
																																																																																																													if (!sbcJcu
																																																																																																															.equals(statRetGetKey)) {
																																																																																																														if (!keyEncryption
																																																																																																																.equals(sbc2Jcu)) {
																																																																																																															if (!keyEncryption
																																																																																																																	.equals(methodPerformEncryption)) {
																																																																																																																if (!keyEncryption
																																																																																																																		.equals(sbcJcu)) {
																																																																																																																	if (!keyEncryption
																																																																																																																			.equals(methodGetKey)) {
																																																																																																																		if (!keyEncryption
																																																																																																																				.equals(t2c)) {
																																																																																																																			if (!keyEncryption
																																																																																																																					.equals(pwdDeclaration)) {
																																																																																																																				if (!keyEncryption
																																																																																																																						.equals(methodPerformGetKey)) {
																																																																																																																					if (!keyEncryption
																																																																																																																							.equals(statRetPerformEncryption)) {
																																																																																																																						if (!keyEncryption
																																																																																																																								.equals(methodEncryption)) {
																																																																																																																							if (!keyEncryption
																																																																																																																									.equals(task)) {
																																																																																																																								if (!keyEncryption
																																																																																																																										.equals(sbc)) {
																																																																																																																									if (!keyEncryption
																																																																																																																											.equals(statRetGetKey)) {
																																																																																																																										if (!dataEncryption
																																																																																																																												.equals(exprIterationLiteral)) {
																																																																																																																											if (!dataEncryption
																																																																																																																													.equals(javaPackage)) {
																																																																																																																												if (!dataEncryption
																																																																																																																														.equals(exprRetGetKey)) {
																																																																																																																													if (!dataEncryption
																																																																																																																															.equals(exprOutputSizeLiteral)) {
																																																																																																																														if (!dataEncryption
																																																																																																																																.equals(sbc2Jcu)) {
																																																																																																																															if (!dataEncryption
																																																																																																																																	.equals(kdaJcu)) {
																																																																																																																																if (!dataEncryption
																																																																																																																																		.equals(methodPerformEncryption)) {
																																																																																																																																	if (!dataEncryption
																																																																																																																																			.equals(sbcJcu)) {
																																																																																																																																		if (!dataEncryption
																																																																																																																																				.equals(keyEncryption)) {
																																																																																																																																			if (!dataEncryption
																																																																																																																																					.equals(methodGetKey)) {
																																																																																																																																				if (!dataEncryption
																																																																																																																																						.equals(t2c)) {
																																																																																																																																					if (!dataEncryption
																																																																																																																																							.equals(exprAlgNameLiteral)) {
																																																																																																																																						if (!dataEncryption
																																																																																																																																								.equals(pwdDeclaration)) {
																																																																																																																																							if (!dataEncryption
																																																																																																																																									.equals(kda)) {
																																																																																																																																								if (!dataEncryption
																																																																																																																																										.equals(methodPerformGetKey)) {
																																																																																																																																									if (!dataEncryption
																																																																																																																																											.equals(statRetPerformEncryption)) {
																																																																																																																																										if (!dataEncryption
																																																																																																																																												.equals(exprKeyName)) {
																																																																																																																																											if (!dataEncryption
																																																																																																																																													.equals(exprNameModePadding)) {
																																																																																																																																												if (!dataEncryption
																																																																																																																																														.equals(methodEncryption)) {
																																																																																																																																													if (!dataEncryption
																																																																																																																																															.equals(task)) {
																																																																																																																																														if (!dataEncryption
																																																																																																																																																.equals(exprPwdName)) {
																																																																																																																																															if (!dataEncryption
																																																																																																																																																	.equals(sbc)) {
																																																																																																																																																if (!dataEncryption
																																																																																																																																																		.equals(exprDataName)) {
																																																																																																																																																	if (!dataEncryption
																																																																																																																																																			.equals(exprRetPerformEncryption)) {
																																																																																																																																																		if (!dataEncryption
																																																																																																																																																				.equals(statRetGetKey)) {
																																																																																																																																																			if (!dataEncryption
																																																																																																																																																					.equals(kda2Jcu)) {
																																																																																																																																																				if (!methodGetKey
																																																																																																																																																						.equals(sbc2Jcu)) {
																																																																																																																																																					if (!methodGetKey
																																																																																																																																																							.equals(methodPerformEncryption)) {
																																																																																																																																																						if (!methodGetKey
																																																																																																																																																								.equals(sbcJcu)) {
																																																																																																																																																							if (!methodGetKey
																																																																																																																																																									.equals(t2c)) {
																																																																																																																																																								if (!methodGetKey
																																																																																																																																																										.equals(pwdDeclaration)) {
																																																																																																																																																									if (!methodGetKey
																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																										if (!methodGetKey
																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																											if (!methodGetKey
																																																																																																																																																													.equals(task)) {
																																																																																																																																																												if (!methodGetKey
																																																																																																																																																														.equals(sbc)) {
																																																																																																																																																													if (!methodGetKey
																																																																																																																																																															.equals(statRetGetKey)) {
																																																																																																																																																														if (!t2c.equals(
																																																																																																																																																																task)) {
																																																																																																																																																															if (!exprAlgNameLiteral
																																																																																																																																																																	.equals(exprIterationLiteral)) {
																																																																																																																																																																if (!exprAlgNameLiteral
																																																																																																																																																																		.equals(javaPackage)) {
																																																																																																																																																																	if (!exprAlgNameLiteral
																																																																																																																																																																			.equals(exprRetGetKey)) {
																																																																																																																																																																		if (!exprAlgNameLiteral
																																																																																																																																																																				.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																			if (!exprAlgNameLiteral
																																																																																																																																																																					.equals(sbc2Jcu)) {
																																																																																																																																																																				if (!exprAlgNameLiteral
																																																																																																																																																																						.equals(kdaJcu)) {
																																																																																																																																																																					if (!exprAlgNameLiteral
																																																																																																																																																																							.equals(methodPerformEncryption)) {
																																																																																																																																																																						if (!exprAlgNameLiteral
																																																																																																																																																																								.equals(sbcJcu)) {
																																																																																																																																																																							if (!exprAlgNameLiteral
																																																																																																																																																																									.equals(keyEncryption)) {
																																																																																																																																																																								if (!exprAlgNameLiteral
																																																																																																																																																																										.equals(methodGetKey)) {
																																																																																																																																																																									if (!exprAlgNameLiteral
																																																																																																																																																																											.equals(t2c)) {
																																																																																																																																																																										if (!exprAlgNameLiteral
																																																																																																																																																																												.equals(pwdDeclaration)) {
																																																																																																																																																																											if (!exprAlgNameLiteral
																																																																																																																																																																													.equals(kda)) {
																																																																																																																																																																												if (!exprAlgNameLiteral
																																																																																																																																																																														.equals(methodPerformGetKey)) {
																																																																																																																																																																													if (!exprAlgNameLiteral
																																																																																																																																																																															.equals(statRetPerformEncryption)) {
																																																																																																																																																																														if (!exprAlgNameLiteral
																																																																																																																																																																																.equals(exprKeyName)) {
																																																																																																																																																																															if (!exprAlgNameLiteral
																																																																																																																																																																																	.equals(exprNameModePadding)) {
																																																																																																																																																																																if (!exprAlgNameLiteral
																																																																																																																																																																																		.equals(methodEncryption)) {
																																																																																																																																																																																	if (!exprAlgNameLiteral
																																																																																																																																																																																			.equals(task)) {
																																																																																																																																																																																		if (!exprAlgNameLiteral
																																																																																																																																																																																				.equals(exprPwdName)) {
																																																																																																																																																																																			if (!exprAlgNameLiteral
																																																																																																																																																																																					.equals(sbc)) {
																																																																																																																																																																																				if (!exprAlgNameLiteral
																																																																																																																																																																																						.equals(exprDataName)) {
																																																																																																																																																																																					if (!exprAlgNameLiteral
																																																																																																																																																																																							.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																						if (!exprAlgNameLiteral
																																																																																																																																																																																								.equals(statRetGetKey)) {
																																																																																																																																																																																							if (!exprAlgNameLiteral
																																																																																																																																																																																									.equals(kda2Jcu)) {
																																																																																																																																																																																								if (!pwdDeclaration
																																																																																																																																																																																										.equals(sbc2Jcu)) {
																																																																																																																																																																																									if (!pwdDeclaration
																																																																																																																																																																																											.equals(sbcJcu)) {
																																																																																																																																																																																										if (!pwdDeclaration
																																																																																																																																																																																												.equals(t2c)) {
																																																																																																																																																																																											if (!pwdDeclaration
																																																																																																																																																																																													.equals(statRetPerformEncryption)) {
																																																																																																																																																																																												if (!pwdDeclaration
																																																																																																																																																																																														.equals(task)) {
																																																																																																																																																																																													if (!pwdDeclaration
																																																																																																																																																																																															.equals(sbc)) {
																																																																																																																																																																																														if (!pwdDeclaration
																																																																																																																																																																																																.equals(statRetGetKey)) {
																																																																																																																																																																																															if (!kda.equals(
																																																																																																																																																																																																	sbc2Jcu)) {
																																																																																																																																																																																																if (!kda.equals(
																																																																																																																																																																																																		kdaJcu)) {
																																																																																																																																																																																																	if (!kda.equals(
																																																																																																																																																																																																			methodPerformEncryption)) {
																																																																																																																																																																																																		if (!kda.equals(
																																																																																																																																																																																																				sbcJcu)) {
																																																																																																																																																																																																			if (!kda.equals(
																																																																																																																																																																																																					keyEncryption)) {
																																																																																																																																																																																																				if (!kda.equals(
																																																																																																																																																																																																						methodGetKey)) {
																																																																																																																																																																																																					if (!kda.equals(
																																																																																																																																																																																																							t2c)) {
																																																																																																																																																																																																						if (!kda.equals(
																																																																																																																																																																																																								pwdDeclaration)) {
																																																																																																																																																																																																							if (!kda.equals(
																																																																																																																																																																																																									methodPerformGetKey)) {
																																																																																																																																																																																																								if (!kda.equals(
																																																																																																																																																																																																										statRetPerformEncryption)) {
																																																																																																																																																																																																									if (!kda.equals(
																																																																																																																																																																																																											methodEncryption)) {
																																																																																																																																																																																																										if (!kda.equals(
																																																																																																																																																																																																												task)) {
																																																																																																																																																																																																											if (!kda.equals(
																																																																																																																																																																																																													sbc)) {
																																																																																																																																																																																																												if (!kda.equals(
																																																																																																																																																																																																														statRetGetKey)) {
																																																																																																																																																																																																													if (!kda.equals(
																																																																																																																																																																																																															kda2Jcu)) {
																																																																																																																																																																																																														if (!methodPerformGetKey
																																																																																																																																																																																																																.equals(sbc2Jcu)) {
																																																																																																																																																																																																															if (!methodPerformGetKey
																																																																																																																																																																																																																	.equals(sbcJcu)) {
																																																																																																																																																																																																																if (!methodPerformGetKey
																																																																																																																																																																																																																		.equals(t2c)) {
																																																																																																																																																																																																																	if (!methodPerformGetKey
																																																																																																																																																																																																																			.equals(pwdDeclaration)) {
																																																																																																																																																																																																																		if (!methodPerformGetKey
																																																																																																																																																																																																																				.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																			if (!methodPerformGetKey
																																																																																																																																																																																																																					.equals(task)) {
																																																																																																																																																																																																																				if (!methodPerformGetKey
																																																																																																																																																																																																																						.equals(sbc)) {
																																																																																																																																																																																																																					if (!methodPerformGetKey
																																																																																																																																																																																																																							.equals(statRetGetKey)) {
																																																																																																																																																																																																																						if (!statRetPerformEncryption
																																																																																																																																																																																																																								.equals(t2c)) {
																																																																																																																																																																																																																							if (!statRetPerformEncryption
																																																																																																																																																																																																																									.equals(task)) {
																																																																																																																																																																																																																								if (!exprKeyName
																																																																																																																																																																																																																										.equals(javaPackage)) {
																																																																																																																																																																																																																									if (!exprKeyName
																																																																																																																																																																																																																											.equals(exprRetGetKey)) {
																																																																																																																																																																																																																										if (!exprKeyName
																																																																																																																																																																																																																												.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																																																																											if (!exprKeyName
																																																																																																																																																																																																																													.equals(sbc2Jcu)) {
																																																																																																																																																																																																																												if (!exprKeyName
																																																																																																																																																																																																																														.equals(kdaJcu)) {
																																																																																																																																																																																																																													if (!exprKeyName
																																																																																																																																																																																																																															.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																														if (!exprKeyName
																																																																																																																																																																																																																																.equals(sbcJcu)) {
																																																																																																																																																																																																																															if (!exprKeyName
																																																																																																																																																																																																																																	.equals(keyEncryption)) {
																																																																																																																																																																																																																																if (!exprKeyName
																																																																																																																																																																																																																																		.equals(methodGetKey)) {
																																																																																																																																																																																																																																	if (!exprKeyName
																																																																																																																																																																																																																																			.equals(t2c)) {
																																																																																																																																																																																																																																		if (!exprKeyName
																																																																																																																																																																																																																																				.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																			if (!exprKeyName
																																																																																																																																																																																																																																					.equals(kda)) {
																																																																																																																																																																																																																																				if (!exprKeyName
																																																																																																																																																																																																																																						.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																					if (!exprKeyName
																																																																																																																																																																																																																																							.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																						if (!exprKeyName
																																																																																																																																																																																																																																								.equals(exprNameModePadding)) {
																																																																																																																																																																																																																																							if (!exprKeyName
																																																																																																																																																																																																																																									.equals(methodEncryption)) {
																																																																																																																																																																																																																																								if (!exprKeyName
																																																																																																																																																																																																																																										.equals(task)) {
																																																																																																																																																																																																																																									if (!exprKeyName
																																																																																																																																																																																																																																											.equals(exprPwdName)) {
																																																																																																																																																																																																																																										if (!exprKeyName
																																																																																																																																																																																																																																												.equals(sbc)) {
																																																																																																																																																																																																																																											if (!exprKeyName
																																																																																																																																																																																																																																													.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																												if (!exprKeyName
																																																																																																																																																																																																																																														.equals(statRetGetKey)) {
																																																																																																																																																																																																																																													if (!exprKeyName
																																																																																																																																																																																																																																															.equals(kda2Jcu)) {
																																																																																																																																																																																																																																														if (!exprNameModePadding
																																																																																																																																																																																																																																																.equals(javaPackage)) {
																																																																																																																																																																																																																																															if (!exprNameModePadding
																																																																																																																																																																																																																																																	.equals(exprRetGetKey)) {
																																																																																																																																																																																																																																																if (!exprNameModePadding
																																																																																																																																																																																																																																																		.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																																																																																																	if (!exprNameModePadding
																																																																																																																																																																																																																																																			.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																		if (!exprNameModePadding
																																																																																																																																																																																																																																																				.equals(kdaJcu)) {
																																																																																																																																																																																																																																																			if (!exprNameModePadding
																																																																																																																																																																																																																																																					.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																				if (!exprNameModePadding
																																																																																																																																																																																																																																																						.equals(sbcJcu)) {
																																																																																																																																																																																																																																																					if (!exprNameModePadding
																																																																																																																																																																																																																																																							.equals(keyEncryption)) {
																																																																																																																																																																																																																																																						if (!exprNameModePadding
																																																																																																																																																																																																																																																								.equals(methodGetKey)) {
																																																																																																																																																																																																																																																							if (!exprNameModePadding
																																																																																																																																																																																																																																																									.equals(t2c)) {
																																																																																																																																																																																																																																																								if (!exprNameModePadding
																																																																																																																																																																																																																																																										.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																									if (!exprNameModePadding
																																																																																																																																																																																																																																																											.equals(kda)) {
																																																																																																																																																																																																																																																										if (!exprNameModePadding
																																																																																																																																																																																																																																																												.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																											if (!exprNameModePadding
																																																																																																																																																																																																																																																													.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																												if (!exprNameModePadding
																																																																																																																																																																																																																																																														.equals(methodEncryption)) {
																																																																																																																																																																																																																																																													if (!exprNameModePadding
																																																																																																																																																																																																																																																															.equals(task)) {
																																																																																																																																																																																																																																																														if (!exprNameModePadding
																																																																																																																																																																																																																																																																.equals(exprPwdName)) {
																																																																																																																																																																																																																																																															if (!exprNameModePadding
																																																																																																																																																																																																																																																																	.equals(sbc)) {
																																																																																																																																																																																																																																																																if (!exprNameModePadding
																																																																																																																																																																																																																																																																		.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																																																	if (!exprNameModePadding
																																																																																																																																																																																																																																																																			.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																		if (!exprNameModePadding
																																																																																																																																																																																																																																																																				.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																			if (!methodEncryption
																																																																																																																																																																																																																																																																					.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																				if (!methodEncryption
																																																																																																																																																																																																																																																																						.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																					if (!methodEncryption
																																																																																																																																																																																																																																																																							.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																						if (!methodEncryption
																																																																																																																																																																																																																																																																								.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																							if (!methodEncryption
																																																																																																																																																																																																																																																																									.equals(t2c)) {
																																																																																																																																																																																																																																																																								if (!methodEncryption
																																																																																																																																																																																																																																																																										.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																									if (!methodEncryption
																																																																																																																																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																										if (!methodEncryption
																																																																																																																																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																											if (!methodEncryption
																																																																																																																																																																																																																																																																													.equals(task)) {
																																																																																																																																																																																																																																																																												if (!methodEncryption
																																																																																																																																																																																																																																																																														.equals(sbc)) {
																																																																																																																																																																																																																																																																													if (!methodEncryption
																																																																																																																																																																																																																																																																															.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																														if (!exprPwdName
																																																																																																																																																																																																																																																																																.equals(javaPackage)) {
																																																																																																																																																																																																																																																																															if (!exprPwdName
																																																																																																																																																																																																																																																																																	.equals(exprRetGetKey)) {
																																																																																																																																																																																																																																																																																if (!exprPwdName
																																																																																																																																																																																																																																																																																		.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																	if (!exprPwdName
																																																																																																																																																																																																																																																																																			.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																		if (!exprPwdName
																																																																																																																																																																																																																																																																																				.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																			if (!exprPwdName
																																																																																																																																																																																																																																																																																					.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																				if (!exprPwdName
																																																																																																																																																																																																																																																																																						.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																					if (!exprPwdName
																																																																																																																																																																																																																																																																																							.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																						if (!exprPwdName
																																																																																																																																																																																																																																																																																								.equals(t2c)) {
																																																																																																																																																																																																																																																																																							if (!exprPwdName
																																																																																																																																																																																																																																																																																									.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																								if (!exprPwdName
																																																																																																																																																																																																																																																																																										.equals(kda)) {
																																																																																																																																																																																																																																																																																									if (!exprPwdName
																																																																																																																																																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																										if (!exprPwdName
																																																																																																																																																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																											if (!exprPwdName
																																																																																																																																																																																																																																																																																													.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																												if (!exprPwdName
																																																																																																																																																																																																																																																																																														.equals(task)) {
																																																																																																																																																																																																																																																																																													if (!exprPwdName
																																																																																																																																																																																																																																																																																															.equals(sbc)) {
																																																																																																																																																																																																																																																																																														if (!exprPwdName
																																																																																																																																																																																																																																																																																																.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																															if (!exprPwdName
																																																																																																																																																																																																																																																																																																	.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																if (!exprPwdName
																																																																																																																																																																																																																																																																																																		.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																																																	if (!sbc.equals(
																																																																																																																																																																																																																																																																																																			sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																		if (!sbc.equals(
																																																																																																																																																																																																																																																																																																				sbcJcu)) {
																																																																																																																																																																																																																																																																																																			if (!sbc.equals(
																																																																																																																																																																																																																																																																																																					t2c)) {
																																																																																																																																																																																																																																																																																																				if (!sbc.equals(
																																																																																																																																																																																																																																																																																																						statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																					if (!sbc.equals(
																																																																																																																																																																																																																																																																																																							task)) {
																																																																																																																																																																																																																																																																																																						if (!sbc.equals(
																																																																																																																																																																																																																																																																																																								statRetGetKey)) {
																																																																																																																																																																																																																																																																																																							if (!exprDataName
																																																																																																																																																																																																																																																																																																									.equals(exprIterationLiteral)) {
																																																																																																																																																																																																																																																																																																								if (!exprDataName
																																																																																																																																																																																																																																																																																																										.equals(javaPackage)) {
																																																																																																																																																																																																																																																																																																									if (!exprDataName
																																																																																																																																																																																																																																																																																																											.equals(exprRetGetKey)) {
																																																																																																																																																																																																																																																																																																										if (!exprDataName
																																																																																																																																																																																																																																																																																																												.equals(exprOutputSizeLiteral)) {
																																																																																																																																																																																																																																																																																																											if (!exprDataName
																																																																																																																																																																																																																																																																																																													.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																												if (!exprDataName
																																																																																																																																																																																																																																																																																																														.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																																													if (!exprDataName
																																																																																																																																																																																																																																																																																																															.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																																														if (!exprDataName
																																																																																																																																																																																																																																																																																																																.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																																															if (!exprDataName
																																																																																																																																																																																																																																																																																																																	.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																																																if (!exprDataName
																																																																																																																																																																																																																																																																																																																		.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																																																	if (!exprDataName
																																																																																																																																																																																																																																																																																																																			.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																		if (!exprDataName
																																																																																																																																																																																																																																																																																																																				.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																																																			if (!exprDataName
																																																																																																																																																																																																																																																																																																																					.equals(kda)) {
																																																																																																																																																																																																																																																																																																																				if (!exprDataName
																																																																																																																																																																																																																																																																																																																						.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																																																					if (!exprDataName
																																																																																																																																																																																																																																																																																																																							.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																						if (!exprDataName
																																																																																																																																																																																																																																																																																																																								.equals(exprKeyName)) {
																																																																																																																																																																																																																																																																																																																							if (!exprDataName
																																																																																																																																																																																																																																																																																																																									.equals(exprNameModePadding)) {
																																																																																																																																																																																																																																																																																																																								if (!exprDataName
																																																																																																																																																																																																																																																																																																																										.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																																																									if (!exprDataName
																																																																																																																																																																																																																																																																																																																											.equals(task)) {
																																																																																																																																																																																																																																																																																																																										if (!exprDataName
																																																																																																																																																																																																																																																																																																																												.equals(exprPwdName)) {
																																																																																																																																																																																																																																																																																																																											if (!exprDataName
																																																																																																																																																																																																																																																																																																																													.equals(sbc)) {
																																																																																																																																																																																																																																																																																																																												if (!exprDataName
																																																																																																																																																																																																																																																																																																																														.equals(exprRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																													if (!exprDataName
																																																																																																																																																																																																																																																																																																																															.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																																														if (!exprDataName
																																																																																																																																																																																																																																																																																																																																.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																																																																															if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																	.equals(javaPackage)) {
																																																																																																																																																																																																																																																																																																																																if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																		.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																																																	if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																			.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																																																																		if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																				.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																			if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																					.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																																																																				if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																						.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																																																																					if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																							.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																																																																						if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																								.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																																							if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																									.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																																																																								if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																										.equals(kda)) {
																																																																																																																																																																																																																																																																																																																																									if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																											.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																																																																										if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																												.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																											if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																													.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																																																																												if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																														.equals(task)) {
																																																																																																																																																																																																																																																																																																																																													if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																															.equals(sbc)) {
																																																																																																																																																																																																																																																																																																																																														if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																																.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																																																															if (!exprRetPerformEncryption
																																																																																																																																																																																																																																																																																																																																																	.equals(kda2Jcu)) {
																																																																																																																																																																																																																																																																																																																																																if (!statRetGetKey
																																																																																																																																																																																																																																																																																																																																																		.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																																																	if (!statRetGetKey
																																																																																																																																																																																																																																																																																																																																																			.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																																		if (!statRetGetKey
																																																																																																																																																																																																																																																																																																																																																				.equals(task)) {
																																																																																																																																																																																																																																																																																																																																																			if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																					.equals(sbc2Jcu)) {
																																																																																																																																																																																																																																																																																																																																																				if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																						.equals(kdaJcu)) {
																																																																																																																																																																																																																																																																																																																																																					if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																							.equals(methodPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																																						if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																								.equals(sbcJcu)) {
																																																																																																																																																																																																																																																																																																																																																							if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																									.equals(keyEncryption)) {
																																																																																																																																																																																																																																																																																																																																																								if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																										.equals(methodGetKey)) {
																																																																																																																																																																																																																																																																																																																																																									if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																											.equals(t2c)) {
																																																																																																																																																																																																																																																																																																																																																										if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																												.equals(pwdDeclaration)) {
																																																																																																																																																																																																																																																																																																																																																											if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																													.equals(methodPerformGetKey)) {
																																																																																																																																																																																																																																																																																																																																																												if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																														.equals(statRetPerformEncryption)) {
																																																																																																																																																																																																																																																																																																																																																													if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																															.equals(methodEncryption)) {
																																																																																																																																																																																																																																																																																																																																																														if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																																.equals(task)) {
																																																																																																																																																																																																																																																																																																																																																															if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																																	.equals(sbc)) {
																																																																																																																																																																																																																																																																																																																																																																if (!kda2Jcu
																																																																																																																																																																																																																																																																																																																																																																		.equals(statRetGetKey)) {
																																																																																																																																																																																																																																																																																																																																																																	return new Object[] {
																																																																																																																																																																																																																																																																																																																																																																			ruleresult,
																																																																																																																																																																																																																																																																																																																																																																			exprIterationLiteral,
																																																																																																																																																																																																																																																																																																																																																																			javaPackage,
																																																																																																																																																																																																																																																																																																																																																																			exprRetGetKey,
																																																																																																																																																																																																																																																																																																																																																																			exprOutputSizeLiteral,
																																																																																																																																																																																																																																																																																																																																																																			sbc2Jcu,
																																																																																																																																																																																																																																																																																																																																																																			kdaJcu,
																																																																																																																																																																																																																																																																																																																																																																			methodPerformEncryption,
																																																																																																																																																																																																																																																																																																																																																																			sbcJcu,
																																																																																																																																																																																																																																																																																																																																																																			keyEncryption,
																																																																																																																																																																																																																																																																																																																																																																			dataEncryption,
																																																																																																																																																																																																																																																																																																																																																																			methodGetKey,
																																																																																																																																																																																																																																																																																																																																																																			t2c,
																																																																																																																																																																																																																																																																																																																																																																			exprAlgNameLiteral,
																																																																																																																																																																																																																																																																																																																																																																			pwdDeclaration,
																																																																																																																																																																																																																																																																																																																																																																			kda,
																																																																																																																																																																																																																																																																																																																																																																			methodPerformGetKey,
																																																																																																																																																																																																																																																																																																																																																																			statRetPerformEncryption,
																																																																																																																																																																																																																																																																																																																																																																			exprKeyName,
																																																																																																																																																																																																																																																																																																																																																																			exprNameModePadding,
																																																																																																																																																																																																																																																																																																																																																																			methodEncryption,
																																																																																																																																																																																																																																																																																																																																																																			task,
																																																																																																																																																																																																																																																																																																																																																																			exprPwdName,
																																																																																																																																																																																																																																																																																																																																																																			sbc,
																																																																																																																																																																																																																																																																																																																																																																			exprDataName,
																																																																																																																																																																																																																																																																																																																																																																			exprRetPerformEncryption,
																																																																																																																																																																																																																																																																																																																																																																			statRetGetKey,
																																																																																																																																																																																																																																																																																																																																																																			kda2Jcu };
																																																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																																}
																																																																																																																																																																																																																																															}
																																																																																																																																																																																																																																														}
																																																																																																																																																																																																																																													}
																																																																																																																																																																																																																																												}
																																																																																																																																																																																																																																											}
																																																																																																																																																																																																																																										}
																																																																																																																																																																																																																																									}
																																																																																																																																																																																																																																								}
																																																																																																																																																																																																																																							}
																																																																																																																																																																																																																																						}
																																																																																																																																																																																																																																					}
																																																																																																																																																																																																																																				}
																																																																																																																																																																																																																																			}
																																																																																																																																																																																																																																		}
																																																																																																																																																																																																																																	}
																																																																																																																																																																																																																																}
																																																																																																																																																																																																																															}
																																																																																																																																																																																																																														}
																																																																																																																																																																																																																													}
																																																																																																																																																																																																																												}
																																																																																																																																																																																																																											}
																																																																																																																																																																																																																										}
																																																																																																																																																																																																																									}
																																																																																																																																																																																																																								}
																																																																																																																																																																																																																							}
																																																																																																																																																																																																																						}
																																																																																																																																																																																																																					}
																																																																																																																																																																																																																				}
																																																																																																																																																																																																																			}
																																																																																																																																																																																																																		}
																																																																																																																																																																																																																	}
																																																																																																																																																																																																																}
																																																																																																																																																																																																															}
																																																																																																																																																																																																														}
																																																																																																																																																																																																													}
																																																																																																																																																																																																												}
																																																																																																																																																																																																											}
																																																																																																																																																																																																										}
																																																																																																																																																																																																									}
																																																																																																																																																																																																								}
																																																																																																																																																																																																							}
																																																																																																																																																																																																						}
																																																																																																																																																																																																					}
																																																																																																																																																																																																				}
																																																																																																																																																																																																			}
																																																																																																																																																																																																		}
																																																																																																																																																																																																	}
																																																																																																																																																																																																}
																																																																																																																																																																																															}
																																																																																																																																																																																														}
																																																																																																																																																																																													}
																																																																																																																																																																																												}
																																																																																																																																																																																											}
																																																																																																																																																																																										}
																																																																																																																																																																																									}
																																																																																																																																																																																								}
																																																																																																																																																																																							}
																																																																																																																																																																																						}
																																																																																																																																																																																					}
																																																																																																																																																																																				}
																																																																																																																																																																																			}
																																																																																																																																																																																		}
																																																																																																																																																																																	}
																																																																																																																																																																																}
																																																																																																																																																																															}
																																																																																																																																																																														}
																																																																																																																																																																													}
																																																																																																																																																																												}
																																																																																																																																																																											}
																																																																																																																																																																										}
																																																																																																																																																																									}
																																																																																																																																																																								}
																																																																																																																																																																							}
																																																																																																																																																																						}
																																																																																																																																																																					}
																																																																																																																																																																				}
																																																																																																																																																																			}
																																																																																																																																																																		}
																																																																																																																																																																	}
																																																																																																																																																																}
																																																																																																																																																															}
																																																																																																																																																														}
																																																																																																																																																													}
																																																																																																																																																												}
																																																																																																																																																											}
																																																																																																																																																										}
																																																																																																																																																									}
																																																																																																																																																								}
																																																																																																																																																							}
																																																																																																																																																						}
																																																																																																																																																					}
																																																																																																																																																				}
																																																																																																																																																			}
																																																																																																																																																		}
																																																																																																																																																	}
																																																																																																																																																}
																																																																																																																																															}
																																																																																																																																														}
																																																																																																																																													}
																																																																																																																																												}
																																																																																																																																											}
																																																																																																																																										}
																																																																																																																																									}
																																																																																																																																								}
																																																																																																																																							}
																																																																																																																																						}
																																																																																																																																					}
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}
																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}
																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}
																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}
																																																																																																								}
																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}
																																																																																												}
																																																																																											}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_11_3_bookkeepingforedges_greenBBBBBBBBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFFFF(
			PerformRuleResult ruleresult, EObject exprIterationLiteral, EObject javaPackage, EObject exprRetGetKey,
			EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu, EObject methodPerformEncryption,
			EObject sbcJcu, EObject keyEncryption, EObject dataEncryption, EObject methodGetKey, EObject t2c,
			EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda, EObject methodPerformGetKey,
			EObject statRetPerformEncryption, EObject exprKeyName, EObject exprNameModePadding,
			EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc, EObject exprDataName,
			EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__statRetGetKey____statements = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprPwdName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge statRetGetKey__exprRetGetKey____expr = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge t2c__task____source = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge task__kda____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kda2Jcu__kda____source = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__statRetPerformEncryption____statements = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sbc2Jcu__sbcJcu____target = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__keyEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__pwdDeclaration____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__sbcJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__kdaJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge task__sbc____algorithms = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kda2Jcu__kdaJcu____target = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__dataEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge t2c__javaPackage____target = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodPerformGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sbc2Jcu__sbc____source = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodPerformEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		String ruleresult_ruleName_prime = "PasswordBasedEncryption";
		String exprRetPerformEncryption__exprKeyName____arguments_name_prime = "arguments";
		String methodGetKey__statRetGetKey____statements_name_prime = "statements";
		String exprRetGetKey__exprPwdName____arguments_name_prime = "arguments";
		String statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime = "expr";
		String statRetGetKey__exprRetGetKey____expr_name_prime = "expr";
		String kdaJcu__methodGetKey____methods_name_prime = "methods";
		String sbcJcu__methodEncryption____methods_name_prime = "methods";
		String t2c__task____source_name_prime = "source";
		String exprRetPerformEncryption__exprDataName____arguments_name_prime = "arguments";
		String task__kda____algorithms_name_prime = "algorithms";
		String kda2Jcu__kda____source_name_prime = "source";
		String methodEncryption__statRetPerformEncryption____statements_name_prime = "statements";
		String sbc2Jcu__sbcJcu____target_name_prime = "target";
		String methodEncryption__keyEncryption____params_name_prime = "params";
		String methodGetKey__pwdDeclaration____params_name_prime = "params";
		String javaPackage__sbcJcu____cunits_name_prime = "cunits";
		String javaPackage__kdaJcu____cunits_name_prime = "cunits";
		String task__sbc____algorithms_name_prime = "algorithms";
		String kda2Jcu__kdaJcu____target_name_prime = "target";
		String methodEncryption__dataEncryption____params_name_prime = "params";
		String t2c__javaPackage____target_name_prime = "target";
		String exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime = "arguments";
		String kdaJcu__methodPerformGetKey____methods_name_prime = "methods";
		String exprRetPerformEncryption__exprNameModePadding____arguments_name_prime = "arguments";
		String sbc2Jcu__sbc____source_name_prime = "source";
		String sbcJcu__methodPerformEncryption____methods_name_prime = "methods";
		String exprRetGetKey__exprAlgNameLiteral____arguments_name_prime = "arguments";
		String exprRetGetKey__exprIterationLiteral____arguments_name_prime = "arguments";
		exprRetPerformEncryption__exprKeyName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprKeyName____arguments.setTrg(exprKeyName);
		ruleresult.getTranslatedEdges().add(exprRetPerformEncryption__exprKeyName____arguments);
		methodGetKey__statRetGetKey____statements.setSrc(methodGetKey);
		methodGetKey__statRetGetKey____statements.setTrg(statRetGetKey);
		ruleresult.getTranslatedEdges().add(methodGetKey__statRetGetKey____statements);
		exprRetGetKey__exprPwdName____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprPwdName____arguments.setTrg(exprPwdName);
		ruleresult.getTranslatedEdges().add(exprRetGetKey__exprPwdName____arguments);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setSrc(statRetPerformEncryption);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setTrg(exprRetPerformEncryption);
		ruleresult.getTranslatedEdges().add(statRetPerformEncryption__exprRetPerformEncryption____expr);
		statRetGetKey__exprRetGetKey____expr.setSrc(statRetGetKey);
		statRetGetKey__exprRetGetKey____expr.setTrg(exprRetGetKey);
		ruleresult.getTranslatedEdges().add(statRetGetKey__exprRetGetKey____expr);
		kdaJcu__methodGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodGetKey____methods.setTrg(methodGetKey);
		ruleresult.getTranslatedEdges().add(kdaJcu__methodGetKey____methods);
		sbcJcu__methodEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodEncryption____methods.setTrg(methodEncryption);
		ruleresult.getTranslatedEdges().add(sbcJcu__methodEncryption____methods);
		t2c__task____source.setSrc(t2c);
		t2c__task____source.setTrg(task);
		ruleresult.getCreatedEdges().add(t2c__task____source);
		exprRetPerformEncryption__exprDataName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprDataName____arguments.setTrg(exprDataName);
		ruleresult.getTranslatedEdges().add(exprRetPerformEncryption__exprDataName____arguments);
		task__kda____algorithms.setSrc(task);
		task__kda____algorithms.setTrg(kda);
		ruleresult.getCreatedEdges().add(task__kda____algorithms);
		kda2Jcu__kda____source.setSrc(kda2Jcu);
		kda2Jcu__kda____source.setTrg(kda);
		ruleresult.getCreatedEdges().add(kda2Jcu__kda____source);
		methodEncryption__statRetPerformEncryption____statements.setSrc(methodEncryption);
		methodEncryption__statRetPerformEncryption____statements.setTrg(statRetPerformEncryption);
		ruleresult.getTranslatedEdges().add(methodEncryption__statRetPerformEncryption____statements);
		sbc2Jcu__sbcJcu____target.setSrc(sbc2Jcu);
		sbc2Jcu__sbcJcu____target.setTrg(sbcJcu);
		ruleresult.getCreatedEdges().add(sbc2Jcu__sbcJcu____target);
		methodEncryption__keyEncryption____params.setSrc(methodEncryption);
		methodEncryption__keyEncryption____params.setTrg(keyEncryption);
		ruleresult.getTranslatedEdges().add(methodEncryption__keyEncryption____params);
		methodGetKey__pwdDeclaration____params.setSrc(methodGetKey);
		methodGetKey__pwdDeclaration____params.setTrg(pwdDeclaration);
		ruleresult.getTranslatedEdges().add(methodGetKey__pwdDeclaration____params);
		javaPackage__sbcJcu____cunits.setSrc(javaPackage);
		javaPackage__sbcJcu____cunits.setTrg(sbcJcu);
		ruleresult.getTranslatedEdges().add(javaPackage__sbcJcu____cunits);
		javaPackage__kdaJcu____cunits.setSrc(javaPackage);
		javaPackage__kdaJcu____cunits.setTrg(kdaJcu);
		ruleresult.getTranslatedEdges().add(javaPackage__kdaJcu____cunits);
		task__sbc____algorithms.setSrc(task);
		task__sbc____algorithms.setTrg(sbc);
		ruleresult.getCreatedEdges().add(task__sbc____algorithms);
		kda2Jcu__kdaJcu____target.setSrc(kda2Jcu);
		kda2Jcu__kdaJcu____target.setTrg(kdaJcu);
		ruleresult.getCreatedEdges().add(kda2Jcu__kdaJcu____target);
		methodEncryption__dataEncryption____params.setSrc(methodEncryption);
		methodEncryption__dataEncryption____params.setTrg(dataEncryption);
		ruleresult.getTranslatedEdges().add(methodEncryption__dataEncryption____params);
		t2c__javaPackage____target.setSrc(t2c);
		t2c__javaPackage____target.setTrg(javaPackage);
		ruleresult.getCreatedEdges().add(t2c__javaPackage____target);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setTrg(exprOutputSizeLiteral);
		ruleresult.getTranslatedEdges().add(exprRetGetKey__exprOutputSizeLiteral____arguments);
		kdaJcu__methodPerformGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodPerformGetKey____methods.setTrg(methodPerformGetKey);
		ruleresult.getTranslatedEdges().add(kdaJcu__methodPerformGetKey____methods);
		exprRetPerformEncryption__exprNameModePadding____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprNameModePadding____arguments.setTrg(exprNameModePadding);
		ruleresult.getTranslatedEdges().add(exprRetPerformEncryption__exprNameModePadding____arguments);
		sbc2Jcu__sbc____source.setSrc(sbc2Jcu);
		sbc2Jcu__sbc____source.setTrg(sbc);
		ruleresult.getCreatedEdges().add(sbc2Jcu__sbc____source);
		sbcJcu__methodPerformEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodPerformEncryption____methods.setTrg(methodPerformEncryption);
		ruleresult.getTranslatedEdges().add(sbcJcu__methodPerformEncryption____methods);
		exprRetGetKey__exprAlgNameLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprAlgNameLiteral____arguments.setTrg(exprAlgNameLiteral);
		ruleresult.getTranslatedEdges().add(exprRetGetKey__exprAlgNameLiteral____arguments);
		exprRetGetKey__exprIterationLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprIterationLiteral____arguments.setTrg(exprIterationLiteral);
		ruleresult.getTranslatedEdges().add(exprRetGetKey__exprIterationLiteral____arguments);
		ruleresult.setRuleName(ruleresult_ruleName_prime);
		exprRetPerformEncryption__exprKeyName____arguments
				.setName(exprRetPerformEncryption__exprKeyName____arguments_name_prime);
		methodGetKey__statRetGetKey____statements.setName(methodGetKey__statRetGetKey____statements_name_prime);
		exprRetGetKey__exprPwdName____arguments.setName(exprRetGetKey__exprPwdName____arguments_name_prime);
		statRetPerformEncryption__exprRetPerformEncryption____expr
				.setName(statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime);
		statRetGetKey__exprRetGetKey____expr.setName(statRetGetKey__exprRetGetKey____expr_name_prime);
		kdaJcu__methodGetKey____methods.setName(kdaJcu__methodGetKey____methods_name_prime);
		sbcJcu__methodEncryption____methods.setName(sbcJcu__methodEncryption____methods_name_prime);
		t2c__task____source.setName(t2c__task____source_name_prime);
		exprRetPerformEncryption__exprDataName____arguments
				.setName(exprRetPerformEncryption__exprDataName____arguments_name_prime);
		task__kda____algorithms.setName(task__kda____algorithms_name_prime);
		kda2Jcu__kda____source.setName(kda2Jcu__kda____source_name_prime);
		methodEncryption__statRetPerformEncryption____statements
				.setName(methodEncryption__statRetPerformEncryption____statements_name_prime);
		sbc2Jcu__sbcJcu____target.setName(sbc2Jcu__sbcJcu____target_name_prime);
		methodEncryption__keyEncryption____params.setName(methodEncryption__keyEncryption____params_name_prime);
		methodGetKey__pwdDeclaration____params.setName(methodGetKey__pwdDeclaration____params_name_prime);
		javaPackage__sbcJcu____cunits.setName(javaPackage__sbcJcu____cunits_name_prime);
		javaPackage__kdaJcu____cunits.setName(javaPackage__kdaJcu____cunits_name_prime);
		task__sbc____algorithms.setName(task__sbc____algorithms_name_prime);
		kda2Jcu__kdaJcu____target.setName(kda2Jcu__kdaJcu____target_name_prime);
		methodEncryption__dataEncryption____params.setName(methodEncryption__dataEncryption____params_name_prime);
		t2c__javaPackage____target.setName(t2c__javaPackage____target_name_prime);
		exprRetGetKey__exprOutputSizeLiteral____arguments
				.setName(exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime);
		kdaJcu__methodPerformGetKey____methods.setName(kdaJcu__methodPerformGetKey____methods_name_prime);
		exprRetPerformEncryption__exprNameModePadding____arguments
				.setName(exprRetPerformEncryption__exprNameModePadding____arguments_name_prime);
		sbc2Jcu__sbc____source.setName(sbc2Jcu__sbc____source_name_prime);
		sbcJcu__methodPerformEncryption____methods.setName(sbcJcu__methodPerformEncryption____methods_name_prime);
		exprRetGetKey__exprAlgNameLiteral____arguments
				.setName(exprRetGetKey__exprAlgNameLiteral____arguments_name_prime);
		exprRetGetKey__exprIterationLiteral____arguments
				.setName(exprRetGetKey__exprIterationLiteral____arguments_name_prime);
		return new Object[] { ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				sbc2Jcu, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
				exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption,
				statRetGetKey, kda2Jcu, exprRetPerformEncryption__exprKeyName____arguments,
				methodGetKey__statRetGetKey____statements, exprRetGetKey__exprPwdName____arguments,
				statRetPerformEncryption__exprRetPerformEncryption____expr, statRetGetKey__exprRetGetKey____expr,
				kdaJcu__methodGetKey____methods, sbcJcu__methodEncryption____methods, t2c__task____source,
				exprRetPerformEncryption__exprDataName____arguments, task__kda____algorithms, kda2Jcu__kda____source,
				methodEncryption__statRetPerformEncryption____statements, sbc2Jcu__sbcJcu____target,
				methodEncryption__keyEncryption____params, methodGetKey__pwdDeclaration____params,
				javaPackage__sbcJcu____cunits, javaPackage__kdaJcu____cunits, task__sbc____algorithms,
				kda2Jcu__kdaJcu____target, methodEncryption__dataEncryption____params, t2c__javaPackage____target,
				exprRetGetKey__exprOutputSizeLiteral____arguments, kdaJcu__methodPerformGetKey____methods,
				exprRetPerformEncryption__exprNameModePadding____arguments, sbc2Jcu__sbc____source,
				sbcJcu__methodPerformEncryption____methods, exprRetGetKey__exprAlgNameLiteral____arguments,
				exprRetGetKey__exprIterationLiteral____arguments };
	}

	public static final void pattern_PasswordBasedEncryption_11_5_registerobjects_expressionBBBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, PerformRuleResult ruleresult, EObject exprIterationLiteral,
			EObject javaPackage, EObject exprRetGetKey, EObject exprOutputSizeLiteral, EObject sbc2Jcu, EObject kdaJcu,
			EObject methodPerformEncryption, EObject sbcJcu, EObject keyEncryption, EObject dataEncryption,
			EObject methodGetKey, EObject t2c, EObject exprAlgNameLiteral, EObject pwdDeclaration, EObject kda,
			EObject methodPerformGetKey, EObject statRetPerformEncryption, EObject exprKeyName,
			EObject exprNameModePadding, EObject methodEncryption, EObject task, EObject exprPwdName, EObject sbc,
			EObject exprDataName, EObject exprRetPerformEncryption, EObject statRetGetKey, EObject kda2Jcu) {
		_this.registerObjects_BWD(ruleresult, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				sbc2Jcu, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c,
				exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption,
				statRetGetKey, kda2Jcu);

	}

	public static final PerformRuleResult pattern_PasswordBasedEncryption_11_6_expressionFB(
			PerformRuleResult ruleresult) {
		PerformRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_1_preparereturnvalue_bindingFB(
			PasswordBasedEncryption _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass eClass = _localVariable_0;
		if (eClass != null) {
			return new Object[] { eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_1_preparereturnvalue_blackFBB(EClass eClass,
			PasswordBasedEncryption _this) {
		for (EOperation performOperation : eClass.getEOperations()) {
			String performOperation_name = performOperation.getName();
			if (performOperation_name.equals("perform_BWD")) {
				return new Object[] { performOperation, eClass, _this };
			}

		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_1_preparereturnvalue_bindingAndBlackFFB(
			PasswordBasedEncryption _this) {
		Object[] result_pattern_PasswordBasedEncryption_12_1_preparereturnvalue_binding = pattern_PasswordBasedEncryption_12_1_preparereturnvalue_bindingFB(
				_this);
		if (result_pattern_PasswordBasedEncryption_12_1_preparereturnvalue_binding != null) {
			EClass eClass = (EClass) result_pattern_PasswordBasedEncryption_12_1_preparereturnvalue_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_12_1_preparereturnvalue_black = pattern_PasswordBasedEncryption_12_1_preparereturnvalue_blackFBB(
					eClass, _this);
			if (result_pattern_PasswordBasedEncryption_12_1_preparereturnvalue_black != null) {
				EOperation performOperation = (EOperation) result_pattern_PasswordBasedEncryption_12_1_preparereturnvalue_black[0];

				return new Object[] { performOperation, eClass, _this };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_1_preparereturnvalue_greenBF(
			EOperation performOperation) {
		IsApplicableRuleResult ruleresult = RuntimeFactory.eINSTANCE.createIsApplicableRuleResult();
		boolean ruleresult_success_prime = Boolean.valueOf(false);
		String ruleresult_rule_prime = "PasswordBasedEncryption";
		ruleresult.setPerformOperation(performOperation);
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		ruleresult.setRule(ruleresult_rule_prime);
		return new Object[] { performOperation, ruleresult };
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_2_corematch_bindingFFFFFFFFFFFFFFFFFFFFFB(
			Match match) {
		EObject _localVariable_0 = match.getObject("exprIterationLiteral");
		EObject _localVariable_1 = match.getObject("javaPackage");
		EObject _localVariable_2 = match.getObject("exprRetGetKey");
		EObject _localVariable_3 = match.getObject("exprOutputSizeLiteral");
		EObject _localVariable_4 = match.getObject("kdaJcu");
		EObject _localVariable_5 = match.getObject("methodPerformEncryption");
		EObject _localVariable_6 = match.getObject("sbcJcu");
		EObject _localVariable_7 = match.getObject("keyEncryption");
		EObject _localVariable_8 = match.getObject("dataEncryption");
		EObject _localVariable_9 = match.getObject("methodGetKey");
		EObject _localVariable_10 = match.getObject("exprAlgNameLiteral");
		EObject _localVariable_11 = match.getObject("pwdDeclaration");
		EObject _localVariable_12 = match.getObject("methodPerformGetKey");
		EObject _localVariable_13 = match.getObject("statRetPerformEncryption");
		EObject _localVariable_14 = match.getObject("exprKeyName");
		EObject _localVariable_15 = match.getObject("exprNameModePadding");
		EObject _localVariable_16 = match.getObject("methodEncryption");
		EObject _localVariable_17 = match.getObject("exprPwdName");
		EObject _localVariable_18 = match.getObject("exprDataName");
		EObject _localVariable_19 = match.getObject("exprRetPerformEncryption");
		EObject _localVariable_20 = match.getObject("statRetGetKey");
		EObject tmpExprIterationLiteral = _localVariable_0;
		EObject tmpJavaPackage = _localVariable_1;
		EObject tmpExprRetGetKey = _localVariable_2;
		EObject tmpExprOutputSizeLiteral = _localVariable_3;
		EObject tmpKdaJcu = _localVariable_4;
		EObject tmpMethodPerformEncryption = _localVariable_5;
		EObject tmpSbcJcu = _localVariable_6;
		EObject tmpKeyEncryption = _localVariable_7;
		EObject tmpDataEncryption = _localVariable_8;
		EObject tmpMethodGetKey = _localVariable_9;
		EObject tmpExprAlgNameLiteral = _localVariable_10;
		EObject tmpPwdDeclaration = _localVariable_11;
		EObject tmpMethodPerformGetKey = _localVariable_12;
		EObject tmpStatRetPerformEncryption = _localVariable_13;
		EObject tmpExprKeyName = _localVariable_14;
		EObject tmpExprNameModePadding = _localVariable_15;
		EObject tmpMethodEncryption = _localVariable_16;
		EObject tmpExprPwdName = _localVariable_17;
		EObject tmpExprDataName = _localVariable_18;
		EObject tmpExprRetPerformEncryption = _localVariable_19;
		EObject tmpStatRetGetKey = _localVariable_20;
		if (tmpExprIterationLiteral instanceof JavaLiteral) {
			JavaLiteral exprIterationLiteral = (JavaLiteral) tmpExprIterationLiteral;
			if (tmpJavaPackage instanceof JavaPackage) {
				JavaPackage javaPackage = (JavaPackage) tmpJavaPackage;
				if (tmpExprRetGetKey instanceof JavaMethodInvocation) {
					JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) tmpExprRetGetKey;
					if (tmpExprOutputSizeLiteral instanceof JavaLiteral) {
						JavaLiteral exprOutputSizeLiteral = (JavaLiteral) tmpExprOutputSizeLiteral;
						if (tmpKdaJcu instanceof JavaCompilationUnit) {
							JavaCompilationUnit kdaJcu = (JavaCompilationUnit) tmpKdaJcu;
							if (tmpMethodPerformEncryption instanceof JavaOpaqueMethod) {
								JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) tmpMethodPerformEncryption;
								if (tmpSbcJcu instanceof JavaCompilationUnit) {
									JavaCompilationUnit sbcJcu = (JavaCompilationUnit) tmpSbcJcu;
									if (tmpKeyEncryption instanceof JavaVariableDeclaration) {
										JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) tmpKeyEncryption;
										if (tmpDataEncryption instanceof JavaVariableDeclaration) {
											JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) tmpDataEncryption;
											if (tmpMethodGetKey instanceof JavaWorkflowMethod) {
												JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) tmpMethodGetKey;
												if (tmpExprAlgNameLiteral instanceof JavaLiteral) {
													JavaLiteral exprAlgNameLiteral = (JavaLiteral) tmpExprAlgNameLiteral;
													if (tmpPwdDeclaration instanceof JavaVariableDeclaration) {
														JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) tmpPwdDeclaration;
														if (tmpMethodPerformGetKey instanceof JavaOpaqueMethod) {
															JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) tmpMethodPerformGetKey;
															if (tmpStatRetPerformEncryption instanceof JavaStatement) {
																JavaStatement statRetPerformEncryption = (JavaStatement) tmpStatRetPerformEncryption;
																if (tmpExprKeyName instanceof JavaName) {
																	JavaName exprKeyName = (JavaName) tmpExprKeyName;
																	if (tmpExprNameModePadding instanceof JavaLiteral) {
																		JavaLiteral exprNameModePadding = (JavaLiteral) tmpExprNameModePadding;
																		if (tmpMethodEncryption instanceof JavaWorkflowMethod) {
																			JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) tmpMethodEncryption;
																			if (tmpExprPwdName instanceof JavaName) {
																				JavaName exprPwdName = (JavaName) tmpExprPwdName;
																				if (tmpExprDataName instanceof JavaName) {
																					JavaName exprDataName = (JavaName) tmpExprDataName;
																					if (tmpExprRetPerformEncryption instanceof JavaMethodInvocation) {
																						JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) tmpExprRetPerformEncryption;
																						if (tmpStatRetGetKey instanceof JavaStatement) {
																							JavaStatement statRetGetKey = (JavaStatement) tmpStatRetGetKey;
																							return new Object[] {
																									exprIterationLiteral,
																									javaPackage,
																									exprRetGetKey,
																									exprOutputSizeLiteral,
																									kdaJcu,
																									methodPerformEncryption,
																									sbcJcu,
																									keyEncryption,
																									dataEncryption,
																									methodGetKey,
																									exprAlgNameLiteral,
																									pwdDeclaration,
																									methodPerformGetKey,
																									statRetPerformEncryption,
																									exprKeyName,
																									exprNameModePadding,
																									methodEncryption,
																									exprPwdName,
																									exprDataName,
																									exprRetPerformEncryption,
																									statRetGetKey,
																									match };
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_PasswordBasedEncryption_12_2_corematch_blackBBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey,
			Match match) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			int exprIterationLiteral_index = exprIterationLiteral
																					.getIndex();
																			if (Integer
																					.valueOf(exprIterationLiteral_index)
																					.equals(Integer.valueOf(2))) {
																				String exprRetGetKey_name = exprRetGetKey
																						.getName();
																				if (exprRetGetKey_name
																						.equals("performGetKey")) {
																					int exprOutputSizeLiteral_index = exprOutputSizeLiteral
																							.getIndex();
																					if (Integer.valueOf(
																							exprOutputSizeLiteral_index)
																							.equals(Integer
																									.valueOf(3))) {
																						String kdaJcu_name = kdaJcu
																								.getName();
																						if (kdaJcu_name
																								.equals("KeyDeriv")) {
																							String methodPerformEncryption_modifier = methodPerformEncryption
																									.getModifier();
																							if (methodPerformEncryption_modifier
																									.equals("private")) {
																								String methodPerformEncryption_name = methodPerformEncryption
																										.getName();
																								if (methodPerformEncryption_name
																										.equals("performEncryption")) {
																									String methodPerformEncryption_type = methodPerformEncryption
																											.getType();
																									if (methodPerformEncryption_type
																											.equals("byte[] ")) {
																										String keyEncryption_type = keyEncryption
																												.getType();
																										if (keyEncryption_type
																												.equals("SecretKey")) {
																											int keyEncryption_index = keyEncryption
																													.getIndex();
																											if (Integer
																													.valueOf(
																															keyEncryption_index)
																													.equals(Integer
																															.valueOf(
																																	1))) {
																												String keyEncryption_name = keyEncryption
																														.getName();
																												if (keyEncryption_name
																														.equals("key")) {
																													int dataEncryption_index = dataEncryption
																															.getIndex();
																													if (Integer
																															.valueOf(
																																	dataEncryption_index)
																															.equals(Integer
																																	.valueOf(
																																			0))) {
																														String dataEncryption_type = dataEncryption
																																.getType();
																														if (dataEncryption_type
																																.equals("byte[]")) {
																															String dataEncryption_name = dataEncryption
																																	.getName();
																															if (dataEncryption_name
																																	.equals("data")) {
																																String methodGetKey_modifier = methodGetKey
																																		.getModifier();
																																if (methodGetKey_modifier
																																		.equals("public")) {
																																	String methodGetKey_type = methodGetKey
																																			.getType();
																																	if (methodGetKey_type
																																			.equals("SecretKey ")) {
																																		String methodGetKey_name = methodGetKey
																																				.getName();
																																		if (methodGetKey_name
																																				.equals("getKey")) {
																																			int exprAlgNameLiteral_index = exprAlgNameLiteral
																																					.getIndex();
																																			if (Integer
																																					.valueOf(
																																							exprAlgNameLiteral_index)
																																					.equals(Integer
																																							.valueOf(
																																									1))) {
																																				String pwdDeclaration_name = pwdDeclaration
																																						.getName();
																																				if (pwdDeclaration_name
																																						.equals("pwd")) {
																																					int pwdDeclaration_index = pwdDeclaration
																																							.getIndex();
																																					if (Integer
																																							.valueOf(
																																									pwdDeclaration_index)
																																							.equals(Integer
																																									.valueOf(
																																											0))) {
																																						String pwdDeclaration_type = pwdDeclaration
																																								.getType();
																																						if (pwdDeclaration_type
																																								.equals("char[]")) {
																																							String methodPerformGetKey_name = methodPerformGetKey
																																									.getName();
																																							if (methodPerformGetKey_name
																																									.equals("performGetKey")) {
																																								String methodPerformGetKey_type = methodPerformGetKey
																																										.getType();
																																								if (methodPerformGetKey_type
																																										.equals("SecretKey ")) {
																																									String methodPerformGetKey_modifier = methodPerformGetKey
																																											.getModifier();
																																									if (methodPerformGetKey_modifier
																																											.equals("private")) {
																																										boolean statRetPerformEncryption_return = statRetPerformEncryption
																																												.isReturn();
																																										if (Boolean
																																												.valueOf(
																																														statRetPerformEncryption_return)
																																												.equals(Boolean
																																														.valueOf(
																																																true))) {
																																											int exprKeyName_index = exprKeyName
																																													.getIndex();
																																											if (Integer
																																													.valueOf(
																																															exprKeyName_index)
																																													.equals(Integer
																																															.valueOf(
																																																	1))) {
																																												String exprKeyName_identifier = exprKeyName
																																														.getIdentifier();
																																												if (exprKeyName_identifier
																																														.equals("key")) {
																																													int exprNameModePadding_index = exprNameModePadding
																																															.getIndex();
																																													if (Integer
																																															.valueOf(
																																																	exprNameModePadding_index)
																																															.equals(Integer
																																																	.valueOf(
																																																			2))) {
																																														String methodEncryption_type = methodEncryption
																																																.getType();
																																														if (methodEncryption_type
																																																.equals("byte[] ")) {
																																															String methodEncryption_modifier = methodEncryption
																																																	.getModifier();
																																															if (methodEncryption_modifier
																																																	.equals("public")) {
																																																String methodEncryption_name = methodEncryption
																																																		.getName();
																																																if (methodEncryption_name
																																																		.equals("encrypt")) {
																																																	String exprPwdName_identifier = exprPwdName
																																																			.getIdentifier();
																																																	if (exprPwdName_identifier
																																																			.equals("pwd")) {
																																																		int exprPwdName_index = exprPwdName
																																																				.getIndex();
																																																		if (Integer
																																																				.valueOf(
																																																						exprPwdName_index)
																																																				.equals(Integer
																																																						.valueOf(
																																																								0))) {
																																																			int exprDataName_index = exprDataName
																																																					.getIndex();
																																																			if (Integer
																																																					.valueOf(
																																																							exprDataName_index)
																																																					.equals(Integer
																																																							.valueOf(
																																																									0))) {
																																																				String exprDataName_identifier = exprDataName
																																																						.getIdentifier();
																																																				if (exprDataName_identifier
																																																						.equals("data")) {
																																																					String exprRetPerformEncryption_name = exprRetPerformEncryption
																																																							.getName();
																																																					if (exprRetPerformEncryption_name
																																																							.equals("performEncryption")) {
																																																						boolean statRetGetKey_return = statRetGetKey
																																																								.isReturn();
																																																						if (Boolean
																																																								.valueOf(
																																																										statRetGetKey_return)
																																																								.equals(Boolean
																																																										.valueOf(
																																																												true))) {
																																																							_result.add(
																																																									new Object[] {
																																																											exprIterationLiteral,
																																																											javaPackage,
																																																											exprRetGetKey,
																																																											exprOutputSizeLiteral,
																																																											kdaJcu,
																																																											methodPerformEncryption,
																																																											sbcJcu,
																																																											keyEncryption,
																																																											dataEncryption,
																																																											methodGetKey,
																																																											exprAlgNameLiteral,
																																																											pwdDeclaration,
																																																											methodPerformGetKey,
																																																											statRetPerformEncryption,
																																																											exprKeyName,
																																																											exprNameModePadding,
																																																											methodEncryption,
																																																											exprPwdName,
																																																											exprDataName,
																																																											exprRetPerformEncryption,
																																																											statRetGetKey,
																																																											match });
																																																						}

																																																					}

																																																				}

																																																			}

																																																		}

																																																	}

																																																}

																																															}

																																														}

																																													}

																																												}

																																											}

																																										}

																																									}

																																								}

																																							}

																																						}

																																					}

																																				}

																																			}

																																		}

																																	}

																																}

																															}

																														}

																													}

																												}

																											}

																										}

																									}

																								}

																							}

																						}

																					}

																				}

																			}

																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return _result;
	}

	public static final Iterable<Object[]> pattern_PasswordBasedEncryption_12_3_findcontext_blackBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			if (exprRetPerformEncryption.getArguments()
																					.contains(exprKeyName)) {
																				if (methodGetKey.getStatements()
																						.contains(statRetGetKey)) {
																					if (exprRetGetKey.getArguments()
																							.contains(exprPwdName)) {
																						if (exprRetPerformEncryption
																								.equals(statRetPerformEncryption
																										.getExpr())) {
																							if (exprRetGetKey.equals(
																									statRetGetKey
																											.getExpr())) {
																								if (kdaJcu.getMethods()
																										.contains(
																												methodGetKey)) {
																									if (sbcJcu
																											.getMethods()
																											.contains(
																													methodEncryption)) {
																										if (exprRetPerformEncryption
																												.getArguments()
																												.contains(
																														exprDataName)) {
																											if (methodEncryption
																													.getStatements()
																													.contains(
																															statRetPerformEncryption)) {
																												if (methodEncryption
																														.getParams()
																														.contains(
																																keyEncryption)) {
																													if (methodGetKey
																															.getParams()
																															.contains(
																																	pwdDeclaration)) {
																														if (javaPackage
																																.getCunits()
																																.contains(
																																		sbcJcu)) {
																															if (javaPackage
																																	.getCunits()
																																	.contains(
																																			kdaJcu)) {
																																if (methodEncryption
																																		.getParams()
																																		.contains(
																																				dataEncryption)) {
																																	if (exprRetGetKey
																																			.getArguments()
																																			.contains(
																																					exprOutputSizeLiteral)) {
																																		if (kdaJcu
																																				.getMethods()
																																				.contains(
																																						methodPerformGetKey)) {
																																			if (exprRetPerformEncryption
																																					.getArguments()
																																					.contains(
																																							exprNameModePadding)) {
																																				if (sbcJcu
																																						.getMethods()
																																						.contains(
																																								methodPerformEncryption)) {
																																					if (exprRetGetKey
																																							.getArguments()
																																							.contains(
																																									exprAlgNameLiteral)) {
																																						if (exprRetGetKey
																																								.getArguments()
																																								.contains(
																																										exprIterationLiteral)) {
																																							int exprIterationLiteral_index = exprIterationLiteral
																																									.getIndex();
																																							if (Integer
																																									.valueOf(
																																											exprIterationLiteral_index)
																																									.equals(Integer
																																											.valueOf(
																																													2))) {
																																								String exprRetGetKey_name = exprRetGetKey
																																										.getName();
																																								if (exprRetGetKey_name
																																										.equals("performGetKey")) {
																																									int exprOutputSizeLiteral_index = exprOutputSizeLiteral
																																											.getIndex();
																																									if (Integer
																																											.valueOf(
																																													exprOutputSizeLiteral_index)
																																											.equals(Integer
																																													.valueOf(
																																															3))) {
																																										String kdaJcu_name = kdaJcu
																																												.getName();
																																										if (kdaJcu_name
																																												.equals("KeyDeriv")) {
																																											String methodPerformEncryption_modifier = methodPerformEncryption
																																													.getModifier();
																																											if (methodPerformEncryption_modifier
																																													.equals("private")) {
																																												String methodPerformEncryption_name = methodPerformEncryption
																																														.getName();
																																												if (methodPerformEncryption_name
																																														.equals("performEncryption")) {
																																													String methodPerformEncryption_type = methodPerformEncryption
																																															.getType();
																																													if (methodPerformEncryption_type
																																															.equals("byte[] ")) {
																																														String keyEncryption_type = keyEncryption
																																																.getType();
																																														if (keyEncryption_type
																																																.equals("SecretKey")) {
																																															int keyEncryption_index = keyEncryption
																																																	.getIndex();
																																															if (Integer
																																																	.valueOf(
																																																			keyEncryption_index)
																																																	.equals(Integer
																																																			.valueOf(
																																																					1))) {
																																																String keyEncryption_name = keyEncryption
																																																		.getName();
																																																if (keyEncryption_name
																																																		.equals("key")) {
																																																	int dataEncryption_index = dataEncryption
																																																			.getIndex();
																																																	if (Integer
																																																			.valueOf(
																																																					dataEncryption_index)
																																																			.equals(Integer
																																																					.valueOf(
																																																							0))) {
																																																		String dataEncryption_type = dataEncryption
																																																				.getType();
																																																		if (dataEncryption_type
																																																				.equals("byte[]")) {
																																																			String dataEncryption_name = dataEncryption
																																																					.getName();
																																																			if (dataEncryption_name
																																																					.equals("data")) {
																																																				String methodGetKey_modifier = methodGetKey
																																																						.getModifier();
																																																				if (methodGetKey_modifier
																																																						.equals("public")) {
																																																					String methodGetKey_type = methodGetKey
																																																							.getType();
																																																					if (methodGetKey_type
																																																							.equals("SecretKey ")) {
																																																						String methodGetKey_name = methodGetKey
																																																								.getName();
																																																						if (methodGetKey_name
																																																								.equals("getKey")) {
																																																							int exprAlgNameLiteral_index = exprAlgNameLiteral
																																																									.getIndex();
																																																							if (Integer
																																																									.valueOf(
																																																											exprAlgNameLiteral_index)
																																																									.equals(Integer
																																																											.valueOf(
																																																													1))) {
																																																								String pwdDeclaration_name = pwdDeclaration
																																																										.getName();
																																																								if (pwdDeclaration_name
																																																										.equals("pwd")) {
																																																									int pwdDeclaration_index = pwdDeclaration
																																																											.getIndex();
																																																									if (Integer
																																																											.valueOf(
																																																													pwdDeclaration_index)
																																																											.equals(Integer
																																																													.valueOf(
																																																															0))) {
																																																										String pwdDeclaration_type = pwdDeclaration
																																																												.getType();
																																																										if (pwdDeclaration_type
																																																												.equals("char[]")) {
																																																											String methodPerformGetKey_name = methodPerformGetKey
																																																													.getName();
																																																											if (methodPerformGetKey_name
																																																													.equals("performGetKey")) {
																																																												String methodPerformGetKey_type = methodPerformGetKey
																																																														.getType();
																																																												if (methodPerformGetKey_type
																																																														.equals("SecretKey ")) {
																																																													String methodPerformGetKey_modifier = methodPerformGetKey
																																																															.getModifier();
																																																													if (methodPerformGetKey_modifier
																																																															.equals("private")) {
																																																														boolean statRetPerformEncryption_return = statRetPerformEncryption
																																																																.isReturn();
																																																														if (Boolean
																																																																.valueOf(
																																																																		statRetPerformEncryption_return)
																																																																.equals(Boolean
																																																																		.valueOf(
																																																																				true))) {
																																																															int exprKeyName_index = exprKeyName
																																																																	.getIndex();
																																																															if (Integer
																																																																	.valueOf(
																																																																			exprKeyName_index)
																																																																	.equals(Integer
																																																																			.valueOf(
																																																																					1))) {
																																																																String exprKeyName_identifier = exprKeyName
																																																																		.getIdentifier();
																																																																if (exprKeyName_identifier
																																																																		.equals("key")) {
																																																																	int exprNameModePadding_index = exprNameModePadding
																																																																			.getIndex();
																																																																	if (Integer
																																																																			.valueOf(
																																																																					exprNameModePadding_index)
																																																																			.equals(Integer
																																																																					.valueOf(
																																																																							2))) {
																																																																		String methodEncryption_type = methodEncryption
																																																																				.getType();
																																																																		if (methodEncryption_type
																																																																				.equals("byte[] ")) {
																																																																			String methodEncryption_modifier = methodEncryption
																																																																					.getModifier();
																																																																			if (methodEncryption_modifier
																																																																					.equals("public")) {
																																																																				String methodEncryption_name = methodEncryption
																																																																						.getName();
																																																																				if (methodEncryption_name
																																																																						.equals("encrypt")) {
																																																																					String exprPwdName_identifier = exprPwdName
																																																																							.getIdentifier();
																																																																					if (exprPwdName_identifier
																																																																							.equals("pwd")) {
																																																																						int exprPwdName_index = exprPwdName
																																																																								.getIndex();
																																																																						if (Integer
																																																																								.valueOf(
																																																																										exprPwdName_index)
																																																																								.equals(Integer
																																																																										.valueOf(
																																																																												0))) {
																																																																							int exprDataName_index = exprDataName
																																																																									.getIndex();
																																																																							if (Integer
																																																																									.valueOf(
																																																																											exprDataName_index)
																																																																									.equals(Integer
																																																																											.valueOf(
																																																																													0))) {
																																																																								String exprDataName_identifier = exprDataName
																																																																										.getIdentifier();
																																																																								if (exprDataName_identifier
																																																																										.equals("data")) {
																																																																									String exprRetPerformEncryption_name = exprRetPerformEncryption
																																																																											.getName();
																																																																									if (exprRetPerformEncryption_name
																																																																											.equals("performEncryption")) {
																																																																										boolean statRetGetKey_return = statRetGetKey
																																																																												.isReturn();
																																																																										if (Boolean
																																																																												.valueOf(
																																																																														statRetGetKey_return)
																																																																												.equals(Boolean
																																																																														.valueOf(
																																																																																true))) {
																																																																											_result.add(
																																																																													new Object[] {
																																																																															exprIterationLiteral,
																																																																															javaPackage,
																																																																															exprRetGetKey,
																																																																															exprOutputSizeLiteral,
																																																																															kdaJcu,
																																																																															methodPerformEncryption,
																																																																															sbcJcu,
																																																																															keyEncryption,
																																																																															dataEncryption,
																																																																															methodGetKey,
																																																																															exprAlgNameLiteral,
																																																																															pwdDeclaration,
																																																																															methodPerformGetKey,
																																																																															statRetPerformEncryption,
																																																																															exprKeyName,
																																																																															exprNameModePadding,
																																																																															methodEncryption,
																																																																															exprPwdName,
																																																																															exprDataName,
																																																																															exprRetPerformEncryption,
																																																																															statRetGetKey });
																																																																										}

																																																																									}

																																																																								}

																																																																							}

																																																																						}

																																																																					}

																																																																				}

																																																																			}

																																																																		}

																																																																	}

																																																																}

																																																															}

																																																														}

																																																													}

																																																												}

																																																											}

																																																										}

																																																									}

																																																								}

																																																							}

																																																						}

																																																					}

																																																				}

																																																			}

																																																		}

																																																	}

																																																}

																																															}

																																														}

																																													}

																																												}

																																											}

																																										}

																																									}

																																								}

																																							}

																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_3_findcontext_greenBBBBBBBBBBBBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFF(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		IsApplicableMatch isApplicableMatch = RuntimeFactory.eINSTANCE.createIsApplicableMatch();
		EMoflonEdge exprRetPerformEncryption__exprKeyName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__statRetGetKey____statements = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprPwdName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge statRetPerformEncryption__exprRetPerformEncryption____expr = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge statRetGetKey__exprRetGetKey____expr = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprDataName____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__statRetPerformEncryption____statements = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge methodEncryption__keyEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodGetKey__pwdDeclaration____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__sbcJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge javaPackage__kdaJcu____cunits = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge methodEncryption__dataEncryption____params = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprOutputSizeLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge kdaJcu__methodPerformGetKey____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetPerformEncryption__exprNameModePadding____arguments = RuntimeFactory.eINSTANCE
				.createEMoflonEdge();
		EMoflonEdge sbcJcu__methodPerformEncryption____methods = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprAlgNameLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		EMoflonEdge exprRetGetKey__exprIterationLiteral____arguments = RuntimeFactory.eINSTANCE.createEMoflonEdge();
		String exprRetPerformEncryption__exprKeyName____arguments_name_prime = "arguments";
		String methodGetKey__statRetGetKey____statements_name_prime = "statements";
		String exprRetGetKey__exprPwdName____arguments_name_prime = "arguments";
		String statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime = "expr";
		String statRetGetKey__exprRetGetKey____expr_name_prime = "expr";
		String kdaJcu__methodGetKey____methods_name_prime = "methods";
		String sbcJcu__methodEncryption____methods_name_prime = "methods";
		String exprRetPerformEncryption__exprDataName____arguments_name_prime = "arguments";
		String methodEncryption__statRetPerformEncryption____statements_name_prime = "statements";
		String methodEncryption__keyEncryption____params_name_prime = "params";
		String methodGetKey__pwdDeclaration____params_name_prime = "params";
		String javaPackage__sbcJcu____cunits_name_prime = "cunits";
		String javaPackage__kdaJcu____cunits_name_prime = "cunits";
		String methodEncryption__dataEncryption____params_name_prime = "params";
		String exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime = "arguments";
		String kdaJcu__methodPerformGetKey____methods_name_prime = "methods";
		String exprRetPerformEncryption__exprNameModePadding____arguments_name_prime = "arguments";
		String sbcJcu__methodPerformEncryption____methods_name_prime = "methods";
		String exprRetGetKey__exprAlgNameLiteral____arguments_name_prime = "arguments";
		String exprRetGetKey__exprIterationLiteral____arguments_name_prime = "arguments";
		isApplicableMatch.getAllContextElements().add(exprIterationLiteral);
		isApplicableMatch.getAllContextElements().add(javaPackage);
		isApplicableMatch.getAllContextElements().add(exprRetGetKey);
		isApplicableMatch.getAllContextElements().add(exprOutputSizeLiteral);
		isApplicableMatch.getAllContextElements().add(kdaJcu);
		isApplicableMatch.getAllContextElements().add(methodPerformEncryption);
		isApplicableMatch.getAllContextElements().add(sbcJcu);
		isApplicableMatch.getAllContextElements().add(keyEncryption);
		isApplicableMatch.getAllContextElements().add(dataEncryption);
		isApplicableMatch.getAllContextElements().add(methodGetKey);
		isApplicableMatch.getAllContextElements().add(exprAlgNameLiteral);
		isApplicableMatch.getAllContextElements().add(pwdDeclaration);
		isApplicableMatch.getAllContextElements().add(methodPerformGetKey);
		isApplicableMatch.getAllContextElements().add(statRetPerformEncryption);
		isApplicableMatch.getAllContextElements().add(exprKeyName);
		isApplicableMatch.getAllContextElements().add(exprNameModePadding);
		isApplicableMatch.getAllContextElements().add(methodEncryption);
		isApplicableMatch.getAllContextElements().add(exprPwdName);
		isApplicableMatch.getAllContextElements().add(exprDataName);
		isApplicableMatch.getAllContextElements().add(exprRetPerformEncryption);
		isApplicableMatch.getAllContextElements().add(statRetGetKey);
		exprRetPerformEncryption__exprKeyName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprKeyName____arguments.setTrg(exprKeyName);
		isApplicableMatch.getAllContextElements().add(exprRetPerformEncryption__exprKeyName____arguments);
		methodGetKey__statRetGetKey____statements.setSrc(methodGetKey);
		methodGetKey__statRetGetKey____statements.setTrg(statRetGetKey);
		isApplicableMatch.getAllContextElements().add(methodGetKey__statRetGetKey____statements);
		exprRetGetKey__exprPwdName____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprPwdName____arguments.setTrg(exprPwdName);
		isApplicableMatch.getAllContextElements().add(exprRetGetKey__exprPwdName____arguments);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setSrc(statRetPerformEncryption);
		statRetPerformEncryption__exprRetPerformEncryption____expr.setTrg(exprRetPerformEncryption);
		isApplicableMatch.getAllContextElements().add(statRetPerformEncryption__exprRetPerformEncryption____expr);
		statRetGetKey__exprRetGetKey____expr.setSrc(statRetGetKey);
		statRetGetKey__exprRetGetKey____expr.setTrg(exprRetGetKey);
		isApplicableMatch.getAllContextElements().add(statRetGetKey__exprRetGetKey____expr);
		kdaJcu__methodGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodGetKey____methods.setTrg(methodGetKey);
		isApplicableMatch.getAllContextElements().add(kdaJcu__methodGetKey____methods);
		sbcJcu__methodEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodEncryption____methods.setTrg(methodEncryption);
		isApplicableMatch.getAllContextElements().add(sbcJcu__methodEncryption____methods);
		exprRetPerformEncryption__exprDataName____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprDataName____arguments.setTrg(exprDataName);
		isApplicableMatch.getAllContextElements().add(exprRetPerformEncryption__exprDataName____arguments);
		methodEncryption__statRetPerformEncryption____statements.setSrc(methodEncryption);
		methodEncryption__statRetPerformEncryption____statements.setTrg(statRetPerformEncryption);
		isApplicableMatch.getAllContextElements().add(methodEncryption__statRetPerformEncryption____statements);
		methodEncryption__keyEncryption____params.setSrc(methodEncryption);
		methodEncryption__keyEncryption____params.setTrg(keyEncryption);
		isApplicableMatch.getAllContextElements().add(methodEncryption__keyEncryption____params);
		methodGetKey__pwdDeclaration____params.setSrc(methodGetKey);
		methodGetKey__pwdDeclaration____params.setTrg(pwdDeclaration);
		isApplicableMatch.getAllContextElements().add(methodGetKey__pwdDeclaration____params);
		javaPackage__sbcJcu____cunits.setSrc(javaPackage);
		javaPackage__sbcJcu____cunits.setTrg(sbcJcu);
		isApplicableMatch.getAllContextElements().add(javaPackage__sbcJcu____cunits);
		javaPackage__kdaJcu____cunits.setSrc(javaPackage);
		javaPackage__kdaJcu____cunits.setTrg(kdaJcu);
		isApplicableMatch.getAllContextElements().add(javaPackage__kdaJcu____cunits);
		methodEncryption__dataEncryption____params.setSrc(methodEncryption);
		methodEncryption__dataEncryption____params.setTrg(dataEncryption);
		isApplicableMatch.getAllContextElements().add(methodEncryption__dataEncryption____params);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprOutputSizeLiteral____arguments.setTrg(exprOutputSizeLiteral);
		isApplicableMatch.getAllContextElements().add(exprRetGetKey__exprOutputSizeLiteral____arguments);
		kdaJcu__methodPerformGetKey____methods.setSrc(kdaJcu);
		kdaJcu__methodPerformGetKey____methods.setTrg(methodPerformGetKey);
		isApplicableMatch.getAllContextElements().add(kdaJcu__methodPerformGetKey____methods);
		exprRetPerformEncryption__exprNameModePadding____arguments.setSrc(exprRetPerformEncryption);
		exprRetPerformEncryption__exprNameModePadding____arguments.setTrg(exprNameModePadding);
		isApplicableMatch.getAllContextElements().add(exprRetPerformEncryption__exprNameModePadding____arguments);
		sbcJcu__methodPerformEncryption____methods.setSrc(sbcJcu);
		sbcJcu__methodPerformEncryption____methods.setTrg(methodPerformEncryption);
		isApplicableMatch.getAllContextElements().add(sbcJcu__methodPerformEncryption____methods);
		exprRetGetKey__exprAlgNameLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprAlgNameLiteral____arguments.setTrg(exprAlgNameLiteral);
		isApplicableMatch.getAllContextElements().add(exprRetGetKey__exprAlgNameLiteral____arguments);
		exprRetGetKey__exprIterationLiteral____arguments.setSrc(exprRetGetKey);
		exprRetGetKey__exprIterationLiteral____arguments.setTrg(exprIterationLiteral);
		isApplicableMatch.getAllContextElements().add(exprRetGetKey__exprIterationLiteral____arguments);
		exprRetPerformEncryption__exprKeyName____arguments
				.setName(exprRetPerformEncryption__exprKeyName____arguments_name_prime);
		methodGetKey__statRetGetKey____statements.setName(methodGetKey__statRetGetKey____statements_name_prime);
		exprRetGetKey__exprPwdName____arguments.setName(exprRetGetKey__exprPwdName____arguments_name_prime);
		statRetPerformEncryption__exprRetPerformEncryption____expr
				.setName(statRetPerformEncryption__exprRetPerformEncryption____expr_name_prime);
		statRetGetKey__exprRetGetKey____expr.setName(statRetGetKey__exprRetGetKey____expr_name_prime);
		kdaJcu__methodGetKey____methods.setName(kdaJcu__methodGetKey____methods_name_prime);
		sbcJcu__methodEncryption____methods.setName(sbcJcu__methodEncryption____methods_name_prime);
		exprRetPerformEncryption__exprDataName____arguments
				.setName(exprRetPerformEncryption__exprDataName____arguments_name_prime);
		methodEncryption__statRetPerformEncryption____statements
				.setName(methodEncryption__statRetPerformEncryption____statements_name_prime);
		methodEncryption__keyEncryption____params.setName(methodEncryption__keyEncryption____params_name_prime);
		methodGetKey__pwdDeclaration____params.setName(methodGetKey__pwdDeclaration____params_name_prime);
		javaPackage__sbcJcu____cunits.setName(javaPackage__sbcJcu____cunits_name_prime);
		javaPackage__kdaJcu____cunits.setName(javaPackage__kdaJcu____cunits_name_prime);
		methodEncryption__dataEncryption____params.setName(methodEncryption__dataEncryption____params_name_prime);
		exprRetGetKey__exprOutputSizeLiteral____arguments
				.setName(exprRetGetKey__exprOutputSizeLiteral____arguments_name_prime);
		kdaJcu__methodPerformGetKey____methods.setName(kdaJcu__methodPerformGetKey____methods_name_prime);
		exprRetPerformEncryption__exprNameModePadding____arguments
				.setName(exprRetPerformEncryption__exprNameModePadding____arguments_name_prime);
		sbcJcu__methodPerformEncryption____methods.setName(sbcJcu__methodPerformEncryption____methods_name_prime);
		exprRetGetKey__exprAlgNameLiteral____arguments
				.setName(exprRetGetKey__exprAlgNameLiteral____arguments_name_prime);
		exprRetGetKey__exprIterationLiteral____arguments
				.setName(exprRetGetKey__exprIterationLiteral____arguments_name_prime);
		return new Object[] { exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
				methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral,
				pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
				methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey, isApplicableMatch,
				exprRetPerformEncryption__exprKeyName____arguments, methodGetKey__statRetGetKey____statements,
				exprRetGetKey__exprPwdName____arguments, statRetPerformEncryption__exprRetPerformEncryption____expr,
				statRetGetKey__exprRetGetKey____expr, kdaJcu__methodGetKey____methods,
				sbcJcu__methodEncryption____methods, exprRetPerformEncryption__exprDataName____arguments,
				methodEncryption__statRetPerformEncryption____statements, methodEncryption__keyEncryption____params,
				methodGetKey__pwdDeclaration____params, javaPackage__sbcJcu____cunits, javaPackage__kdaJcu____cunits,
				methodEncryption__dataEncryption____params, exprRetGetKey__exprOutputSizeLiteral____arguments,
				kdaJcu__methodPerformGetKey____methods, exprRetPerformEncryption__exprNameModePadding____arguments,
				sbcJcu__methodPerformEncryption____methods, exprRetGetKey__exprAlgNameLiteral____arguments,
				exprRetGetKey__exprIterationLiteral____arguments };
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_4_solveCSP_bindingFBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch, JavaLiteral exprIterationLiteral,
			JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral,
			JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu,
			JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		CSP _localVariable_0 = _this.isApplicable_solveCsp_BWD(isApplicableMatch, exprIterationLiteral, javaPackage,
				exprRetGetKey, exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption,
				dataEncryption, methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey,
				statRetPerformEncryption, exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
				exprRetPerformEncryption, statRetGetKey);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, isApplicableMatch, exprIterationLiteral, javaPackage, exprRetGetKey,
					exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
					methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
					exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
					exprRetPerformEncryption, statRetGetKey };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_4_solveCSP_blackB(CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_4_solveCSP_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch, JavaLiteral exprIterationLiteral,
			JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral,
			JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu,
			JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		Object[] result_pattern_PasswordBasedEncryption_12_4_solveCSP_binding = pattern_PasswordBasedEncryption_12_4_solveCSP_bindingFBBBBBBBBBBBBBBBBBBBBBBB(
				_this, isApplicableMatch, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
				kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
				exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
				exprNameModePadding, methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption,
				statRetGetKey);
		if (result_pattern_PasswordBasedEncryption_12_4_solveCSP_binding != null) {
			CSP csp = (CSP) result_pattern_PasswordBasedEncryption_12_4_solveCSP_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_12_4_solveCSP_black = pattern_PasswordBasedEncryption_12_4_solveCSP_blackB(
					csp);
			if (result_pattern_PasswordBasedEncryption_12_4_solveCSP_black != null) {

				return new Object[] { csp, _this, isApplicableMatch, exprIterationLiteral, javaPackage, exprRetGetKey,
						exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
						methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName,
						exprRetPerformEncryption, statRetGetKey };
			}
		}
		return null;
	}

	public static final boolean pattern_PasswordBasedEncryption_12_5_checkCSP_expressionFBB(
			PasswordBasedEncryption _this, CSP csp) {
		boolean _localVariable_0 = _this.isApplicable_checkCsp_BWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_6_addmatchtoruleresult_blackBB(
			IsApplicableRuleResult ruleresult, IsApplicableMatch isApplicableMatch) {
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final Object[] pattern_PasswordBasedEncryption_12_6_addmatchtoruleresult_greenBB(
			IsApplicableRuleResult ruleresult, IsApplicableMatch isApplicableMatch) {
		ruleresult.getIsApplicableMatch().add(isApplicableMatch);
		boolean ruleresult_success_prime = Boolean.valueOf(true);
		String isApplicableMatch_ruleName_prime = "PasswordBasedEncryption";
		ruleresult.setSuccess(Boolean.valueOf(ruleresult_success_prime));
		isApplicableMatch.setRuleName(isApplicableMatch_ruleName_prime);
		return new Object[] { ruleresult, isApplicableMatch };
	}

	public static final IsApplicableRuleResult pattern_PasswordBasedEncryption_12_7_expressionFB(
			IsApplicableRuleResult ruleresult) {
		IsApplicableRuleResult _result = ruleresult;
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_1_preparereturnvalue_bindingFB(
			PasswordBasedEncryption _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_1_preparereturnvalue_blackFBBF(EClass __eClass,
			PasswordBasedEncryption _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperation_name = __performOperation.getName();
			if (__performOperation_name.equals("isApplicable_FWD")) {
				for (EOperation isApplicableCC : __eClass.getEOperations()) {
					if (!__performOperation.equals(isApplicableCC)) {
						String isApplicableCC_name = isApplicableCC.getName();
						if (isApplicableCC_name.equals("isApplicable_CC")) {
							return new Object[] { __performOperation, __eClass, _this, isApplicableCC };
						}

					}
				}
			}

		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_1_preparereturnvalue_bindingAndBlackFFBF(
			PasswordBasedEncryption _this) {
		Object[] result_pattern_PasswordBasedEncryption_20_1_preparereturnvalue_binding = pattern_PasswordBasedEncryption_20_1_preparereturnvalue_bindingFB(
				_this);
		if (result_pattern_PasswordBasedEncryption_20_1_preparereturnvalue_binding != null) {
			EClass __eClass = (EClass) result_pattern_PasswordBasedEncryption_20_1_preparereturnvalue_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_20_1_preparereturnvalue_black = pattern_PasswordBasedEncryption_20_1_preparereturnvalue_blackFBBF(
					__eClass, _this);
			if (result_pattern_PasswordBasedEncryption_20_1_preparereturnvalue_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_PasswordBasedEncryption_20_1_preparereturnvalue_black[0];
				EOperation isApplicableCC = (EOperation) result_pattern_PasswordBasedEncryption_20_1_preparereturnvalue_black[3];

				return new Object[] { __performOperation, __eClass, _this, isApplicableCC };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_1_preparereturnvalue_greenF() {
		EObjectContainer __result = RuntimeFactory.eINSTANCE.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_2_testcorematchandDECs_black_nac_0BBB(Task task,
			KeyDerivationAlgorithm kda, SymmetricBlockCipher sbc) {
		for (Algorithm __DEC_task_algorithms_13352 : task.getAlgorithms()) {
			if (!kda.equals(__DEC_task_algorithms_13352)) {
				if (!sbc.equals(__DEC_task_algorithms_13352)) {
					return new Object[] { task, kda, sbc };
				}
			}
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_PasswordBasedEncryption_20_2_testcorematchandDECs_blackFFFB(
			EMoflonEdge _edge_algorithms) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpTask = _edge_algorithms.getSrc();
		if (tmpTask instanceof Task) {
			Task task = (Task) tmpTask;
			EObject tmpKda = _edge_algorithms.getTrg();
			if (tmpKda instanceof KeyDerivationAlgorithm) {
				KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) tmpKda;
				if (task.getAlgorithms().contains(kda)) {
					String task_description = task.getDescription();
					if (task_description.equals("PasswordBasedEncryption")) {
						for (Algorithm tmpSbc : task.getAlgorithms()) {
							if (tmpSbc instanceof SymmetricBlockCipher) {
								SymmetricBlockCipher sbc = (SymmetricBlockCipher) tmpSbc;
								if (pattern_PasswordBasedEncryption_20_2_testcorematchandDECs_black_nac_0BBB(task, kda,
										sbc) == null) {
									_result.add(new Object[] { kda, task, sbc, _edge_algorithms });
								}
							}
						}
					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_2_testcorematchandDECs_greenFB(EClass __eClass) {
		Match match = RuntimeFactory.eINSTANCE.createMatch();
		String __eClass_name = __eClass.getName();
		String match_ruleName_prime = __eClass_name;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_PasswordBasedEncryption_20_3_bookkeepingwithgenericisAppropriatemethod_expressionFBBBBB(
			PasswordBasedEncryption _this, Match match, KeyDerivationAlgorithm kda, Task task,
			SymmetricBlockCipher sbc) {
		boolean _localVariable_0 = _this.isAppropriate_FWD(match, kda, task, sbc);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_PasswordBasedEncryption_20_4_Ensurethatthecorrecttypesofelementsarematched_expressionFBB(
			PasswordBasedEncryption _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_FWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_5_Addmatchtoruleresult_blackBBBB(Match match,
			EOperation __performOperation, EObjectContainer __result, EOperation isApplicableCC) {
		if (!__performOperation.equals(isApplicableCC)) {
			return new Object[] { match, __performOperation, __result, isApplicableCC };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_20_5_Addmatchtoruleresult_greenBBBB(Match match,
			EOperation __performOperation, EObjectContainer __result, EOperation isApplicableCC) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		match.setIsApplicableCCOperation(isApplicableCC);
		return new Object[] { match, __performOperation, __result, isApplicableCC };
	}

	public static final EObjectContainer pattern_PasswordBasedEncryption_20_6_expressionFB(EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_1_preparereturnvalue_bindingFB(
			PasswordBasedEncryption _this) {
		EClass _localVariable_0 = _this.eClass();
		EClass __eClass = _localVariable_0;
		if (__eClass != null) {
			return new Object[] { __eClass, _this };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_1_preparereturnvalue_blackFBBF(EClass __eClass,
			PasswordBasedEncryption _this) {
		for (EOperation __performOperation : __eClass.getEOperations()) {
			String __performOperation_name = __performOperation.getName();
			if (__performOperation_name.equals("isApplicable_BWD")) {
				for (EOperation isApplicableCC : __eClass.getEOperations()) {
					if (!__performOperation.equals(isApplicableCC)) {
						String isApplicableCC_name = isApplicableCC.getName();
						if (isApplicableCC_name.equals("isApplicable_CC")) {
							return new Object[] { __performOperation, __eClass, _this, isApplicableCC };
						}

					}
				}
			}

		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_1_preparereturnvalue_bindingAndBlackFFBF(
			PasswordBasedEncryption _this) {
		Object[] result_pattern_PasswordBasedEncryption_21_1_preparereturnvalue_binding = pattern_PasswordBasedEncryption_21_1_preparereturnvalue_bindingFB(
				_this);
		if (result_pattern_PasswordBasedEncryption_21_1_preparereturnvalue_binding != null) {
			EClass __eClass = (EClass) result_pattern_PasswordBasedEncryption_21_1_preparereturnvalue_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_21_1_preparereturnvalue_black = pattern_PasswordBasedEncryption_21_1_preparereturnvalue_blackFBBF(
					__eClass, _this);
			if (result_pattern_PasswordBasedEncryption_21_1_preparereturnvalue_black != null) {
				EOperation __performOperation = (EOperation) result_pattern_PasswordBasedEncryption_21_1_preparereturnvalue_black[0];
				EOperation isApplicableCC = (EOperation) result_pattern_PasswordBasedEncryption_21_1_preparereturnvalue_black[3];

				return new Object[] { __performOperation, __eClass, _this, isApplicableCC };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_1_preparereturnvalue_greenF() {
		EObjectContainer __result = RuntimeFactory.eINSTANCE.createEObjectContainer();
		return new Object[] { __result };
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_0BBB(
			JavaLiteral exprIterationLiteral, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprIterationLiteral_expr_372266 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprIterationLiteral, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprIterationLiteral_expr_372266)) {
					if (!statRetGetKey.equals(__DEC_exprIterationLiteral_expr_372266)) {
						return new Object[] { exprIterationLiteral, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_1BBB(
			JavaPackage javaPackage, JavaCompilationUnit kdaJcu, JavaCompilationUnit sbcJcu) {
		if (!kdaJcu.equals(sbcJcu)) {
			for (JavaCompilationUnit __DEC_javaPackage_cunits_781553 : javaPackage.getCunits()) {
				if (!kdaJcu.equals(__DEC_javaPackage_cunits_781553)) {
					if (!sbcJcu.equals(__DEC_javaPackage_cunits_781553)) {
						return new Object[] { javaPackage, kdaJcu, sbcJcu };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_2BB(
			JavaMethodInvocation exprRetGetKey, JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_exprRetGetKey_arguments_757150 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprRetGetKey, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_exprRetGetKey_arguments_757150)) {
					if (!exprRetPerformEncryption.equals(__DEC_exprRetGetKey_arguments_757150)) {
						return new Object[] { exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_3BBB(
			JavaLiteral exprOutputSizeLiteral, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprOutputSizeLiteral_expr_580384 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprOutputSizeLiteral, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprOutputSizeLiteral_expr_580384)) {
					if (!statRetGetKey.equals(__DEC_exprOutputSizeLiteral_expr_580384)) {
						return new Object[] { exprOutputSizeLiteral, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_4BBB(
			JavaVariableDeclaration keyEncryption, JavaStatement statRetPerformEncryption,
			JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_keyEncryption_expr_279760 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(keyEncryption, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_keyEncryption_expr_279760)) {
					if (!statRetGetKey.equals(__DEC_keyEncryption_expr_279760)) {
						return new Object[] { keyEncryption, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_5BBB(
			JavaVariableDeclaration keyEncryption, JavaMethodInvocation exprRetGetKey,
			JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_keyEncryption_arguments_383447 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(keyEncryption, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_keyEncryption_arguments_383447)) {
					if (!exprRetPerformEncryption.equals(__DEC_keyEncryption_arguments_383447)) {
						return new Object[] { keyEncryption, exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_6BBB(
			JavaVariableDeclaration dataEncryption, JavaStatement statRetPerformEncryption,
			JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_dataEncryption_expr_324595 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(dataEncryption, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_dataEncryption_expr_324595)) {
					if (!statRetGetKey.equals(__DEC_dataEncryption_expr_324595)) {
						return new Object[] { dataEncryption, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_7BBB(
			JavaVariableDeclaration dataEncryption, JavaMethodInvocation exprRetGetKey,
			JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_dataEncryption_arguments_796746 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(dataEncryption, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_dataEncryption_arguments_796746)) {
					if (!exprRetPerformEncryption.equals(__DEC_dataEncryption_arguments_796746)) {
						return new Object[] { dataEncryption, exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_8BBB(
			JavaWorkflowMethod methodGetKey, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_methodGetKey_statements_977072 : methodGetKey.getStatements()) {
				if (!statRetPerformEncryption.equals(__DEC_methodGetKey_statements_977072)) {
					if (!statRetGetKey.equals(__DEC_methodGetKey_statements_977072)) {
						return new Object[] { methodGetKey, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_9BBB(
			JavaLiteral exprAlgNameLiteral, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprAlgNameLiteral_expr_79031 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprAlgNameLiteral, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprAlgNameLiteral_expr_79031)) {
					if (!statRetGetKey.equals(__DEC_exprAlgNameLiteral_expr_79031)) {
						return new Object[] { exprAlgNameLiteral, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_10BBB(
			JavaVariableDeclaration pwdDeclaration, JavaStatement statRetPerformEncryption,
			JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_pwdDeclaration_expr_807823 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(pwdDeclaration, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_pwdDeclaration_expr_807823)) {
					if (!statRetGetKey.equals(__DEC_pwdDeclaration_expr_807823)) {
						return new Object[] { pwdDeclaration, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_11BBB(
			JavaVariableDeclaration pwdDeclaration, JavaMethodInvocation exprRetGetKey,
			JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_pwdDeclaration_arguments_639850 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(pwdDeclaration, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_pwdDeclaration_arguments_639850)) {
					if (!exprRetPerformEncryption.equals(__DEC_pwdDeclaration_arguments_639850)) {
						return new Object[] { pwdDeclaration, exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_12BBB(
			JavaName exprKeyName, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprKeyName_expr_68714 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprKeyName, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprKeyName_expr_68714)) {
					if (!statRetGetKey.equals(__DEC_exprKeyName_expr_68714)) {
						return new Object[] { exprKeyName, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_13BBB(
			JavaLiteral exprNameModePadding, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprNameModePadding_expr_732826 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprNameModePadding, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprNameModePadding_expr_732826)) {
					if (!statRetGetKey.equals(__DEC_exprNameModePadding_expr_732826)) {
						return new Object[] { exprNameModePadding, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_14BBB(
			JavaWorkflowMethod methodEncryption, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_methodEncryption_statements_878939 : methodEncryption.getStatements()) {
				if (!statRetPerformEncryption.equals(__DEC_methodEncryption_statements_878939)) {
					if (!statRetGetKey.equals(__DEC_methodEncryption_statements_878939)) {
						return new Object[] { methodEncryption, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_15BBB(
			JavaName exprPwdName, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprPwdName_expr_180762 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprPwdName, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprPwdName_expr_180762)) {
					if (!statRetGetKey.equals(__DEC_exprPwdName_expr_180762)) {
						return new Object[] { exprPwdName, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_16BBB(
			JavaName exprDataName, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprDataName_expr_451807 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprDataName, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprDataName_expr_451807)) {
					if (!statRetGetKey.equals(__DEC_exprDataName_expr_451807)) {
						return new Object[] { exprDataName, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_17BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaMethodInvocation exprRetGetKey) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_exprRetPerformEncryption_arguments_510298 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprRetPerformEncryption, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetPerformEncryption.equals(__DEC_exprRetPerformEncryption_arguments_510298)) {
					if (!exprRetGetKey.equals(__DEC_exprRetPerformEncryption_arguments_510298)) {
						return new Object[] { exprRetPerformEncryption, exprRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_18BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprIterationLiteral) {
		if (exprIterationLiteral.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprIterationLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_19BB(
			JavaStatement statRetGetKey, JavaLiteral exprIterationLiteral) {
		if (exprIterationLiteral.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprIterationLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_20BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprOutputSizeLiteral) {
		if (exprOutputSizeLiteral.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprOutputSizeLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_21BB(
			JavaStatement statRetGetKey, JavaLiteral exprOutputSizeLiteral) {
		if (exprOutputSizeLiteral.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprOutputSizeLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_22BB(
			JavaStatement statRetPerformEncryption, JavaVariableDeclaration keyEncryption) {
		if (keyEncryption.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_23BB(
			JavaStatement statRetGetKey, JavaVariableDeclaration keyEncryption) {
		if (keyEncryption.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_24BB(
			JavaMethodInvocation exprRetGetKey, JavaVariableDeclaration keyEncryption) {
		if (exprRetGetKey.getArguments().contains(keyEncryption)) {
			return new Object[] { exprRetGetKey, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_25BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaVariableDeclaration keyEncryption) {
		if (exprRetPerformEncryption.getArguments().contains(keyEncryption)) {
			return new Object[] { exprRetPerformEncryption, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_26BB(
			JavaStatement statRetPerformEncryption, JavaVariableDeclaration dataEncryption) {
		if (dataEncryption.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_27BB(
			JavaStatement statRetGetKey, JavaVariableDeclaration dataEncryption) {
		if (dataEncryption.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_28BB(
			JavaMethodInvocation exprRetGetKey, JavaVariableDeclaration dataEncryption) {
		if (exprRetGetKey.getArguments().contains(dataEncryption)) {
			return new Object[] { exprRetGetKey, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_29BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaVariableDeclaration dataEncryption) {
		if (exprRetPerformEncryption.getArguments().contains(dataEncryption)) {
			return new Object[] { exprRetPerformEncryption, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_30BB(
			JavaWorkflowMethod methodGetKey, JavaStatement statRetPerformEncryption) {
		if (methodGetKey.getStatements().contains(statRetPerformEncryption)) {
			return new Object[] { methodGetKey, statRetPerformEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_31BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprAlgNameLiteral) {
		if (exprAlgNameLiteral.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprAlgNameLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_32BB(
			JavaStatement statRetGetKey, JavaLiteral exprAlgNameLiteral) {
		if (exprAlgNameLiteral.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprAlgNameLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_33BB(
			JavaStatement statRetPerformEncryption, JavaVariableDeclaration pwdDeclaration) {
		if (pwdDeclaration.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_34BB(
			JavaStatement statRetGetKey, JavaVariableDeclaration pwdDeclaration) {
		if (pwdDeclaration.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_35BB(
			JavaMethodInvocation exprRetGetKey, JavaVariableDeclaration pwdDeclaration) {
		if (exprRetGetKey.getArguments().contains(pwdDeclaration)) {
			return new Object[] { exprRetGetKey, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_36BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaVariableDeclaration pwdDeclaration) {
		if (exprRetPerformEncryption.getArguments().contains(pwdDeclaration)) {
			return new Object[] { exprRetPerformEncryption, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_37BB(
			JavaStatement statRetPerformEncryption, JavaName exprKeyName) {
		if (exprKeyName.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprKeyName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_38BB(
			JavaStatement statRetGetKey, JavaName exprKeyName) {
		if (exprKeyName.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprKeyName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_39BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprNameModePadding) {
		if (exprNameModePadding.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprNameModePadding };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_40BB(
			JavaStatement statRetGetKey, JavaLiteral exprNameModePadding) {
		if (exprNameModePadding.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprNameModePadding };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_41BB(
			JavaWorkflowMethod methodEncryption, JavaStatement statRetGetKey) {
		if (methodEncryption.getStatements().contains(statRetGetKey)) {
			return new Object[] { methodEncryption, statRetGetKey };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_42BB(
			JavaStatement statRetPerformEncryption, JavaName exprPwdName) {
		if (exprPwdName.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprPwdName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_43BB(
			JavaStatement statRetGetKey, JavaName exprPwdName) {
		if (exprPwdName.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprPwdName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_44BB(
			JavaStatement statRetPerformEncryption, JavaName exprDataName) {
		if (exprDataName.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprDataName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_45BB(
			JavaStatement statRetGetKey, JavaName exprDataName) {
		if (exprDataName.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprDataName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_46BB(
			JavaMethodInvocation exprRetGetKey, JavaMethodInvocation exprRetPerformEncryption) {
		if (exprRetGetKey.getArguments().contains(exprRetPerformEncryption)) {
			return new Object[] { exprRetGetKey, exprRetPerformEncryption };
		}
		return null;
	}

	public static final Iterable<Object[]> pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_blackFFFFFFFFFFFFFFFFFFFFFB(
			EMoflonEdge _edge_arguments) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		EObject tmpExprRetPerformEncryption = _edge_arguments.getSrc();
		if (tmpExprRetPerformEncryption instanceof JavaMethodInvocation) {
			JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) tmpExprRetPerformEncryption;
			EObject tmpExprKeyName = _edge_arguments.getTrg();
			if (tmpExprKeyName instanceof JavaName) {
				JavaName exprKeyName = (JavaName) tmpExprKeyName;
				if (exprRetPerformEncryption.getArguments().contains(exprKeyName)) {
					String exprRetPerformEncryption_name = exprRetPerformEncryption.getName();
					if (exprRetPerformEncryption_name.equals("performEncryption")) {
						int exprKeyName_index = exprKeyName.getIndex();
						if (Integer.valueOf(exprKeyName_index).equals(Integer.valueOf(1))) {
							String exprKeyName_identifier = exprKeyName.getIdentifier();
							if (exprKeyName_identifier.equals("key")) {
								for (JavaExpression tmpExprDataName : exprRetPerformEncryption.getArguments()) {
									if (tmpExprDataName instanceof JavaName) {
										JavaName exprDataName = (JavaName) tmpExprDataName;
										if (!exprDataName.equals(exprKeyName)) {
											int exprDataName_index = exprDataName.getIndex();
											if (Integer.valueOf(exprDataName_index).equals(Integer.valueOf(0))) {
												String exprDataName_identifier = exprDataName.getIdentifier();
												if (exprDataName_identifier.equals("data")) {
													for (JavaExpression tmpExprNameModePadding : exprRetPerformEncryption
															.getArguments()) {
														if (tmpExprNameModePadding instanceof JavaLiteral) {
															JavaLiteral exprNameModePadding = (JavaLiteral) tmpExprNameModePadding;
															int exprNameModePadding_index = exprNameModePadding
																	.getIndex();
															if (Integer.valueOf(exprNameModePadding_index)
																	.equals(Integer.valueOf(2))) {
																for (JavaStatement statRetPerformEncryption : org.moflon.core.utilities.eMoflonEMFUtil
																		.getOppositeReferenceTyped(
																				exprRetPerformEncryption,
																				JavaStatement.class, "expr")) {
																	boolean statRetPerformEncryption_return = statRetPerformEncryption
																			.isReturn();
																	if (Boolean.valueOf(statRetPerformEncryption_return)
																			.equals(Boolean.valueOf(true))) {
																		if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_37BB(
																				statRetPerformEncryption,
																				exprKeyName) == null) {
																			if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_39BB(
																					statRetPerformEncryption,
																					exprNameModePadding) == null) {
																				if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_44BB(
																						statRetPerformEncryption,
																						exprDataName) == null) {
																					for (JavaWorkflowMethod methodEncryption : org.moflon.core.utilities.eMoflonEMFUtil
																							.getOppositeReferenceTyped(
																									statRetPerformEncryption,
																									JavaWorkflowMethod.class,
																									"statements")) {
																						String methodEncryption_type = methodEncryption
																								.getType();
																						if (methodEncryption_type
																								.equals("byte[] ")) {
																							String methodEncryption_modifier = methodEncryption
																									.getModifier();
																							if (methodEncryption_modifier
																									.equals("public")) {
																								String methodEncryption_name = methodEncryption
																										.getName();
																								if (methodEncryption_name
																										.equals("encrypt")) {
																									for (JavaVariableDeclaration keyEncryption : methodEncryption
																											.getParams()) {
																										String keyEncryption_type = keyEncryption
																												.getType();
																										if (keyEncryption_type
																												.equals("SecretKey")) {
																											int keyEncryption_index = keyEncryption
																													.getIndex();
																											if (Integer
																													.valueOf(
																															keyEncryption_index)
																													.equals(Integer
																															.valueOf(
																																	1))) {
																												String keyEncryption_name = keyEncryption
																														.getName();
																												if (keyEncryption_name
																														.equals("key")) {
																													if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_22BB(
																															statRetPerformEncryption,
																															keyEncryption) == null) {
																														if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_25BB(
																																exprRetPerformEncryption,
																																keyEncryption) == null) {
																															for (JavaVariableDeclaration dataEncryption : methodEncryption
																																	.getParams()) {
																																if (!dataEncryption
																																		.equals(keyEncryption)) {
																																	int dataEncryption_index = dataEncryption
																																			.getIndex();
																																	if (Integer
																																			.valueOf(
																																					dataEncryption_index)
																																			.equals(Integer
																																					.valueOf(
																																							0))) {
																																		String dataEncryption_type = dataEncryption
																																				.getType();
																																		if (dataEncryption_type
																																				.equals("byte[]")) {
																																			String dataEncryption_name = dataEncryption
																																					.getName();
																																			if (dataEncryption_name
																																					.equals("data")) {
																																				if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_26BB(
																																						statRetPerformEncryption,
																																						dataEncryption) == null) {
																																					if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_29BB(
																																							exprRetPerformEncryption,
																																							dataEncryption) == null) {
																																						for (JavaCompilationUnit sbcJcu : org.moflon.core.utilities.eMoflonEMFUtil
																																								.getOppositeReferenceTyped(
																																										methodEncryption,
																																										JavaCompilationUnit.class,
																																										"methods")) {
																																							for (JavaMethod tmpMethodPerformEncryption : sbcJcu
																																									.getMethods()) {
																																								if (tmpMethodPerformEncryption instanceof JavaOpaqueMethod) {
																																									JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) tmpMethodPerformEncryption;
																																									String methodPerformEncryption_modifier = methodPerformEncryption
																																											.getModifier();
																																									if (methodPerformEncryption_modifier
																																											.equals("private")) {
																																										String methodPerformEncryption_name = methodPerformEncryption
																																												.getName();
																																										if (methodPerformEncryption_name
																																												.equals("performEncryption")) {
																																											String methodPerformEncryption_type = methodPerformEncryption
																																													.getType();
																																											if (methodPerformEncryption_type
																																													.equals("byte[] ")) {
																																												for (JavaPackage javaPackage : org.moflon.core.utilities.eMoflonEMFUtil
																																														.getOppositeReferenceTyped(
																																																sbcJcu,
																																																JavaPackage.class,
																																																"cunits")) {
																																													for (JavaCompilationUnit kdaJcu : javaPackage
																																															.getCunits()) {
																																														if (!kdaJcu
																																																.equals(sbcJcu)) {
																																															String kdaJcu_name = kdaJcu
																																																	.getName();
																																															if (kdaJcu_name
																																																	.equals("KeyDeriv")) {
																																																if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_1BBB(
																																																		javaPackage,
																																																		kdaJcu,
																																																		sbcJcu) == null) {
																																																	for (JavaMethod tmpMethodGetKey : kdaJcu
																																																			.getMethods()) {
																																																		if (tmpMethodGetKey instanceof JavaWorkflowMethod) {
																																																			JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) tmpMethodGetKey;
																																																			if (!methodEncryption
																																																					.equals(methodGetKey)) {
																																																				String methodGetKey_modifier = methodGetKey
																																																						.getModifier();
																																																				if (methodGetKey_modifier
																																																						.equals("public")) {
																																																					String methodGetKey_type = methodGetKey
																																																							.getType();
																																																					if (methodGetKey_type
																																																							.equals("SecretKey ")) {
																																																						String methodGetKey_name = methodGetKey
																																																								.getName();
																																																						if (methodGetKey_name
																																																								.equals("getKey")) {
																																																							if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_30BB(
																																																									methodGetKey,
																																																									statRetPerformEncryption) == null) {
																																																								for (JavaMethod tmpMethodPerformGetKey : kdaJcu
																																																										.getMethods()) {
																																																									if (tmpMethodPerformGetKey instanceof JavaOpaqueMethod) {
																																																										JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) tmpMethodPerformGetKey;
																																																										if (!methodPerformEncryption
																																																												.equals(methodPerformGetKey)) {
																																																											String methodPerformGetKey_name = methodPerformGetKey
																																																													.getName();
																																																											if (methodPerformGetKey_name
																																																													.equals("performGetKey")) {
																																																												String methodPerformGetKey_type = methodPerformGetKey
																																																														.getType();
																																																												if (methodPerformGetKey_type
																																																														.equals("SecretKey ")) {
																																																													String methodPerformGetKey_modifier = methodPerformGetKey
																																																															.getModifier();
																																																													if (methodPerformGetKey_modifier
																																																															.equals("private")) {
																																																														for (JavaStatement statRetGetKey : methodGetKey
																																																																.getStatements()) {
																																																															if (!statRetGetKey
																																																																	.equals(statRetPerformEncryption)) {
																																																																JavaExpression tmpExprRetGetKey = statRetGetKey
																																																																		.getExpr();
																																																																if (tmpExprRetGetKey instanceof JavaMethodInvocation) {
																																																																	JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) tmpExprRetGetKey;
																																																																	if (!exprRetGetKey
																																																																			.equals(exprRetPerformEncryption)) {
																																																																		boolean statRetGetKey_return = statRetGetKey
																																																																				.isReturn();
																																																																		if (Boolean
																																																																				.valueOf(
																																																																						statRetGetKey_return)
																																																																				.equals(Boolean
																																																																						.valueOf(
																																																																								true))) {
																																																																			String exprRetGetKey_name = exprRetGetKey
																																																																					.getName();
																																																																			if (exprRetGetKey_name
																																																																					.equals("performGetKey")) {
																																																																				if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_4BBB(
																																																																						keyEncryption,
																																																																						statRetPerformEncryption,
																																																																						statRetGetKey) == null) {
																																																																					if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_6BBB(
																																																																							dataEncryption,
																																																																							statRetPerformEncryption,
																																																																							statRetGetKey) == null) {
																																																																						if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_8BBB(
																																																																								methodGetKey,
																																																																								statRetPerformEncryption,
																																																																								statRetGetKey) == null) {
																																																																							if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_12BBB(
																																																																									exprKeyName,
																																																																									statRetPerformEncryption,
																																																																									statRetGetKey) == null) {
																																																																								if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_13BBB(
																																																																										exprNameModePadding,
																																																																										statRetPerformEncryption,
																																																																										statRetGetKey) == null) {
																																																																									if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_14BBB(
																																																																											methodEncryption,
																																																																											statRetPerformEncryption,
																																																																											statRetGetKey) == null) {
																																																																										if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_16BBB(
																																																																												exprDataName,
																																																																												statRetPerformEncryption,
																																																																												statRetGetKey) == null) {
																																																																											if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_23BB(
																																																																													statRetGetKey,
																																																																													keyEncryption) == null) {
																																																																												if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_27BB(
																																																																														statRetGetKey,
																																																																														dataEncryption) == null) {
																																																																													if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_38BB(
																																																																															statRetGetKey,
																																																																															exprKeyName) == null) {
																																																																														if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_40BB(
																																																																																statRetGetKey,
																																																																																exprNameModePadding) == null) {
																																																																															if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_41BB(
																																																																																	methodEncryption,
																																																																																	statRetGetKey) == null) {
																																																																																if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_45BB(
																																																																																		statRetGetKey,
																																																																																		exprDataName) == null) {
																																																																																	if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_2BB(
																																																																																			exprRetGetKey,
																																																																																			exprRetPerformEncryption) == null) {
																																																																																		if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_5BBB(
																																																																																				keyEncryption,
																																																																																				exprRetGetKey,
																																																																																				exprRetPerformEncryption) == null) {
																																																																																			if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_7BBB(
																																																																																					dataEncryption,
																																																																																					exprRetGetKey,
																																																																																					exprRetPerformEncryption) == null) {
																																																																																				if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_17BB(
																																																																																						exprRetPerformEncryption,
																																																																																						exprRetGetKey) == null) {
																																																																																					if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_24BB(
																																																																																							exprRetGetKey,
																																																																																							keyEncryption) == null) {
																																																																																						if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_28BB(
																																																																																								exprRetGetKey,
																																																																																								dataEncryption) == null) {
																																																																																							if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_46BB(
																																																																																									exprRetGetKey,
																																																																																									exprRetPerformEncryption) == null) {
																																																																																								for (JavaVariableDeclaration pwdDeclaration : methodGetKey
																																																																																										.getParams()) {
																																																																																									if (!keyEncryption
																																																																																											.equals(pwdDeclaration)) {
																																																																																										if (!dataEncryption
																																																																																												.equals(pwdDeclaration)) {
																																																																																											String pwdDeclaration_name = pwdDeclaration
																																																																																													.getName();
																																																																																											if (pwdDeclaration_name
																																																																																													.equals("pwd")) {
																																																																																												int pwdDeclaration_index = pwdDeclaration
																																																																																														.getIndex();
																																																																																												if (Integer
																																																																																														.valueOf(
																																																																																																pwdDeclaration_index)
																																																																																														.equals(Integer
																																																																																																.valueOf(
																																																																																																		0))) {
																																																																																													String pwdDeclaration_type = pwdDeclaration
																																																																																															.getType();
																																																																																													if (pwdDeclaration_type
																																																																																															.equals("char[]")) {
																																																																																														if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_10BBB(
																																																																																																pwdDeclaration,
																																																																																																statRetPerformEncryption,
																																																																																																statRetGetKey) == null) {
																																																																																															if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_11BBB(
																																																																																																	pwdDeclaration,
																																																																																																	exprRetGetKey,
																																																																																																	exprRetPerformEncryption) == null) {
																																																																																																if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_33BB(
																																																																																																		statRetPerformEncryption,
																																																																																																		pwdDeclaration) == null) {
																																																																																																	if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_34BB(
																																																																																																			statRetGetKey,
																																																																																																			pwdDeclaration) == null) {
																																																																																																		if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_35BB(
																																																																																																				exprRetGetKey,
																																																																																																				pwdDeclaration) == null) {
																																																																																																			if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_36BB(
																																																																																																					exprRetPerformEncryption,
																																																																																																					pwdDeclaration) == null) {
																																																																																																				for (JavaExpression tmpExprPwdName : exprRetGetKey
																																																																																																						.getArguments()) {
																																																																																																					if (tmpExprPwdName instanceof JavaName) {
																																																																																																						JavaName exprPwdName = (JavaName) tmpExprPwdName;
																																																																																																						if (!exprKeyName
																																																																																																								.equals(exprPwdName)) {
																																																																																																							if (!exprDataName
																																																																																																									.equals(exprPwdName)) {
																																																																																																								String exprPwdName_identifier = exprPwdName
																																																																																																										.getIdentifier();
																																																																																																								if (exprPwdName_identifier
																																																																																																										.equals("pwd")) {
																																																																																																									int exprPwdName_index = exprPwdName
																																																																																																											.getIndex();
																																																																																																									if (Integer
																																																																																																											.valueOf(
																																																																																																													exprPwdName_index)
																																																																																																											.equals(Integer
																																																																																																													.valueOf(
																																																																																																															0))) {
																																																																																																										if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_15BBB(
																																																																																																												exprPwdName,
																																																																																																												statRetPerformEncryption,
																																																																																																												statRetGetKey) == null) {
																																																																																																											if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_42BB(
																																																																																																													statRetPerformEncryption,
																																																																																																													exprPwdName) == null) {
																																																																																																												if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_43BB(
																																																																																																														statRetGetKey,
																																																																																																														exprPwdName) == null) {
																																																																																																													for (JavaExpression tmpExprOutputSizeLiteral : exprRetGetKey
																																																																																																															.getArguments()) {
																																																																																																														if (tmpExprOutputSizeLiteral instanceof JavaLiteral) {
																																																																																																															JavaLiteral exprOutputSizeLiteral = (JavaLiteral) tmpExprOutputSizeLiteral;
																																																																																																															if (!exprNameModePadding
																																																																																																																	.equals(exprOutputSizeLiteral)) {
																																																																																																																int exprOutputSizeLiteral_index = exprOutputSizeLiteral
																																																																																																																		.getIndex();
																																																																																																																if (Integer
																																																																																																																		.valueOf(
																																																																																																																				exprOutputSizeLiteral_index)
																																																																																																																		.equals(Integer
																																																																																																																				.valueOf(
																																																																																																																						3))) {
																																																																																																																	if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_3BBB(
																																																																																																																			exprOutputSizeLiteral,
																																																																																																																			statRetPerformEncryption,
																																																																																																																			statRetGetKey) == null) {
																																																																																																																		if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_20BB(
																																																																																																																				statRetPerformEncryption,
																																																																																																																				exprOutputSizeLiteral) == null) {
																																																																																																																			if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_21BB(
																																																																																																																					statRetGetKey,
																																																																																																																					exprOutputSizeLiteral) == null) {
																																																																																																																				for (JavaExpression tmpExprAlgNameLiteral : exprRetGetKey
																																																																																																																						.getArguments()) {
																																																																																																																					if (tmpExprAlgNameLiteral instanceof JavaLiteral) {
																																																																																																																						JavaLiteral exprAlgNameLiteral = (JavaLiteral) tmpExprAlgNameLiteral;
																																																																																																																						if (!exprAlgNameLiteral
																																																																																																																								.equals(exprOutputSizeLiteral)) {
																																																																																																																							if (!exprAlgNameLiteral
																																																																																																																									.equals(exprNameModePadding)) {
																																																																																																																								int exprAlgNameLiteral_index = exprAlgNameLiteral
																																																																																																																										.getIndex();
																																																																																																																								if (Integer
																																																																																																																										.valueOf(
																																																																																																																												exprAlgNameLiteral_index)
																																																																																																																										.equals(Integer
																																																																																																																												.valueOf(
																																																																																																																														1))) {
																																																																																																																									if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_9BBB(
																																																																																																																											exprAlgNameLiteral,
																																																																																																																											statRetPerformEncryption,
																																																																																																																											statRetGetKey) == null) {
																																																																																																																										if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_31BB(
																																																																																																																												statRetPerformEncryption,
																																																																																																																												exprAlgNameLiteral) == null) {
																																																																																																																											if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_32BB(
																																																																																																																													statRetGetKey,
																																																																																																																													exprAlgNameLiteral) == null) {
																																																																																																																												for (JavaExpression tmpExprIterationLiteral : exprRetGetKey
																																																																																																																														.getArguments()) {
																																																																																																																													if (tmpExprIterationLiteral instanceof JavaLiteral) {
																																																																																																																														JavaLiteral exprIterationLiteral = (JavaLiteral) tmpExprIterationLiteral;
																																																																																																																														if (!exprIterationLiteral
																																																																																																																																.equals(exprOutputSizeLiteral)) {
																																																																																																																															if (!exprIterationLiteral
																																																																																																																																	.equals(exprNameModePadding)) {
																																																																																																																																if (!exprAlgNameLiteral
																																																																																																																																		.equals(exprIterationLiteral)) {
																																																																																																																																	int exprIterationLiteral_index = exprIterationLiteral
																																																																																																																																			.getIndex();
																																																																																																																																	if (Integer
																																																																																																																																			.valueOf(
																																																																																																																																					exprIterationLiteral_index)
																																																																																																																																			.equals(Integer
																																																																																																																																					.valueOf(
																																																																																																																																							2))) {
																																																																																																																																		if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_0BBB(
																																																																																																																																				exprIterationLiteral,
																																																																																																																																				statRetPerformEncryption,
																																																																																																																																				statRetGetKey) == null) {
																																																																																																																																			if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_18BB(
																																																																																																																																					statRetPerformEncryption,
																																																																																																																																					exprIterationLiteral) == null) {
																																																																																																																																				if (pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_black_nac_19BB(
																																																																																																																																						statRetGetKey,
																																																																																																																																						exprIterationLiteral) == null) {
																																																																																																																																					_result.add(
																																																																																																																																							new Object[] {
																																																																																																																																									exprIterationLiteral,
																																																																																																																																									javaPackage,
																																																																																																																																									exprRetGetKey,
																																																																																																																																									exprOutputSizeLiteral,
																																																																																																																																									kdaJcu,
																																																																																																																																									methodPerformEncryption,
																																																																																																																																									sbcJcu,
																																																																																																																																									keyEncryption,
																																																																																																																																									dataEncryption,
																																																																																																																																									methodGetKey,
																																																																																																																																									exprAlgNameLiteral,
																																																																																																																																									pwdDeclaration,
																																																																																																																																									methodPerformGetKey,
																																																																																																																																									statRetPerformEncryption,
																																																																																																																																									exprKeyName,
																																																																																																																																									exprNameModePadding,
																																																																																																																																									methodEncryption,
																																																																																																																																									exprPwdName,
																																																																																																																																									exprDataName,
																																																																																																																																									exprRetPerformEncryption,
																																																																																																																																									statRetGetKey,
																																																																																																																																									_edge_arguments });
																																																																																																																																				}
																																																																																																																																			}
																																																																																																																																		}
																																																																																																																																	}

																																																																																																																																}
																																																																																																																															}
																																																																																																																														}
																																																																																																																													}
																																																																																																																												}
																																																																																																																											}
																																																																																																																										}
																																																																																																																									}
																																																																																																																								}

																																																																																																																							}
																																																																																																																						}
																																																																																																																					}
																																																																																																																				}
																																																																																																																			}
																																																																																																																		}
																																																																																																																	}
																																																																																																																}

																																																																																																															}
																																																																																																														}
																																																																																																													}
																																																																																																												}
																																																																																																											}
																																																																																																										}
																																																																																																									}

																																																																																																								}

																																																																																																							}
																																																																																																						}
																																																																																																					}
																																																																																																				}
																																																																																																			}
																																																																																																		}
																																																																																																	}
																																																																																																}
																																																																																															}
																																																																																														}
																																																																																													}

																																																																																												}

																																																																																											}

																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}

																																																																		}

																																																																	}
																																																																}

																																																															}
																																																														}
																																																													}

																																																												}

																																																											}

																																																										}
																																																									}
																																																								}
																																																							}
																																																						}

																																																					}

																																																				}

																																																			}
																																																		}
																																																	}
																																																}
																																															}

																																														}
																																													}
																																												}
																																											}

																																										}

																																									}

																																								}
																																							}
																																						}
																																					}
																																				}
																																			}

																																		}

																																	}

																																}
																															}
																														}
																													}
																												}

																											}

																										}

																									}
																								}

																							}

																						}

																					}
																				}
																			}
																		}
																	}

																}
															}

														}
													}
												}

											}

										}
									}
								}
							}

						}

					}

				}
			}

		}

		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_2_testcorematchandDECs_greenFB(EClass __eClass) {
		Match match = RuntimeFactory.eINSTANCE.createMatch();
		String __eClass_name = __eClass.getName();
		String match_ruleName_prime = __eClass_name;
		match.setRuleName(match_ruleName_prime);
		return new Object[] { match, __eClass };

	}

	public static final boolean pattern_PasswordBasedEncryption_21_3_bookkeepingwithgenericisAppropriatemethod_expressionFBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, Match match, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		boolean _localVariable_0 = _this.isAppropriate_BWD(match, exprIterationLiteral, javaPackage, exprRetGetKey,
				exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
				methodGetKey, exprAlgNameLiteral, pwdDeclaration, methodPerformGetKey, statRetPerformEncryption,
				exprKeyName, exprNameModePadding, methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption,
				statRetGetKey);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final boolean pattern_PasswordBasedEncryption_21_4_Ensurethatthecorrecttypesofelementsarematched_expressionFBB(
			PasswordBasedEncryption _this, Match match) {
		boolean _localVariable_0 = _this.checkTypes_BWD(match);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_5_Addmatchtoruleresult_blackBBBB(Match match,
			EOperation __performOperation, EObjectContainer __result, EOperation isApplicableCC) {
		if (!__performOperation.equals(isApplicableCC)) {
			return new Object[] { match, __performOperation, __result, isApplicableCC };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_21_5_Addmatchtoruleresult_greenBBBB(Match match,
			EOperation __performOperation, EObjectContainer __result, EOperation isApplicableCC) {
		__result.getContents().add(match);
		match.setIsApplicableOperation(__performOperation);
		match.setIsApplicableCCOperation(isApplicableCC);
		return new Object[] { match, __performOperation, __result, isApplicableCC };
	}

	public static final EObjectContainer pattern_PasswordBasedEncryption_21_6_expressionFB(EObjectContainer __result) {
		EObjectContainer _result = __result;
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_1_prepare_blackB(PasswordBasedEncryption _this) {
		return new Object[] { _this };
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_1_prepare_greenF() {
		IsApplicableRuleResult result = RuntimeFactory.eINSTANCE.createIsApplicableRuleResult();
		return new Object[] { result };
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_bindingFFFFFFFFFFFFFFFFFFFFFFFFBB(
			Match targetMatch, Match sourceMatch) {
		EObject _localVariable_0 = targetMatch.getObject("exprIterationLiteral");
		EObject _localVariable_1 = targetMatch.getObject("javaPackage");
		EObject _localVariable_2 = targetMatch.getObject("exprRetGetKey");
		EObject _localVariable_3 = targetMatch.getObject("exprOutputSizeLiteral");
		EObject _localVariable_4 = targetMatch.getObject("kdaJcu");
		EObject _localVariable_5 = targetMatch.getObject("methodPerformEncryption");
		EObject _localVariable_6 = targetMatch.getObject("sbcJcu");
		EObject _localVariable_7 = targetMatch.getObject("keyEncryption");
		EObject _localVariable_8 = targetMatch.getObject("dataEncryption");
		EObject _localVariable_9 = targetMatch.getObject("methodGetKey");
		EObject _localVariable_10 = targetMatch.getObject("exprAlgNameLiteral");
		EObject _localVariable_11 = targetMatch.getObject("pwdDeclaration");
		EObject _localVariable_12 = sourceMatch.getObject("kda");
		EObject _localVariable_13 = targetMatch.getObject("methodPerformGetKey");
		EObject _localVariable_14 = targetMatch.getObject("statRetPerformEncryption");
		EObject _localVariable_15 = targetMatch.getObject("exprKeyName");
		EObject _localVariable_16 = targetMatch.getObject("exprNameModePadding");
		EObject _localVariable_17 = targetMatch.getObject("methodEncryption");
		EObject _localVariable_18 = sourceMatch.getObject("task");
		EObject _localVariable_19 = targetMatch.getObject("exprPwdName");
		EObject _localVariable_20 = sourceMatch.getObject("sbc");
		EObject _localVariable_21 = targetMatch.getObject("exprDataName");
		EObject _localVariable_22 = targetMatch.getObject("exprRetPerformEncryption");
		EObject _localVariable_23 = targetMatch.getObject("statRetGetKey");
		EObject tmpExprIterationLiteral = _localVariable_0;
		EObject tmpJavaPackage = _localVariable_1;
		EObject tmpExprRetGetKey = _localVariable_2;
		EObject tmpExprOutputSizeLiteral = _localVariable_3;
		EObject tmpKdaJcu = _localVariable_4;
		EObject tmpMethodPerformEncryption = _localVariable_5;
		EObject tmpSbcJcu = _localVariable_6;
		EObject tmpKeyEncryption = _localVariable_7;
		EObject tmpDataEncryption = _localVariable_8;
		EObject tmpMethodGetKey = _localVariable_9;
		EObject tmpExprAlgNameLiteral = _localVariable_10;
		EObject tmpPwdDeclaration = _localVariable_11;
		EObject tmpKda = _localVariable_12;
		EObject tmpMethodPerformGetKey = _localVariable_13;
		EObject tmpStatRetPerformEncryption = _localVariable_14;
		EObject tmpExprKeyName = _localVariable_15;
		EObject tmpExprNameModePadding = _localVariable_16;
		EObject tmpMethodEncryption = _localVariable_17;
		EObject tmpTask = _localVariable_18;
		EObject tmpExprPwdName = _localVariable_19;
		EObject tmpSbc = _localVariable_20;
		EObject tmpExprDataName = _localVariable_21;
		EObject tmpExprRetPerformEncryption = _localVariable_22;
		EObject tmpStatRetGetKey = _localVariable_23;
		if (tmpExprIterationLiteral instanceof JavaLiteral) {
			JavaLiteral exprIterationLiteral = (JavaLiteral) tmpExprIterationLiteral;
			if (tmpJavaPackage instanceof JavaPackage) {
				JavaPackage javaPackage = (JavaPackage) tmpJavaPackage;
				if (tmpExprRetGetKey instanceof JavaMethodInvocation) {
					JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) tmpExprRetGetKey;
					if (tmpExprOutputSizeLiteral instanceof JavaLiteral) {
						JavaLiteral exprOutputSizeLiteral = (JavaLiteral) tmpExprOutputSizeLiteral;
						if (tmpKdaJcu instanceof JavaCompilationUnit) {
							JavaCompilationUnit kdaJcu = (JavaCompilationUnit) tmpKdaJcu;
							if (tmpMethodPerformEncryption instanceof JavaOpaqueMethod) {
								JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) tmpMethodPerformEncryption;
								if (tmpSbcJcu instanceof JavaCompilationUnit) {
									JavaCompilationUnit sbcJcu = (JavaCompilationUnit) tmpSbcJcu;
									if (tmpKeyEncryption instanceof JavaVariableDeclaration) {
										JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) tmpKeyEncryption;
										if (tmpDataEncryption instanceof JavaVariableDeclaration) {
											JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) tmpDataEncryption;
											if (tmpMethodGetKey instanceof JavaWorkflowMethod) {
												JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) tmpMethodGetKey;
												if (tmpExprAlgNameLiteral instanceof JavaLiteral) {
													JavaLiteral exprAlgNameLiteral = (JavaLiteral) tmpExprAlgNameLiteral;
													if (tmpPwdDeclaration instanceof JavaVariableDeclaration) {
														JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) tmpPwdDeclaration;
														if (tmpKda instanceof KeyDerivationAlgorithm) {
															KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) tmpKda;
															if (tmpMethodPerformGetKey instanceof JavaOpaqueMethod) {
																JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) tmpMethodPerformGetKey;
																if (tmpStatRetPerformEncryption instanceof JavaStatement) {
																	JavaStatement statRetPerformEncryption = (JavaStatement) tmpStatRetPerformEncryption;
																	if (tmpExprKeyName instanceof JavaName) {
																		JavaName exprKeyName = (JavaName) tmpExprKeyName;
																		if (tmpExprNameModePadding instanceof JavaLiteral) {
																			JavaLiteral exprNameModePadding = (JavaLiteral) tmpExprNameModePadding;
																			if (tmpMethodEncryption instanceof JavaWorkflowMethod) {
																				JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) tmpMethodEncryption;
																				if (tmpTask instanceof Task) {
																					Task task = (Task) tmpTask;
																					if (tmpExprPwdName instanceof JavaName) {
																						JavaName exprPwdName = (JavaName) tmpExprPwdName;
																						if (tmpSbc instanceof SymmetricBlockCipher) {
																							SymmetricBlockCipher sbc = (SymmetricBlockCipher) tmpSbc;
																							if (tmpExprDataName instanceof JavaName) {
																								JavaName exprDataName = (JavaName) tmpExprDataName;
																								if (tmpExprRetPerformEncryption instanceof JavaMethodInvocation) {
																									JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) tmpExprRetPerformEncryption;
																									if (tmpStatRetGetKey instanceof JavaStatement) {
																										JavaStatement statRetGetKey = (JavaStatement) tmpStatRetGetKey;
																										return new Object[] {
																												exprIterationLiteral,
																												javaPackage,
																												exprRetGetKey,
																												exprOutputSizeLiteral,
																												kdaJcu,
																												methodPerformEncryption,
																												sbcJcu,
																												keyEncryption,
																												dataEncryption,
																												methodGetKey,
																												exprAlgNameLiteral,
																												pwdDeclaration,
																												kda,
																												methodPerformGetKey,
																												statRetPerformEncryption,
																												exprKeyName,
																												exprNameModePadding,
																												methodEncryption,
																												task,
																												exprPwdName,
																												sbc,
																												exprDataName,
																												exprRetPerformEncryption,
																												statRetGetKey,
																												targetMatch,
																												sourceMatch };
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_blackBBBBBBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			KeyDerivationAlgorithm kda, JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption,
			JavaName exprKeyName, JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, Task task,
			JavaName exprPwdName, SymmetricBlockCipher sbc, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey, Match sourceMatch,
			Match targetMatch) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			if (!sourceMatch.equals(targetMatch)) {
																				int exprIterationLiteral_index = exprIterationLiteral
																						.getIndex();
																				if (Integer.valueOf(
																						exprIterationLiteral_index)
																						.equals(Integer.valueOf(2))) {
																					String exprRetGetKey_name = exprRetGetKey
																							.getName();
																					if (exprRetGetKey_name
																							.equals("performGetKey")) {
																						int exprOutputSizeLiteral_index = exprOutputSizeLiteral
																								.getIndex();
																						if (Integer.valueOf(
																								exprOutputSizeLiteral_index)
																								.equals(Integer
																										.valueOf(3))) {
																							String kdaJcu_name = kdaJcu
																									.getName();
																							if (kdaJcu_name.equals(
																									"KeyDeriv")) {
																								String methodPerformEncryption_modifier = methodPerformEncryption
																										.getModifier();
																								if (methodPerformEncryption_modifier
																										.equals("private")) {
																									String methodPerformEncryption_name = methodPerformEncryption
																											.getName();
																									if (methodPerformEncryption_name
																											.equals("performEncryption")) {
																										String methodPerformEncryption_type = methodPerformEncryption
																												.getType();
																										if (methodPerformEncryption_type
																												.equals("byte[] ")) {
																											String keyEncryption_type = keyEncryption
																													.getType();
																											if (keyEncryption_type
																													.equals("SecretKey")) {
																												int keyEncryption_index = keyEncryption
																														.getIndex();
																												if (Integer
																														.valueOf(
																																keyEncryption_index)
																														.equals(Integer
																																.valueOf(
																																		1))) {
																													String keyEncryption_name = keyEncryption
																															.getName();
																													if (keyEncryption_name
																															.equals("key")) {
																														int dataEncryption_index = dataEncryption
																																.getIndex();
																														if (Integer
																																.valueOf(
																																		dataEncryption_index)
																																.equals(Integer
																																		.valueOf(
																																				0))) {
																															String dataEncryption_type = dataEncryption
																																	.getType();
																															if (dataEncryption_type
																																	.equals("byte[]")) {
																																String dataEncryption_name = dataEncryption
																																		.getName();
																																if (dataEncryption_name
																																		.equals("data")) {
																																	String methodGetKey_modifier = methodGetKey
																																			.getModifier();
																																	if (methodGetKey_modifier
																																			.equals("public")) {
																																		String methodGetKey_type = methodGetKey
																																				.getType();
																																		if (methodGetKey_type
																																				.equals("SecretKey ")) {
																																			String methodGetKey_name = methodGetKey
																																					.getName();
																																			if (methodGetKey_name
																																					.equals("getKey")) {
																																				int exprAlgNameLiteral_index = exprAlgNameLiteral
																																						.getIndex();
																																				if (Integer
																																						.valueOf(
																																								exprAlgNameLiteral_index)
																																						.equals(Integer
																																								.valueOf(
																																										1))) {
																																					String pwdDeclaration_name = pwdDeclaration
																																							.getName();
																																					if (pwdDeclaration_name
																																							.equals("pwd")) {
																																						int pwdDeclaration_index = pwdDeclaration
																																								.getIndex();
																																						if (Integer
																																								.valueOf(
																																										pwdDeclaration_index)
																																								.equals(Integer
																																										.valueOf(
																																												0))) {
																																							String pwdDeclaration_type = pwdDeclaration
																																									.getType();
																																							if (pwdDeclaration_type
																																									.equals("char[]")) {
																																								String methodPerformGetKey_name = methodPerformGetKey
																																										.getName();
																																								if (methodPerformGetKey_name
																																										.equals("performGetKey")) {
																																									String methodPerformGetKey_type = methodPerformGetKey
																																											.getType();
																																									if (methodPerformGetKey_type
																																											.equals("SecretKey ")) {
																																										String methodPerformGetKey_modifier = methodPerformGetKey
																																												.getModifier();
																																										if (methodPerformGetKey_modifier
																																												.equals("private")) {
																																											boolean statRetPerformEncryption_return = statRetPerformEncryption
																																													.isReturn();
																																											if (Boolean
																																													.valueOf(
																																															statRetPerformEncryption_return)
																																													.equals(Boolean
																																															.valueOf(
																																																	true))) {
																																												int exprKeyName_index = exprKeyName
																																														.getIndex();
																																												if (Integer
																																														.valueOf(
																																																exprKeyName_index)
																																														.equals(Integer
																																																.valueOf(
																																																		1))) {
																																													String exprKeyName_identifier = exprKeyName
																																															.getIdentifier();
																																													if (exprKeyName_identifier
																																															.equals("key")) {
																																														int exprNameModePadding_index = exprNameModePadding
																																																.getIndex();
																																														if (Integer
																																																.valueOf(
																																																		exprNameModePadding_index)
																																																.equals(Integer
																																																		.valueOf(
																																																				2))) {
																																															String methodEncryption_type = methodEncryption
																																																	.getType();
																																															if (methodEncryption_type
																																																	.equals("byte[] ")) {
																																																String methodEncryption_modifier = methodEncryption
																																																		.getModifier();
																																																if (methodEncryption_modifier
																																																		.equals("public")) {
																																																	String methodEncryption_name = methodEncryption
																																																			.getName();
																																																	if (methodEncryption_name
																																																			.equals("encrypt")) {
																																																		String task_description = task
																																																				.getDescription();
																																																		if (task_description
																																																				.equals("PasswordBasedEncryption")) {
																																																			String exprPwdName_identifier = exprPwdName
																																																					.getIdentifier();
																																																			if (exprPwdName_identifier
																																																					.equals("pwd")) {
																																																				int exprPwdName_index = exprPwdName
																																																						.getIndex();
																																																				if (Integer
																																																						.valueOf(
																																																								exprPwdName_index)
																																																						.equals(Integer
																																																								.valueOf(
																																																										0))) {
																																																					int exprDataName_index = exprDataName
																																																							.getIndex();
																																																					if (Integer
																																																							.valueOf(
																																																									exprDataName_index)
																																																							.equals(Integer
																																																									.valueOf(
																																																											0))) {
																																																						String exprDataName_identifier = exprDataName
																																																								.getIdentifier();
																																																						if (exprDataName_identifier
																																																								.equals("data")) {
																																																							String exprRetPerformEncryption_name = exprRetPerformEncryption
																																																									.getName();
																																																							if (exprRetPerformEncryption_name
																																																									.equals("performEncryption")) {
																																																								boolean statRetGetKey_return = statRetGetKey
																																																										.isReturn();
																																																								if (Boolean
																																																										.valueOf(
																																																												statRetGetKey_return)
																																																										.equals(Boolean
																																																												.valueOf(
																																																														true))) {
																																																									return new Object[] {
																																																											exprIterationLiteral,
																																																											javaPackage,
																																																											exprRetGetKey,
																																																											exprOutputSizeLiteral,
																																																											kdaJcu,
																																																											methodPerformEncryption,
																																																											sbcJcu,
																																																											keyEncryption,
																																																											dataEncryption,
																																																											methodGetKey,
																																																											exprAlgNameLiteral,
																																																											pwdDeclaration,
																																																											kda,
																																																											methodPerformGetKey,
																																																											statRetPerformEncryption,
																																																											exprKeyName,
																																																											exprNameModePadding,
																																																											methodEncryption,
																																																											task,
																																																											exprPwdName,
																																																											sbc,
																																																											exprDataName,
																																																											exprRetPerformEncryption,
																																																											statRetGetKey,
																																																											sourceMatch,
																																																											targetMatch };
																																																								}

																																																							}

																																																						}

																																																					}

																																																				}

																																																			}

																																																		}

																																																	}

																																																}

																																															}

																																														}

																																													}

																																												}

																																											}

																																										}

																																									}

																																								}

																																							}

																																						}

																																					}

																																				}

																																			}

																																		}

																																	}

																																}

																															}

																														}

																													}

																												}

																											}

																										}

																									}

																								}

																							}

																						}

																					}

																				}

																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_bindingAndBlackFFFFFFFFFFFFFFFFFFFFFFFFBB(
			Match sourceMatch, Match targetMatch) {
		Object[] result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding = pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_bindingFFFFFFFFFFFFFFFFFFFFFFFFBB(
				targetMatch, sourceMatch);
		if (result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding != null) {
			JavaLiteral exprIterationLiteral = (JavaLiteral) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[0];
			JavaPackage javaPackage = (JavaPackage) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[1];
			JavaMethodInvocation exprRetGetKey = (JavaMethodInvocation) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[2];
			JavaLiteral exprOutputSizeLiteral = (JavaLiteral) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[3];
			JavaCompilationUnit kdaJcu = (JavaCompilationUnit) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[4];
			JavaOpaqueMethod methodPerformEncryption = (JavaOpaqueMethod) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[5];
			JavaCompilationUnit sbcJcu = (JavaCompilationUnit) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[6];
			JavaVariableDeclaration keyEncryption = (JavaVariableDeclaration) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[7];
			JavaVariableDeclaration dataEncryption = (JavaVariableDeclaration) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[8];
			JavaWorkflowMethod methodGetKey = (JavaWorkflowMethod) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[9];
			JavaLiteral exprAlgNameLiteral = (JavaLiteral) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[10];
			JavaVariableDeclaration pwdDeclaration = (JavaVariableDeclaration) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[11];
			KeyDerivationAlgorithm kda = (KeyDerivationAlgorithm) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[12];
			JavaOpaqueMethod methodPerformGetKey = (JavaOpaqueMethod) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[13];
			JavaStatement statRetPerformEncryption = (JavaStatement) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[14];
			JavaName exprKeyName = (JavaName) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[15];
			JavaLiteral exprNameModePadding = (JavaLiteral) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[16];
			JavaWorkflowMethod methodEncryption = (JavaWorkflowMethod) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[17];
			Task task = (Task) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[18];
			JavaName exprPwdName = (JavaName) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[19];
			SymmetricBlockCipher sbc = (SymmetricBlockCipher) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[20];
			JavaName exprDataName = (JavaName) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[21];
			JavaMethodInvocation exprRetPerformEncryption = (JavaMethodInvocation) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[22];
			JavaStatement statRetGetKey = (JavaStatement) result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_binding[23];

			Object[] result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_black = pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_blackBBBBBBBBBBBBBBBBBBBBBBBBBB(
					exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
					methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral,
					pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
					exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
					exprRetPerformEncryption, statRetGetKey, sourceMatch, targetMatch);
			if (result_pattern_PasswordBasedEncryption_24_2_matchsrctrgcontext_black != null) {

				return new Object[] { exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
						methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
						exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
						exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
						exprRetPerformEncryption, statRetGetKey, sourceMatch, targetMatch };
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_3_solvecsp_bindingFBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, KeyDerivationAlgorithm kda, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, Task task, JavaName exprPwdName, SymmetricBlockCipher sbc,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey,
			Match sourceMatch, Match targetMatch) {
		CSP _localVariable_24 = _this.isApplicable_solveCsp_CC(exprIterationLiteral, javaPackage, exprRetGetKey,
				exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
				methodGetKey, exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption,
				exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
				exprRetPerformEncryption, statRetGetKey, sourceMatch, targetMatch);
		CSP csp = _localVariable_24;
		if (csp != null) {
			return new Object[] { csp, _this, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral,
					kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey,
					exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName,
					exprNameModePadding, methodEncryption, task, exprPwdName, sbc, exprDataName,
					exprRetPerformEncryption, statRetGetKey, sourceMatch, targetMatch };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_3_solvecsp_blackB(CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_3_solvecsp_bindingAndBlackFBBBBBBBBBBBBBBBBBBBBBBBBBBB(
			PasswordBasedEncryption _this, JavaLiteral exprIterationLiteral, JavaPackage javaPackage,
			JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu,
			JavaOpaqueMethod methodPerformEncryption, JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, KeyDerivationAlgorithm kda, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, Task task, JavaName exprPwdName, SymmetricBlockCipher sbc,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey,
			Match sourceMatch, Match targetMatch) {
		Object[] result_pattern_PasswordBasedEncryption_24_3_solvecsp_binding = pattern_PasswordBasedEncryption_24_3_solvecsp_bindingFBBBBBBBBBBBBBBBBBBBBBBBBBBB(
				_this, exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
				methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral,
				pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
				methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption, statRetGetKey,
				sourceMatch, targetMatch);
		if (result_pattern_PasswordBasedEncryption_24_3_solvecsp_binding != null) {
			CSP csp = (CSP) result_pattern_PasswordBasedEncryption_24_3_solvecsp_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_24_3_solvecsp_black = pattern_PasswordBasedEncryption_24_3_solvecsp_blackB(
					csp);
			if (result_pattern_PasswordBasedEncryption_24_3_solvecsp_black != null) {

				return new Object[] { csp, _this, exprIterationLiteral, javaPackage, exprRetGetKey,
						exprOutputSizeLiteral, kdaJcu, methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption,
						methodGetKey, exprAlgNameLiteral, pwdDeclaration, kda, methodPerformGetKey,
						statRetPerformEncryption, exprKeyName, exprNameModePadding, methodEncryption, task, exprPwdName,
						sbc, exprDataName, exprRetPerformEncryption, statRetGetKey, sourceMatch, targetMatch };
			}
		}
		return null;
	}

	public static final boolean pattern_PasswordBasedEncryption_24_4_checkCSP_expressionFB(CSP csp) {
		boolean _localVariable_0 = csp.check();
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Iterable<Object[]> pattern_PasswordBasedEncryption_24_5_matchcorrcontext_blackBB(
			Match sourceMatch, Match targetMatch) {
		LinkedList<Object[]> _result = new LinkedList<Object[]>();
		if (!sourceMatch.equals(targetMatch)) {
			_result.add(new Object[] { sourceMatch, targetMatch });
		}
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_5_matchcorrcontext_greenBBF(Match sourceMatch,
			Match targetMatch) {
		CCMatch ccMatch = RuntimeFactory.eINSTANCE.createCCMatch();
		String ccMatch_ruleName_prime = "PasswordBasedEncryption";
		ccMatch.setSourceMatch(sourceMatch);
		ccMatch.setTargetMatch(targetMatch);
		ccMatch.setRuleName(ccMatch_ruleName_prime);
		return new Object[] { sourceMatch, targetMatch, ccMatch };
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_6_createcorrespondence_blackBBBBBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			KeyDerivationAlgorithm kda, JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption,
			JavaName exprKeyName, JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, Task task,
			JavaName exprPwdName, SymmetricBlockCipher sbc, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey, CCMatch ccMatch) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			return new Object[] { exprIterationLiteral,
																					javaPackage, exprRetGetKey,
																					exprOutputSizeLiteral, kdaJcu,
																					methodPerformEncryption, sbcJcu,
																					keyEncryption, dataEncryption,
																					methodGetKey, exprAlgNameLiteral,
																					pwdDeclaration, kda,
																					methodPerformGetKey,
																					statRetPerformEncryption,
																					exprKeyName, exprNameModePadding,
																					methodEncryption, task, exprPwdName,
																					sbc, exprDataName,
																					exprRetPerformEncryption,
																					statRetGetKey, ccMatch };
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_6_createcorrespondence_greenBFBBFBBBFB(
			JavaPackage javaPackage, JavaCompilationUnit kdaJcu, JavaCompilationUnit sbcJcu, KeyDerivationAlgorithm kda,
			Task task, SymmetricBlockCipher sbc, CCMatch ccMatch) {
		SymmetricBlockCipherToJcu sbc2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createSymmetricBlockCipherToJcu();
		TaskToJavaPackage t2c = CryptoConfigToJavaFactory.eINSTANCE.createTaskToJavaPackage();
		KeyDerivationAlgorithmToJcu kda2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createKeyDerivationAlgorithmToJcu();
		sbc2Jcu.setTarget(sbcJcu);
		sbc2Jcu.setSource(sbc);
		ccMatch.getCreateCorr().add(sbc2Jcu);
		t2c.setSource(task);
		t2c.setTarget(javaPackage);
		ccMatch.getCreateCorr().add(t2c);
		kda2Jcu.setSource(kda);
		kda2Jcu.setTarget(kdaJcu);
		ccMatch.getCreateCorr().add(kda2Jcu);
		return new Object[] { javaPackage, sbc2Jcu, kdaJcu, sbcJcu, t2c, kda, task, sbc, kda2Jcu, ccMatch };
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_7_addtoreturnedresult_blackBB(
			IsApplicableRuleResult result, CCMatch ccMatch) {
		return new Object[] { result, ccMatch };
	}

	public static final Object[] pattern_PasswordBasedEncryption_24_7_addtoreturnedresult_greenBB(
			IsApplicableRuleResult result, CCMatch ccMatch) {
		result.getIsApplicableMatch().add(ccMatch);
		boolean result_success_prime = Boolean.valueOf(true);
		String ccMatch_ruleName_prime = "PasswordBasedEncryption";
		result.setSuccess(Boolean.valueOf(result_success_prime));
		ccMatch.setRuleName(ccMatch_ruleName_prime);
		return new Object[] { result, ccMatch };
	}

	public static final IsApplicableRuleResult pattern_PasswordBasedEncryption_24_8_expressionFB(
			IsApplicableRuleResult result) {
		IsApplicableRuleResult _result = result;
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_27_1_matchtggpattern_black_nac_0BBB(Task task,
			KeyDerivationAlgorithm kda, SymmetricBlockCipher sbc) {
		for (Algorithm __DEC_task_algorithms_643949 : task.getAlgorithms()) {
			if (!kda.equals(__DEC_task_algorithms_643949)) {
				if (!sbc.equals(__DEC_task_algorithms_643949)) {
					return new Object[] { task, kda, sbc };
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_27_1_matchtggpattern_blackBBB(
			KeyDerivationAlgorithm kda, Task task, SymmetricBlockCipher sbc) {
		if (task.getAlgorithms().contains(kda)) {
			if (task.getAlgorithms().contains(sbc)) {
				if (pattern_PasswordBasedEncryption_27_1_matchtggpattern_black_nac_0BBB(task, kda, sbc) == null) {
					return new Object[] { kda, task, sbc };
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_27_1_matchtggpattern_greenB(Task task) {
		String task_description_prime = "PasswordBasedEncryption";
		task.setDescription(task_description_prime);
		return new Object[] { task };
	}

	public static final boolean pattern_PasswordBasedEncryption_27_2_expressionF() {
		boolean _result = Boolean.valueOf(true);
		return _result;
	}

	public static final boolean pattern_PasswordBasedEncryption_27_3_expressionF() {
		boolean _result = Boolean.valueOf(false);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_0BBB(
			JavaLiteral exprIterationLiteral, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprIterationLiteral_expr_565657 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprIterationLiteral, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprIterationLiteral_expr_565657)) {
					if (!statRetGetKey.equals(__DEC_exprIterationLiteral_expr_565657)) {
						return new Object[] { exprIterationLiteral, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_1BBB(
			JavaPackage javaPackage, JavaCompilationUnit kdaJcu, JavaCompilationUnit sbcJcu) {
		if (!kdaJcu.equals(sbcJcu)) {
			for (JavaCompilationUnit __DEC_javaPackage_cunits_147880 : javaPackage.getCunits()) {
				if (!kdaJcu.equals(__DEC_javaPackage_cunits_147880)) {
					if (!sbcJcu.equals(__DEC_javaPackage_cunits_147880)) {
						return new Object[] { javaPackage, kdaJcu, sbcJcu };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_2BB(
			JavaMethodInvocation exprRetGetKey, JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_exprRetGetKey_arguments_750702 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprRetGetKey, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_exprRetGetKey_arguments_750702)) {
					if (!exprRetPerformEncryption.equals(__DEC_exprRetGetKey_arguments_750702)) {
						return new Object[] { exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_3BBB(
			JavaLiteral exprOutputSizeLiteral, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprOutputSizeLiteral_expr_869876 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprOutputSizeLiteral, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprOutputSizeLiteral_expr_869876)) {
					if (!statRetGetKey.equals(__DEC_exprOutputSizeLiteral_expr_869876)) {
						return new Object[] { exprOutputSizeLiteral, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_4BBB(
			JavaVariableDeclaration keyEncryption, JavaStatement statRetPerformEncryption,
			JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_keyEncryption_expr_67092 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(keyEncryption, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_keyEncryption_expr_67092)) {
					if (!statRetGetKey.equals(__DEC_keyEncryption_expr_67092)) {
						return new Object[] { keyEncryption, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_5BBB(
			JavaVariableDeclaration keyEncryption, JavaMethodInvocation exprRetGetKey,
			JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_keyEncryption_arguments_834317 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(keyEncryption, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_keyEncryption_arguments_834317)) {
					if (!exprRetPerformEncryption.equals(__DEC_keyEncryption_arguments_834317)) {
						return new Object[] { keyEncryption, exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_6BBB(
			JavaVariableDeclaration dataEncryption, JavaStatement statRetPerformEncryption,
			JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_dataEncryption_expr_808884 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(dataEncryption, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_dataEncryption_expr_808884)) {
					if (!statRetGetKey.equals(__DEC_dataEncryption_expr_808884)) {
						return new Object[] { dataEncryption, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_7BBB(
			JavaVariableDeclaration dataEncryption, JavaMethodInvocation exprRetGetKey,
			JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_dataEncryption_arguments_500339 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(dataEncryption, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_dataEncryption_arguments_500339)) {
					if (!exprRetPerformEncryption.equals(__DEC_dataEncryption_arguments_500339)) {
						return new Object[] { dataEncryption, exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_8BBB(
			JavaWorkflowMethod methodGetKey, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_methodGetKey_statements_402408 : methodGetKey.getStatements()) {
				if (!statRetPerformEncryption.equals(__DEC_methodGetKey_statements_402408)) {
					if (!statRetGetKey.equals(__DEC_methodGetKey_statements_402408)) {
						return new Object[] { methodGetKey, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_9BBB(
			JavaLiteral exprAlgNameLiteral, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprAlgNameLiteral_expr_849695 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprAlgNameLiteral, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprAlgNameLiteral_expr_849695)) {
					if (!statRetGetKey.equals(__DEC_exprAlgNameLiteral_expr_849695)) {
						return new Object[] { exprAlgNameLiteral, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_10BBB(
			JavaVariableDeclaration pwdDeclaration, JavaStatement statRetPerformEncryption,
			JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_pwdDeclaration_expr_549613 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(pwdDeclaration, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_pwdDeclaration_expr_549613)) {
					if (!statRetGetKey.equals(__DEC_pwdDeclaration_expr_549613)) {
						return new Object[] { pwdDeclaration, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_11BBB(
			JavaVariableDeclaration pwdDeclaration, JavaMethodInvocation exprRetGetKey,
			JavaMethodInvocation exprRetPerformEncryption) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_pwdDeclaration_arguments_544607 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(pwdDeclaration, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetGetKey.equals(__DEC_pwdDeclaration_arguments_544607)) {
					if (!exprRetPerformEncryption.equals(__DEC_pwdDeclaration_arguments_544607)) {
						return new Object[] { pwdDeclaration, exprRetGetKey, exprRetPerformEncryption };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_12BBB(
			JavaName exprKeyName, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprKeyName_expr_96653 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprKeyName, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprKeyName_expr_96653)) {
					if (!statRetGetKey.equals(__DEC_exprKeyName_expr_96653)) {
						return new Object[] { exprKeyName, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_13BBB(
			JavaLiteral exprNameModePadding, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprNameModePadding_expr_836933 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprNameModePadding, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprNameModePadding_expr_836933)) {
					if (!statRetGetKey.equals(__DEC_exprNameModePadding_expr_836933)) {
						return new Object[] { exprNameModePadding, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_14BBB(
			JavaWorkflowMethod methodEncryption, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_methodEncryption_statements_884786 : methodEncryption.getStatements()) {
				if (!statRetPerformEncryption.equals(__DEC_methodEncryption_statements_884786)) {
					if (!statRetGetKey.equals(__DEC_methodEncryption_statements_884786)) {
						return new Object[] { methodEncryption, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_15BBB(
			JavaName exprPwdName, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprPwdName_expr_809574 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprPwdName, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprPwdName_expr_809574)) {
					if (!statRetGetKey.equals(__DEC_exprPwdName_expr_809574)) {
						return new Object[] { exprPwdName, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_16BBB(
			JavaName exprDataName, JavaStatement statRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!statRetGetKey.equals(statRetPerformEncryption)) {
			for (JavaStatement __DEC_exprDataName_expr_236607 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprDataName, JavaStatement.class, "expr")) {
				if (!statRetPerformEncryption.equals(__DEC_exprDataName_expr_236607)) {
					if (!statRetGetKey.equals(__DEC_exprDataName_expr_236607)) {
						return new Object[] { exprDataName, statRetPerformEncryption, statRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_17BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaMethodInvocation exprRetGetKey) {
		if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
			for (JavaMethodInvocation __DEC_exprRetPerformEncryption_arguments_748798 : org.moflon.core.utilities.eMoflonEMFUtil
					.getOppositeReferenceTyped(exprRetPerformEncryption, JavaMethodInvocation.class, "arguments")) {
				if (!exprRetPerformEncryption.equals(__DEC_exprRetPerformEncryption_arguments_748798)) {
					if (!exprRetGetKey.equals(__DEC_exprRetPerformEncryption_arguments_748798)) {
						return new Object[] { exprRetPerformEncryption, exprRetGetKey };
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_18BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprIterationLiteral) {
		if (exprIterationLiteral.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprIterationLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_19BB(
			JavaStatement statRetGetKey, JavaLiteral exprIterationLiteral) {
		if (exprIterationLiteral.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprIterationLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_20BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprOutputSizeLiteral) {
		if (exprOutputSizeLiteral.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprOutputSizeLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_21BB(
			JavaStatement statRetGetKey, JavaLiteral exprOutputSizeLiteral) {
		if (exprOutputSizeLiteral.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprOutputSizeLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_22BB(
			JavaStatement statRetPerformEncryption, JavaVariableDeclaration keyEncryption) {
		if (keyEncryption.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_23BB(
			JavaStatement statRetGetKey, JavaVariableDeclaration keyEncryption) {
		if (keyEncryption.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_24BB(
			JavaMethodInvocation exprRetGetKey, JavaVariableDeclaration keyEncryption) {
		if (exprRetGetKey.getArguments().contains(keyEncryption)) {
			return new Object[] { exprRetGetKey, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_25BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaVariableDeclaration keyEncryption) {
		if (exprRetPerformEncryption.getArguments().contains(keyEncryption)) {
			return new Object[] { exprRetPerformEncryption, keyEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_26BB(
			JavaStatement statRetPerformEncryption, JavaVariableDeclaration dataEncryption) {
		if (dataEncryption.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_27BB(
			JavaStatement statRetGetKey, JavaVariableDeclaration dataEncryption) {
		if (dataEncryption.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_28BB(
			JavaMethodInvocation exprRetGetKey, JavaVariableDeclaration dataEncryption) {
		if (exprRetGetKey.getArguments().contains(dataEncryption)) {
			return new Object[] { exprRetGetKey, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_29BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaVariableDeclaration dataEncryption) {
		if (exprRetPerformEncryption.getArguments().contains(dataEncryption)) {
			return new Object[] { exprRetPerformEncryption, dataEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_30BB(
			JavaWorkflowMethod methodGetKey, JavaStatement statRetPerformEncryption) {
		if (methodGetKey.getStatements().contains(statRetPerformEncryption)) {
			return new Object[] { methodGetKey, statRetPerformEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_31BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprAlgNameLiteral) {
		if (exprAlgNameLiteral.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprAlgNameLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_32BB(
			JavaStatement statRetGetKey, JavaLiteral exprAlgNameLiteral) {
		if (exprAlgNameLiteral.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprAlgNameLiteral };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_33BB(
			JavaStatement statRetPerformEncryption, JavaVariableDeclaration pwdDeclaration) {
		if (pwdDeclaration.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_34BB(
			JavaStatement statRetGetKey, JavaVariableDeclaration pwdDeclaration) {
		if (pwdDeclaration.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_35BB(
			JavaMethodInvocation exprRetGetKey, JavaVariableDeclaration pwdDeclaration) {
		if (exprRetGetKey.getArguments().contains(pwdDeclaration)) {
			return new Object[] { exprRetGetKey, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_36BB(
			JavaMethodInvocation exprRetPerformEncryption, JavaVariableDeclaration pwdDeclaration) {
		if (exprRetPerformEncryption.getArguments().contains(pwdDeclaration)) {
			return new Object[] { exprRetPerformEncryption, pwdDeclaration };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_37BB(
			JavaStatement statRetPerformEncryption, JavaName exprKeyName) {
		if (exprKeyName.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprKeyName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_38BB(
			JavaStatement statRetGetKey, JavaName exprKeyName) {
		if (exprKeyName.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprKeyName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_39BB(
			JavaStatement statRetPerformEncryption, JavaLiteral exprNameModePadding) {
		if (exprNameModePadding.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprNameModePadding };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_40BB(
			JavaStatement statRetGetKey, JavaLiteral exprNameModePadding) {
		if (exprNameModePadding.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprNameModePadding };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_41BB(
			JavaWorkflowMethod methodEncryption, JavaStatement statRetGetKey) {
		if (methodEncryption.getStatements().contains(statRetGetKey)) {
			return new Object[] { methodEncryption, statRetGetKey };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_42BB(
			JavaStatement statRetPerformEncryption, JavaName exprPwdName) {
		if (exprPwdName.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprPwdName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_43BB(
			JavaStatement statRetGetKey, JavaName exprPwdName) {
		if (exprPwdName.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprPwdName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_44BB(
			JavaStatement statRetPerformEncryption, JavaName exprDataName) {
		if (exprDataName.equals(statRetPerformEncryption.getExpr())) {
			return new Object[] { statRetPerformEncryption, exprDataName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_45BB(
			JavaStatement statRetGetKey, JavaName exprDataName) {
		if (exprDataName.equals(statRetGetKey.getExpr())) {
			return new Object[] { statRetGetKey, exprDataName };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_46BB(
			JavaMethodInvocation exprRetGetKey, JavaMethodInvocation exprRetPerformEncryption) {
		if (exprRetGetKey.getArguments().contains(exprRetPerformEncryption)) {
			return new Object[] { exprRetGetKey, exprRetPerformEncryption };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_blackBBBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaPackage javaPackage, JavaMethodInvocation exprRetGetKey,
			JavaLiteral exprOutputSizeLiteral, JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption,
			JavaCompilationUnit sbcJcu, JavaVariableDeclaration keyEncryption, JavaVariableDeclaration dataEncryption,
			JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral, JavaVariableDeclaration pwdDeclaration,
			JavaOpaqueMethod methodPerformGetKey, JavaStatement statRetPerformEncryption, JavaName exprKeyName,
			JavaLiteral exprNameModePadding, JavaWorkflowMethod methodEncryption, JavaName exprPwdName,
			JavaName exprDataName, JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		if (!exprIterationLiteral.equals(exprOutputSizeLiteral)) {
			if (!exprIterationLiteral.equals(exprNameModePadding)) {
				if (!exprRetGetKey.equals(exprRetPerformEncryption)) {
					if (!kdaJcu.equals(sbcJcu)) {
						if (!methodPerformEncryption.equals(methodPerformGetKey)) {
							if (!keyEncryption.equals(pwdDeclaration)) {
								if (!dataEncryption.equals(keyEncryption)) {
									if (!dataEncryption.equals(pwdDeclaration)) {
										if (!exprAlgNameLiteral.equals(exprIterationLiteral)) {
											if (!exprAlgNameLiteral.equals(exprOutputSizeLiteral)) {
												if (!exprAlgNameLiteral.equals(exprNameModePadding)) {
													if (!exprKeyName.equals(exprPwdName)) {
														if (!exprNameModePadding.equals(exprOutputSizeLiteral)) {
															if (!methodEncryption.equals(methodGetKey)) {
																if (!exprDataName.equals(exprKeyName)) {
																	if (!exprDataName.equals(exprPwdName)) {
																		if (!statRetGetKey
																				.equals(statRetPerformEncryption)) {
																			if (exprRetPerformEncryption.getArguments()
																					.contains(exprKeyName)) {
																				if (methodGetKey.getStatements()
																						.contains(statRetGetKey)) {
																					if (exprRetGetKey.getArguments()
																							.contains(exprPwdName)) {
																						if (exprRetPerformEncryption
																								.equals(statRetPerformEncryption
																										.getExpr())) {
																							if (exprRetGetKey.equals(
																									statRetGetKey
																											.getExpr())) {
																								if (kdaJcu.getMethods()
																										.contains(
																												methodGetKey)) {
																									if (sbcJcu
																											.getMethods()
																											.contains(
																													methodEncryption)) {
																										if (exprRetPerformEncryption
																												.getArguments()
																												.contains(
																														exprDataName)) {
																											if (methodEncryption
																													.getStatements()
																													.contains(
																															statRetPerformEncryption)) {
																												if (methodEncryption
																														.getParams()
																														.contains(
																																keyEncryption)) {
																													if (methodGetKey
																															.getParams()
																															.contains(
																																	pwdDeclaration)) {
																														if (javaPackage
																																.getCunits()
																																.contains(
																																		sbcJcu)) {
																															if (javaPackage
																																	.getCunits()
																																	.contains(
																																			kdaJcu)) {
																																if (methodEncryption
																																		.getParams()
																																		.contains(
																																				dataEncryption)) {
																																	if (exprRetGetKey
																																			.getArguments()
																																			.contains(
																																					exprOutputSizeLiteral)) {
																																		if (kdaJcu
																																				.getMethods()
																																				.contains(
																																						methodPerformGetKey)) {
																																			if (exprRetPerformEncryption
																																					.getArguments()
																																					.contains(
																																							exprNameModePadding)) {
																																				if (sbcJcu
																																						.getMethods()
																																						.contains(
																																								methodPerformEncryption)) {
																																					if (exprRetGetKey
																																							.getArguments()
																																							.contains(
																																									exprAlgNameLiteral)) {
																																						if (exprRetGetKey
																																								.getArguments()
																																								.contains(
																																										exprIterationLiteral)) {
																																							if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_0BBB(
																																									exprIterationLiteral,
																																									statRetPerformEncryption,
																																									statRetGetKey) == null) {
																																								if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_1BBB(
																																										javaPackage,
																																										kdaJcu,
																																										sbcJcu) == null) {
																																									if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_2BB(
																																											exprRetGetKey,
																																											exprRetPerformEncryption) == null) {
																																										if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_3BBB(
																																												exprOutputSizeLiteral,
																																												statRetPerformEncryption,
																																												statRetGetKey) == null) {
																																											if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_4BBB(
																																													keyEncryption,
																																													statRetPerformEncryption,
																																													statRetGetKey) == null) {
																																												if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_5BBB(
																																														keyEncryption,
																																														exprRetGetKey,
																																														exprRetPerformEncryption) == null) {
																																													if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_6BBB(
																																															dataEncryption,
																																															statRetPerformEncryption,
																																															statRetGetKey) == null) {
																																														if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_7BBB(
																																																dataEncryption,
																																																exprRetGetKey,
																																																exprRetPerformEncryption) == null) {
																																															if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_8BBB(
																																																	methodGetKey,
																																																	statRetPerformEncryption,
																																																	statRetGetKey) == null) {
																																																if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_9BBB(
																																																		exprAlgNameLiteral,
																																																		statRetPerformEncryption,
																																																		statRetGetKey) == null) {
																																																	if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_10BBB(
																																																			pwdDeclaration,
																																																			statRetPerformEncryption,
																																																			statRetGetKey) == null) {
																																																		if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_11BBB(
																																																				pwdDeclaration,
																																																				exprRetGetKey,
																																																				exprRetPerformEncryption) == null) {
																																																			if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_12BBB(
																																																					exprKeyName,
																																																					statRetPerformEncryption,
																																																					statRetGetKey) == null) {
																																																				if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_13BBB(
																																																						exprNameModePadding,
																																																						statRetPerformEncryption,
																																																						statRetGetKey) == null) {
																																																					if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_14BBB(
																																																							methodEncryption,
																																																							statRetPerformEncryption,
																																																							statRetGetKey) == null) {
																																																						if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_15BBB(
																																																								exprPwdName,
																																																								statRetPerformEncryption,
																																																								statRetGetKey) == null) {
																																																							if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_16BBB(
																																																									exprDataName,
																																																									statRetPerformEncryption,
																																																									statRetGetKey) == null) {
																																																								if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_17BB(
																																																										exprRetPerformEncryption,
																																																										exprRetGetKey) == null) {
																																																									if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_18BB(
																																																											statRetPerformEncryption,
																																																											exprIterationLiteral) == null) {
																																																										if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_19BB(
																																																												statRetGetKey,
																																																												exprIterationLiteral) == null) {
																																																											if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_20BB(
																																																													statRetPerformEncryption,
																																																													exprOutputSizeLiteral) == null) {
																																																												if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_21BB(
																																																														statRetGetKey,
																																																														exprOutputSizeLiteral) == null) {
																																																													if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_22BB(
																																																															statRetPerformEncryption,
																																																															keyEncryption) == null) {
																																																														if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_23BB(
																																																																statRetGetKey,
																																																																keyEncryption) == null) {
																																																															if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_24BB(
																																																																	exprRetGetKey,
																																																																	keyEncryption) == null) {
																																																																if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_25BB(
																																																																		exprRetPerformEncryption,
																																																																		keyEncryption) == null) {
																																																																	if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_26BB(
																																																																			statRetPerformEncryption,
																																																																			dataEncryption) == null) {
																																																																		if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_27BB(
																																																																				statRetGetKey,
																																																																				dataEncryption) == null) {
																																																																			if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_28BB(
																																																																					exprRetGetKey,
																																																																					dataEncryption) == null) {
																																																																				if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_29BB(
																																																																						exprRetPerformEncryption,
																																																																						dataEncryption) == null) {
																																																																					if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_30BB(
																																																																							methodGetKey,
																																																																							statRetPerformEncryption) == null) {
																																																																						if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_31BB(
																																																																								statRetPerformEncryption,
																																																																								exprAlgNameLiteral) == null) {
																																																																							if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_32BB(
																																																																									statRetGetKey,
																																																																									exprAlgNameLiteral) == null) {
																																																																								if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_33BB(
																																																																										statRetPerformEncryption,
																																																																										pwdDeclaration) == null) {
																																																																									if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_34BB(
																																																																											statRetGetKey,
																																																																											pwdDeclaration) == null) {
																																																																										if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_35BB(
																																																																												exprRetGetKey,
																																																																												pwdDeclaration) == null) {
																																																																											if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_36BB(
																																																																													exprRetPerformEncryption,
																																																																													pwdDeclaration) == null) {
																																																																												if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_37BB(
																																																																														statRetPerformEncryption,
																																																																														exprKeyName) == null) {
																																																																													if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_38BB(
																																																																															statRetGetKey,
																																																																															exprKeyName) == null) {
																																																																														if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_39BB(
																																																																																statRetPerformEncryption,
																																																																																exprNameModePadding) == null) {
																																																																															if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_40BB(
																																																																																	statRetGetKey,
																																																																																	exprNameModePadding) == null) {
																																																																																if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_41BB(
																																																																																		methodEncryption,
																																																																																		statRetGetKey) == null) {
																																																																																	if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_42BB(
																																																																																			statRetPerformEncryption,
																																																																																			exprPwdName) == null) {
																																																																																		if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_43BB(
																																																																																				statRetGetKey,
																																																																																				exprPwdName) == null) {
																																																																																			if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_44BB(
																																																																																					statRetPerformEncryption,
																																																																																					exprDataName) == null) {
																																																																																				if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_45BB(
																																																																																						statRetGetKey,
																																																																																						exprDataName) == null) {
																																																																																					if (pattern_PasswordBasedEncryption_28_1_matchtggpattern_black_nac_46BB(
																																																																																							exprRetGetKey,
																																																																																							exprRetPerformEncryption) == null) {
																																																																																						return new Object[] {
																																																																																								exprIterationLiteral,
																																																																																								javaPackage,
																																																																																								exprRetGetKey,
																																																																																								exprOutputSizeLiteral,
																																																																																								kdaJcu,
																																																																																								methodPerformEncryption,
																																																																																								sbcJcu,
																																																																																								keyEncryption,
																																																																																								dataEncryption,
																																																																																								methodGetKey,
																																																																																								exprAlgNameLiteral,
																																																																																								pwdDeclaration,
																																																																																								methodPerformGetKey,
																																																																																								statRetPerformEncryption,
																																																																																								exprKeyName,
																																																																																								exprNameModePadding,
																																																																																								methodEncryption,
																																																																																								exprPwdName,
																																																																																								exprDataName,
																																																																																								exprRetPerformEncryption,
																																																																																								statRetGetKey };
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_28_1_matchtggpattern_greenBBBBBBBBBBBBBBBBBBB(
			JavaLiteral exprIterationLiteral, JavaMethodInvocation exprRetGetKey, JavaLiteral exprOutputSizeLiteral,
			JavaCompilationUnit kdaJcu, JavaOpaqueMethod methodPerformEncryption, JavaVariableDeclaration keyEncryption,
			JavaVariableDeclaration dataEncryption, JavaWorkflowMethod methodGetKey, JavaLiteral exprAlgNameLiteral,
			JavaVariableDeclaration pwdDeclaration, JavaOpaqueMethod methodPerformGetKey,
			JavaStatement statRetPerformEncryption, JavaName exprKeyName, JavaLiteral exprNameModePadding,
			JavaWorkflowMethod methodEncryption, JavaName exprPwdName, JavaName exprDataName,
			JavaMethodInvocation exprRetPerformEncryption, JavaStatement statRetGetKey) {
		int exprIterationLiteral_index_prime = Integer.valueOf(2);
		String exprRetGetKey_name_prime = "performGetKey";
		int exprOutputSizeLiteral_index_prime = Integer.valueOf(3);
		String kdaJcu_name_prime = "KeyDeriv";
		String methodPerformEncryption_modifier_prime = "private";
		String methodPerformEncryption_name_prime = "performEncryption";
		String methodPerformEncryption_type_prime = "byte[] ";
		String keyEncryption_type_prime = "SecretKey";
		int keyEncryption_index_prime = Integer.valueOf(1);
		String keyEncryption_name_prime = "key";
		int dataEncryption_index_prime = Integer.valueOf(0);
		String dataEncryption_type_prime = "byte[]";
		String dataEncryption_name_prime = "data";
		String methodGetKey_modifier_prime = "public";
		String methodGetKey_type_prime = "SecretKey ";
		String methodGetKey_name_prime = "getKey";
		int exprAlgNameLiteral_index_prime = Integer.valueOf(1);
		String pwdDeclaration_name_prime = "pwd";
		int pwdDeclaration_index_prime = Integer.valueOf(0);
		String pwdDeclaration_type_prime = "char[]";
		String methodPerformGetKey_name_prime = "performGetKey";
		String methodPerformGetKey_type_prime = "SecretKey ";
		String methodPerformGetKey_modifier_prime = "private";
		boolean statRetPerformEncryption_return_prime = Boolean.valueOf(true);
		int exprKeyName_index_prime = Integer.valueOf(1);
		String exprKeyName_identifier_prime = "key";
		int exprNameModePadding_index_prime = Integer.valueOf(2);
		String methodEncryption_type_prime = "byte[] ";
		String methodEncryption_modifier_prime = "public";
		String methodEncryption_name_prime = "encrypt";
		String exprPwdName_identifier_prime = "pwd";
		int exprPwdName_index_prime = Integer.valueOf(0);
		int exprDataName_index_prime = Integer.valueOf(0);
		String exprDataName_identifier_prime = "data";
		String exprRetPerformEncryption_name_prime = "performEncryption";
		boolean statRetGetKey_return_prime = Boolean.valueOf(true);
		exprIterationLiteral.setIndex(Integer.valueOf(exprIterationLiteral_index_prime));
		exprRetGetKey.setName(exprRetGetKey_name_prime);
		exprOutputSizeLiteral.setIndex(Integer.valueOf(exprOutputSizeLiteral_index_prime));
		kdaJcu.setName(kdaJcu_name_prime);
		methodPerformEncryption.setModifier(methodPerformEncryption_modifier_prime);
		methodPerformEncryption.setName(methodPerformEncryption_name_prime);
		methodPerformEncryption.setType(methodPerformEncryption_type_prime);
		keyEncryption.setType(keyEncryption_type_prime);
		keyEncryption.setIndex(Integer.valueOf(keyEncryption_index_prime));
		keyEncryption.setName(keyEncryption_name_prime);
		dataEncryption.setIndex(Integer.valueOf(dataEncryption_index_prime));
		dataEncryption.setType(dataEncryption_type_prime);
		dataEncryption.setName(dataEncryption_name_prime);
		methodGetKey.setModifier(methodGetKey_modifier_prime);
		methodGetKey.setType(methodGetKey_type_prime);
		methodGetKey.setName(methodGetKey_name_prime);
		exprAlgNameLiteral.setIndex(Integer.valueOf(exprAlgNameLiteral_index_prime));
		pwdDeclaration.setName(pwdDeclaration_name_prime);
		pwdDeclaration.setIndex(Integer.valueOf(pwdDeclaration_index_prime));
		pwdDeclaration.setType(pwdDeclaration_type_prime);
		methodPerformGetKey.setName(methodPerformGetKey_name_prime);
		methodPerformGetKey.setType(methodPerformGetKey_type_prime);
		methodPerformGetKey.setModifier(methodPerformGetKey_modifier_prime);
		statRetPerformEncryption.setReturn(Boolean.valueOf(statRetPerformEncryption_return_prime));
		exprKeyName.setIndex(Integer.valueOf(exprKeyName_index_prime));
		exprKeyName.setIdentifier(exprKeyName_identifier_prime);
		exprNameModePadding.setIndex(Integer.valueOf(exprNameModePadding_index_prime));
		methodEncryption.setType(methodEncryption_type_prime);
		methodEncryption.setModifier(methodEncryption_modifier_prime);
		methodEncryption.setName(methodEncryption_name_prime);
		exprPwdName.setIdentifier(exprPwdName_identifier_prime);
		exprPwdName.setIndex(Integer.valueOf(exprPwdName_index_prime));
		exprDataName.setIndex(Integer.valueOf(exprDataName_index_prime));
		exprDataName.setIdentifier(exprDataName_identifier_prime);
		exprRetPerformEncryption.setName(exprRetPerformEncryption_name_prime);
		statRetGetKey.setReturn(Boolean.valueOf(statRetGetKey_return_prime));
		return new Object[] { exprIterationLiteral, exprRetGetKey, exprOutputSizeLiteral, kdaJcu,
				methodPerformEncryption, keyEncryption, dataEncryption, methodGetKey, exprAlgNameLiteral,
				pwdDeclaration, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
				methodEncryption, exprPwdName, exprDataName, exprRetPerformEncryption, statRetGetKey };
	}

	public static final boolean pattern_PasswordBasedEncryption_28_2_expressionF() {
		boolean _result = Boolean.valueOf(true);
		return _result;
	}

	public static final boolean pattern_PasswordBasedEncryption_28_3_expressionF() {
		boolean _result = Boolean.valueOf(false);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_1_createresult_blackB(
			PasswordBasedEncryption _this) {
		return new Object[] { _this };
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_1_createresult_greenFF() {
		IsApplicableMatch isApplicableMatch = RuntimeFactory.eINSTANCE.createIsApplicableMatch();
		ModelgeneratorRuleResult ruleResult = RuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();
		boolean ruleResult_success_prime = Boolean.valueOf(false);
		ruleResult.setSuccess(Boolean.valueOf(ruleResult_success_prime));
		return new Object[] { isApplicableMatch, ruleResult };
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_2_isapplicablecore_blackB(
			PasswordBasedEncryption _this) {
		return new Object[] { _this };
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_3_solveCSP_bindingFBBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch, ModelgeneratorRuleResult ruleResult) {
		CSP _localVariable_0 = _this.generateModel_solveCsp_BWD(isApplicableMatch, ruleResult);
		CSP csp = _localVariable_0;
		if (csp != null) {
			return new Object[] { csp, _this, isApplicableMatch, ruleResult };
		}
		return null;
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_3_solveCSP_blackB(CSP csp) {
		return new Object[] { csp };
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_3_solveCSP_bindingAndBlackFBBB(
			PasswordBasedEncryption _this, IsApplicableMatch isApplicableMatch, ModelgeneratorRuleResult ruleResult) {
		Object[] result_pattern_PasswordBasedEncryption_29_3_solveCSP_binding = pattern_PasswordBasedEncryption_29_3_solveCSP_bindingFBBB(
				_this, isApplicableMatch, ruleResult);
		if (result_pattern_PasswordBasedEncryption_29_3_solveCSP_binding != null) {
			CSP csp = (CSP) result_pattern_PasswordBasedEncryption_29_3_solveCSP_binding[0];

			Object[] result_pattern_PasswordBasedEncryption_29_3_solveCSP_black = pattern_PasswordBasedEncryption_29_3_solveCSP_blackB(
					csp);
			if (result_pattern_PasswordBasedEncryption_29_3_solveCSP_black != null) {

				return new Object[] { csp, _this, isApplicableMatch, ruleResult };
			}
		}
		return null;
	}

	public static final boolean pattern_PasswordBasedEncryption_29_4_checkCSP_expressionFBB(
			PasswordBasedEncryption _this, CSP csp) {
		boolean _localVariable_0 = _this.generateModel_checkCsp_BWD(csp);
		boolean _result = Boolean.valueOf(_localVariable_0);
		return _result;
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_6_perform_blackB(
			ModelgeneratorRuleResult ruleResult) {
		return new Object[] { ruleResult };
	}

	public static final Object[] pattern_PasswordBasedEncryption_29_6_perform_greenFFFFFFFFFFFFFFFFFFFFFFFFFFFBB(
			ModelgeneratorRuleResult ruleResult, CSP csp) {
		JavaLiteral exprIterationLiteral = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		JavaPackage javaPackage = SimpleJavaFactory.eINSTANCE.createJavaPackage();
		JavaMethodInvocation exprRetGetKey = SimpleJavaFactory.eINSTANCE.createJavaMethodInvocation();
		JavaLiteral exprOutputSizeLiteral = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		SymmetricBlockCipherToJcu sbc2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createSymmetricBlockCipherToJcu();
		JavaCompilationUnit kdaJcu = SimpleJavaFactory.eINSTANCE.createJavaCompilationUnit();
		JavaOpaqueMethod methodPerformEncryption = SimpleJavaFactory.eINSTANCE.createJavaOpaqueMethod();
		JavaCompilationUnit sbcJcu = SimpleJavaFactory.eINSTANCE.createJavaCompilationUnit();
		JavaVariableDeclaration keyEncryption = SimpleJavaFactory.eINSTANCE.createJavaVariableDeclaration();
		JavaVariableDeclaration dataEncryption = SimpleJavaFactory.eINSTANCE.createJavaVariableDeclaration();
		JavaWorkflowMethod methodGetKey = SimpleJavaFactory.eINSTANCE.createJavaWorkflowMethod();
		TaskToJavaPackage t2c = CryptoConfigToJavaFactory.eINSTANCE.createTaskToJavaPackage();
		JavaLiteral exprAlgNameLiteral = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		JavaVariableDeclaration pwdDeclaration = SimpleJavaFactory.eINSTANCE.createJavaVariableDeclaration();
		KeyDerivationAlgorithm kda = CryptoAPIConfigFactory.eINSTANCE.createKeyDerivationAlgorithm();
		JavaOpaqueMethod methodPerformGetKey = SimpleJavaFactory.eINSTANCE.createJavaOpaqueMethod();
		JavaStatement statRetPerformEncryption = SimpleJavaFactory.eINSTANCE.createJavaStatement();
		JavaName exprKeyName = SimpleJavaFactory.eINSTANCE.createJavaName();
		JavaLiteral exprNameModePadding = SimpleJavaFactory.eINSTANCE.createJavaLiteral();
		JavaWorkflowMethod methodEncryption = SimpleJavaFactory.eINSTANCE.createJavaWorkflowMethod();
		Task task = CryptoAPIConfigFactory.eINSTANCE.createTask();
		JavaName exprPwdName = SimpleJavaFactory.eINSTANCE.createJavaName();
		SymmetricBlockCipher sbc = CryptoAPIConfigFactory.eINSTANCE.createSymmetricBlockCipher();
		JavaName exprDataName = SimpleJavaFactory.eINSTANCE.createJavaName();
		JavaMethodInvocation exprRetPerformEncryption = SimpleJavaFactory.eINSTANCE.createJavaMethodInvocation();
		JavaStatement statRetGetKey = SimpleJavaFactory.eINSTANCE.createJavaStatement();
		KeyDerivationAlgorithmToJcu kda2Jcu = CryptoConfigToJavaFactory.eINSTANCE.createKeyDerivationAlgorithmToJcu();
		int exprIterationLiteral_index_prime = Integer.valueOf(2);
		Object _localVariable_0 = csp.getValue("exprIterationLiteral", "value");
		Object _localVariable_1 = csp.getValue("javaPackage", "name");
		String exprRetGetKey_name_prime = "performGetKey";
		int exprOutputSizeLiteral_index_prime = Integer.valueOf(3);
		Object _localVariable_2 = csp.getValue("exprOutputSizeLiteral", "value");
		String kdaJcu_name_prime = "KeyDeriv";
		String methodPerformEncryption_modifier_prime = "private";
		String methodPerformEncryption_name_prime = "performEncryption";
		String methodPerformEncryption_type_prime = "byte[] ";
		Object _localVariable_3 = csp.getValue("methodPerformEncryption", "body");
		Object _localVariable_4 = csp.getValue("methodPerformEncryption", "index");
		Object _localVariable_5 = csp.getValue("methodPerformEncryption", "throws");
		Object _localVariable_6 = csp.getValue("methodPerformEncryption", "parameters");
		Object _localVariable_7 = csp.getValue("sbcJcu", "name");
		String keyEncryption_type_prime = "SecretKey";
		int keyEncryption_index_prime = Integer.valueOf(1);
		String keyEncryption_name_prime = "key";
		int dataEncryption_index_prime = Integer.valueOf(0);
		String dataEncryption_type_prime = "byte[]";
		String dataEncryption_name_prime = "data";
		String methodGetKey_modifier_prime = "public";
		String methodGetKey_type_prime = "SecretKey ";
		String methodGetKey_name_prime = "getKey";
		Object _localVariable_8 = csp.getValue("methodGetKey", "throws");
		Object _localVariable_9 = csp.getValue("methodGetKey", "index");
		int exprAlgNameLiteral_index_prime = Integer.valueOf(1);
		Object _localVariable_10 = csp.getValue("exprAlgNameLiteral", "value");
		String pwdDeclaration_name_prime = "pwd";
		int pwdDeclaration_index_prime = Integer.valueOf(0);
		String pwdDeclaration_type_prime = "char[]";
		Object _localVariable_11 = csp.getValue("kda", "iterations");
		Object _localVariable_12 = csp.getValue("kda", "name");
		Object _localVariable_13 = csp.getValue("kda", "outputSize");
		String methodPerformGetKey_name_prime = "performGetKey";
		String methodPerformGetKey_type_prime = "SecretKey ";
		String methodPerformGetKey_modifier_prime = "private";
		Object _localVariable_14 = csp.getValue("methodPerformGetKey", "body");
		Object _localVariable_15 = csp.getValue("methodPerformGetKey", "index");
		Object _localVariable_16 = csp.getValue("methodPerformGetKey", "throws");
		Object _localVariable_17 = csp.getValue("methodPerformGetKey", "parameters");
		boolean statRetPerformEncryption_return_prime = Boolean.valueOf(true);
		int exprKeyName_index_prime = Integer.valueOf(1);
		String exprKeyName_identifier_prime = "key";
		int exprNameModePadding_index_prime = Integer.valueOf(2);
		Object _localVariable_18 = csp.getValue("exprNameModePadding", "value");
		String methodEncryption_type_prime = "byte[] ";
		String methodEncryption_modifier_prime = "public";
		String methodEncryption_name_prime = "encrypt";
		Object _localVariable_19 = csp.getValue("methodEncryption", "index");
		Object _localVariable_20 = csp.getValue("methodEncryption", "throws");
		String task_description_prime = "PasswordBasedEncryption";
		Object _localVariable_21 = csp.getValue("task", "package");
		String exprPwdName_identifier_prime = "pwd";
		int exprPwdName_index_prime = Integer.valueOf(0);
		Object _localVariable_22 = csp.getValue("sbc", "name");
		Object _localVariable_23 = csp.getValue("sbc", "mode");
		Object _localVariable_24 = csp.getValue("sbc", "padding");
		int exprDataName_index_prime = Integer.valueOf(0);
		String exprDataName_identifier_prime = "data";
		String exprRetPerformEncryption_name_prime = "performEncryption";
		boolean statRetGetKey_return_prime = Boolean.valueOf(true);
		boolean ruleResult_success_prime = Boolean.valueOf(true);
		int _localVariable_25 = ruleResult.getIncrementedPerformCount();
		ruleResult.getTargetObjects().add(exprIterationLiteral);
		ruleResult.getTargetObjects().add(javaPackage);
		exprRetGetKey.getArguments().add(exprIterationLiteral);
		ruleResult.getTargetObjects().add(exprRetGetKey);
		exprRetGetKey.getArguments().add(exprOutputSizeLiteral);
		ruleResult.getTargetObjects().add(exprOutputSizeLiteral);
		ruleResult.getCorrObjects().add(sbc2Jcu);
		javaPackage.getCunits().add(kdaJcu);
		ruleResult.getTargetObjects().add(kdaJcu);
		ruleResult.getTargetObjects().add(methodPerformEncryption);
		sbc2Jcu.setTarget(sbcJcu);
		javaPackage.getCunits().add(sbcJcu);
		sbcJcu.getMethods().add(methodPerformEncryption);
		ruleResult.getTargetObjects().add(sbcJcu);
		ruleResult.getTargetObjects().add(keyEncryption);
		ruleResult.getTargetObjects().add(dataEncryption);
		kdaJcu.getMethods().add(methodGetKey);
		ruleResult.getTargetObjects().add(methodGetKey);
		t2c.setTarget(javaPackage);
		ruleResult.getCorrObjects().add(t2c);
		exprRetGetKey.getArguments().add(exprAlgNameLiteral);
		ruleResult.getTargetObjects().add(exprAlgNameLiteral);
		methodGetKey.getParams().add(pwdDeclaration);
		ruleResult.getTargetObjects().add(pwdDeclaration);
		ruleResult.getSourceObjects().add(kda);
		kdaJcu.getMethods().add(methodPerformGetKey);
		ruleResult.getTargetObjects().add(methodPerformGetKey);
		ruleResult.getTargetObjects().add(statRetPerformEncryption);
		ruleResult.getTargetObjects().add(exprKeyName);
		ruleResult.getTargetObjects().add(exprNameModePadding);
		sbcJcu.getMethods().add(methodEncryption);
		methodEncryption.getStatements().add(statRetPerformEncryption);
		methodEncryption.getParams().add(keyEncryption);
		methodEncryption.getParams().add(dataEncryption);
		ruleResult.getTargetObjects().add(methodEncryption);
		t2c.setSource(task);
		task.getAlgorithms().add(kda);
		ruleResult.getSourceObjects().add(task);
		exprRetGetKey.getArguments().add(exprPwdName);
		ruleResult.getTargetObjects().add(exprPwdName);
		task.getAlgorithms().add(sbc);
		sbc2Jcu.setSource(sbc);
		ruleResult.getSourceObjects().add(sbc);
		ruleResult.getTargetObjects().add(exprDataName);
		exprRetPerformEncryption.getArguments().add(exprKeyName);
		statRetPerformEncryption.setExpr(exprRetPerformEncryption);
		exprRetPerformEncryption.getArguments().add(exprDataName);
		exprRetPerformEncryption.getArguments().add(exprNameModePadding);
		ruleResult.getTargetObjects().add(exprRetPerformEncryption);
		methodGetKey.getStatements().add(statRetGetKey);
		statRetGetKey.setExpr(exprRetGetKey);
		ruleResult.getTargetObjects().add(statRetGetKey);
		kda2Jcu.setSource(kda);
		kda2Jcu.setTarget(kdaJcu);
		ruleResult.getCorrObjects().add(kda2Jcu);
		exprIterationLiteral.setIndex(Integer.valueOf(exprIterationLiteral_index_prime));
		String exprIterationLiteral_value_prime = (String) _localVariable_0;
		String javaPackage_name_prime = (String) _localVariable_1;
		exprRetGetKey.setName(exprRetGetKey_name_prime);
		exprOutputSizeLiteral.setIndex(Integer.valueOf(exprOutputSizeLiteral_index_prime));
		String exprOutputSizeLiteral_value_prime = (String) _localVariable_2;
		kdaJcu.setName(kdaJcu_name_prime);
		methodPerformEncryption.setModifier(methodPerformEncryption_modifier_prime);
		methodPerformEncryption.setName(methodPerformEncryption_name_prime);
		methodPerformEncryption.setType(methodPerformEncryption_type_prime);
		String methodPerformEncryption_body_prime = (String) _localVariable_3;
		int methodPerformEncryption_index_prime = (int) _localVariable_4;
		String methodPerformEncryption_throws_prime = (String) _localVariable_5;
		String methodPerformEncryption_parameters_prime = (String) _localVariable_6;
		String sbcJcu_name_prime = (String) _localVariable_7;
		keyEncryption.setType(keyEncryption_type_prime);
		keyEncryption.setIndex(Integer.valueOf(keyEncryption_index_prime));
		keyEncryption.setName(keyEncryption_name_prime);
		dataEncryption.setIndex(Integer.valueOf(dataEncryption_index_prime));
		dataEncryption.setType(dataEncryption_type_prime);
		dataEncryption.setName(dataEncryption_name_prime);
		methodGetKey.setModifier(methodGetKey_modifier_prime);
		methodGetKey.setType(methodGetKey_type_prime);
		methodGetKey.setName(methodGetKey_name_prime);
		String methodGetKey_throws_prime = (String) _localVariable_8;
		int methodGetKey_index_prime = (int) _localVariable_9;
		exprAlgNameLiteral.setIndex(Integer.valueOf(exprAlgNameLiteral_index_prime));
		String exprAlgNameLiteral_value_prime = (String) _localVariable_10;
		pwdDeclaration.setName(pwdDeclaration_name_prime);
		pwdDeclaration.setIndex(Integer.valueOf(pwdDeclaration_index_prime));
		pwdDeclaration.setType(pwdDeclaration_type_prime);
		String kda_iterations_prime = (String) _localVariable_11;
		String kda_name_prime = (String) _localVariable_12;
		String kda_outputSize_prime = (String) _localVariable_13;
		methodPerformGetKey.setName(methodPerformGetKey_name_prime);
		methodPerformGetKey.setType(methodPerformGetKey_type_prime);
		methodPerformGetKey.setModifier(methodPerformGetKey_modifier_prime);
		String methodPerformGetKey_body_prime = (String) _localVariable_14;
		int methodPerformGetKey_index_prime = (int) _localVariable_15;
		String methodPerformGetKey_throws_prime = (String) _localVariable_16;
		String methodPerformGetKey_parameters_prime = (String) _localVariable_17;
		statRetPerformEncryption.setReturn(Boolean.valueOf(statRetPerformEncryption_return_prime));
		exprKeyName.setIndex(Integer.valueOf(exprKeyName_index_prime));
		exprKeyName.setIdentifier(exprKeyName_identifier_prime);
		exprNameModePadding.setIndex(Integer.valueOf(exprNameModePadding_index_prime));
		String exprNameModePadding_value_prime = (String) _localVariable_18;
		methodEncryption.setType(methodEncryption_type_prime);
		methodEncryption.setModifier(methodEncryption_modifier_prime);
		methodEncryption.setName(methodEncryption_name_prime);
		int methodEncryption_index_prime = (int) _localVariable_19;
		String methodEncryption_throws_prime = (String) _localVariable_20;
		task.setDescription(task_description_prime);
		String task_package_prime = (String) _localVariable_21;
		exprPwdName.setIdentifier(exprPwdName_identifier_prime);
		exprPwdName.setIndex(Integer.valueOf(exprPwdName_index_prime));
		String sbc_name_prime = (String) _localVariable_22;
		String sbc_mode_prime = (String) _localVariable_23;
		String sbc_padding_prime = (String) _localVariable_24;
		exprDataName.setIndex(Integer.valueOf(exprDataName_index_prime));
		exprDataName.setIdentifier(exprDataName_identifier_prime);
		exprRetPerformEncryption.setName(exprRetPerformEncryption_name_prime);
		statRetGetKey.setReturn(Boolean.valueOf(statRetGetKey_return_prime));
		ruleResult.setSuccess(Boolean.valueOf(ruleResult_success_prime));
		int ruleResult_performCount_prime = Integer.valueOf(_localVariable_25);
		exprIterationLiteral.setValue(exprIterationLiteral_value_prime);
		javaPackage.setName(javaPackage_name_prime);
		exprOutputSizeLiteral.setValue(exprOutputSizeLiteral_value_prime);
		methodPerformEncryption.setBody(methodPerformEncryption_body_prime);
		methodPerformEncryption.setIndex(Integer.valueOf(methodPerformEncryption_index_prime));
		methodPerformEncryption.setThrows(methodPerformEncryption_throws_prime);
		methodPerformEncryption.setParameters(methodPerformEncryption_parameters_prime);
		sbcJcu.setName(sbcJcu_name_prime);
		methodGetKey.setThrows(methodGetKey_throws_prime);
		methodGetKey.setIndex(Integer.valueOf(methodGetKey_index_prime));
		exprAlgNameLiteral.setValue(exprAlgNameLiteral_value_prime);
		kda.setIterations(kda_iterations_prime);
		kda.setName(kda_name_prime);
		kda.setOutputSize(kda_outputSize_prime);
		methodPerformGetKey.setBody(methodPerformGetKey_body_prime);
		methodPerformGetKey.setIndex(Integer.valueOf(methodPerformGetKey_index_prime));
		methodPerformGetKey.setThrows(methodPerformGetKey_throws_prime);
		methodPerformGetKey.setParameters(methodPerformGetKey_parameters_prime);
		exprNameModePadding.setValue(exprNameModePadding_value_prime);
		methodEncryption.setIndex(Integer.valueOf(methodEncryption_index_prime));
		methodEncryption.setThrows(methodEncryption_throws_prime);
		task.setPackage(task_package_prime);
		sbc.setName(sbc_name_prime);
		sbc.setMode(sbc_mode_prime);
		sbc.setPadding(sbc_padding_prime);
		ruleResult.setPerformCount(Integer.valueOf(ruleResult_performCount_prime));
		return new Object[] { exprIterationLiteral, javaPackage, exprRetGetKey, exprOutputSizeLiteral, sbc2Jcu, kdaJcu,
				methodPerformEncryption, sbcJcu, keyEncryption, dataEncryption, methodGetKey, t2c, exprAlgNameLiteral,
				pwdDeclaration, kda, methodPerformGetKey, statRetPerformEncryption, exprKeyName, exprNameModePadding,
				methodEncryption, task, exprPwdName, sbc, exprDataName, exprRetPerformEncryption, statRetGetKey,
				kda2Jcu, ruleResult, csp };
	}

	public static final ModelgeneratorRuleResult pattern_PasswordBasedEncryption_29_7_expressionFB(
			ModelgeneratorRuleResult ruleResult) {
		ModelgeneratorRuleResult _result = ruleResult;
		return _result;
	}

	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} //PasswordBasedEncryptionImpl
