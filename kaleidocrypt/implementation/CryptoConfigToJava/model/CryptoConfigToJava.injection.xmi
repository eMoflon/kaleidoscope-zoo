<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="CryptoConfigToJava.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Crypto&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_task_package,literal0);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;kda&quot;, kda);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;sbc&quot;, sbc);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(0);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(1);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;Enc&quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, true, csp);&#xA;var_kda_name.setValue(kda.getName());&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, true, csp);&#xA;var_kda_iterations.setValue(kda.getIterations());&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, true, csp);&#xA;var_kda_outputSize.setValue(kda.getOutputSize());&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, true, csp);&#xA;var_sbc_name.setValue(sbc.getName());&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, true, csp);&#xA;var_sbc_mode.setValue(sbc.getMode());&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, true, csp);&#xA;var_sbc_padding.setValue(sbc.getPadding());&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, csp);&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, csp);&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, csp);&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, csp);&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, csp);&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, csp);&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbcJcu.name&quot;, csp);&#xA;var_sbcJcu_name.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, csp);&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, csp);&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, csp);&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, csp);&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, csp);&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, csp);&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, csp);&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, csp);&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, csp);&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, csp);&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, csp);&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;csp.getConstraints().add(nameModePadding);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodEncryption_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodPerformEncryption_parameters,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformEncryption_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_throws,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodPerformGetKey_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodEncryption_index,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_sbcJcu_name,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_methodPerformGetKey_body,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_methodGetKey_index,literal4);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_methodGetKey_throws,literal2);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodPerformEncryption_index,literal3);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_body,literal7);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_task_package,var_javaPackage_name);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformGetKey_parameters,literal8);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;kda&quot;,kda);&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xA;isApplicableMatch.registerObject(&quot;sbc&quot;,sbc);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;exprIterationLiteral&quot;, exprIterationLiteral);&#xA;ruleresult.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;ruleresult.registerObject(&quot;exprRetGetKey&quot;, exprRetGetKey);&#xA;ruleresult.registerObject(&quot;exprOutputSizeLiteral&quot;, exprOutputSizeLiteral);&#xA;ruleresult.registerObject(&quot;sbc2Jcu&quot;, sbc2Jcu);&#xA;ruleresult.registerObject(&quot;kdaJcu&quot;, kdaJcu);&#xA;ruleresult.registerObject(&quot;methodPerformEncryption&quot;, methodPerformEncryption);&#xA;ruleresult.registerObject(&quot;sbcJcu&quot;, sbcJcu);&#xA;ruleresult.registerObject(&quot;keyEncryption&quot;, keyEncryption);&#xA;ruleresult.registerObject(&quot;dataEncryption&quot;, dataEncryption);&#xA;ruleresult.registerObject(&quot;methodGetKey&quot;, methodGetKey);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;exprAlgNameLiteral&quot;, exprAlgNameLiteral);&#xA;ruleresult.registerObject(&quot;pwdDeclaration&quot;, pwdDeclaration);&#xA;ruleresult.registerObject(&quot;kda&quot;, kda);&#xA;ruleresult.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;ruleresult.registerObject(&quot;statRetPerformEncryption&quot;, statRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;exprKeyName&quot;, exprKeyName);&#xA;ruleresult.registerObject(&quot;exprNameModePadding&quot;, exprNameModePadding);&#xA;ruleresult.registerObject(&quot;methodEncryption&quot;, methodEncryption);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;exprPwdName&quot;, exprPwdName);&#xA;ruleresult.registerObject(&quot;exprDataName&quot;, exprDataName);&#xA;ruleresult.registerObject(&quot;sbc&quot;, sbc);&#xA;ruleresult.registerObject(&quot;exprRetPerformEncryption&quot;, exprRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;statRetGetKey&quot;, statRetGetKey);&#xA;ruleresult.registerObject(&quot;kda2Jcu&quot;, kda2Jcu);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;kda&quot;).eClass()).equals(&quot;CryptoAPIConfig.KeyDerivationAlgorithm.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;task&quot;).eClass()).equals(&quot;CryptoAPIConfig.Task.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;sbc&quot;).eClass()).equals(&quot;CryptoAPIConfig.SymmetricBlockCipher.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(0);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(1);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;Enc&quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(methodEncryption.getThrows());&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(methodPerformEncryption.getParameters());&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(methodPerformEncryption.getThrows());&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(methodPerformGetKey.getThrows());&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(methodPerformGetKey.getIndex());&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(methodEncryption.getIndex());&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbcJcu.name&quot;, true, csp);&#xA;var_sbcJcu_name.setValue(sbcJcu.getName());&#xA;var_sbcJcu_name.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(methodPerformGetKey.getBody());&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(methodGetKey.getIndex());&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(methodGetKey.getThrows());&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(methodPerformEncryption.getIndex());&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(methodPerformEncryption.getBody());&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodEncryption_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodPerformEncryption_parameters,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformEncryption_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_throws,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodPerformGetKey_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodEncryption_index,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_sbcJcu_name,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_methodPerformGetKey_body,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_methodGetKey_index,literal4);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_methodGetKey_throws,literal2);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodPerformEncryption_index,literal3);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_body,literal7);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformGetKey_parameters,literal8);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;exprIterationLiteral&quot;, exprIterationLiteral);&#xA;match.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;match.registerObject(&quot;exprRetGetKey&quot;, exprRetGetKey);&#xA;match.registerObject(&quot;exprOutputSizeLiteral&quot;, exprOutputSizeLiteral);&#xA;match.registerObject(&quot;kdaJcu&quot;, kdaJcu);&#xA;match.registerObject(&quot;methodPerformEncryption&quot;, methodPerformEncryption);&#xA;match.registerObject(&quot;sbcJcu&quot;, sbcJcu);&#xA;match.registerObject(&quot;keyEncryption&quot;, keyEncryption);&#xA;match.registerObject(&quot;dataEncryption&quot;, dataEncryption);&#xA;match.registerObject(&quot;methodGetKey&quot;, methodGetKey);&#xA;match.registerObject(&quot;exprAlgNameLiteral&quot;, exprAlgNameLiteral);&#xA;match.registerObject(&quot;pwdDeclaration&quot;, pwdDeclaration);&#xA;match.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;match.registerObject(&quot;statRetPerformEncryption&quot;, statRetPerformEncryption);&#xA;match.registerObject(&quot;exprKeyName&quot;, exprKeyName);&#xA;match.registerObject(&quot;exprNameModePadding&quot;, exprNameModePadding);&#xA;match.registerObject(&quot;methodEncryption&quot;, methodEncryption);&#xA;match.registerObject(&quot;exprPwdName&quot;, exprPwdName);&#xA;match.registerObject(&quot;exprDataName&quot;, exprDataName);&#xA;match.registerObject(&quot;exprRetPerformEncryption&quot;, exprRetPerformEncryption);&#xA;match.registerObject(&quot;statRetGetKey&quot;, statRetGetKey);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Crypto&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(exprAlgNameLiteral.getValue());&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(exprIterationLiteral.getValue());&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, true, csp);&#xA;var_javaPackage_name.setValue(javaPackage.getName());&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(exprOutputSizeLiteral.getValue());&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(exprNameModePadding.getValue());&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, csp);&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, csp);&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, csp);&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, csp);&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, csp);&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, csp);&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, csp);&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;csp.getConstraints().add(nameModePadding);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_task_package,literal0);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;exprIterationLiteral&quot;,exprIterationLiteral);&#xA;isApplicableMatch.registerObject(&quot;javaPackage&quot;,javaPackage);&#xA;isApplicableMatch.registerObject(&quot;exprRetGetKey&quot;,exprRetGetKey);&#xA;isApplicableMatch.registerObject(&quot;exprOutputSizeLiteral&quot;,exprOutputSizeLiteral);&#xA;isApplicableMatch.registerObject(&quot;kdaJcu&quot;,kdaJcu);&#xA;isApplicableMatch.registerObject(&quot;methodPerformEncryption&quot;,methodPerformEncryption);&#xA;isApplicableMatch.registerObject(&quot;sbcJcu&quot;,sbcJcu);&#xA;isApplicableMatch.registerObject(&quot;keyEncryption&quot;,keyEncryption);&#xA;isApplicableMatch.registerObject(&quot;dataEncryption&quot;,dataEncryption);&#xA;isApplicableMatch.registerObject(&quot;methodGetKey&quot;,methodGetKey);&#xA;isApplicableMatch.registerObject(&quot;exprAlgNameLiteral&quot;,exprAlgNameLiteral);&#xA;isApplicableMatch.registerObject(&quot;pwdDeclaration&quot;,pwdDeclaration);&#xA;isApplicableMatch.registerObject(&quot;methodPerformGetKey&quot;,methodPerformGetKey);&#xA;isApplicableMatch.registerObject(&quot;statRetPerformEncryption&quot;,statRetPerformEncryption);&#xA;isApplicableMatch.registerObject(&quot;exprKeyName&quot;,exprKeyName);&#xA;isApplicableMatch.registerObject(&quot;exprNameModePadding&quot;,exprNameModePadding);&#xA;isApplicableMatch.registerObject(&quot;methodEncryption&quot;,methodEncryption);&#xA;isApplicableMatch.registerObject(&quot;exprPwdName&quot;,exprPwdName);&#xA;isApplicableMatch.registerObject(&quot;exprDataName&quot;,exprDataName);&#xA;isApplicableMatch.registerObject(&quot;exprRetPerformEncryption&quot;,exprRetPerformEncryption);&#xA;isApplicableMatch.registerObject(&quot;statRetGetKey&quot;,statRetGetKey);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;exprIterationLiteral&quot;, exprIterationLiteral);&#xA;ruleresult.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;ruleresult.registerObject(&quot;exprRetGetKey&quot;, exprRetGetKey);&#xA;ruleresult.registerObject(&quot;exprOutputSizeLiteral&quot;, exprOutputSizeLiteral);&#xA;ruleresult.registerObject(&quot;sbc2Jcu&quot;, sbc2Jcu);&#xA;ruleresult.registerObject(&quot;kdaJcu&quot;, kdaJcu);&#xA;ruleresult.registerObject(&quot;methodPerformEncryption&quot;, methodPerformEncryption);&#xA;ruleresult.registerObject(&quot;sbcJcu&quot;, sbcJcu);&#xA;ruleresult.registerObject(&quot;keyEncryption&quot;, keyEncryption);&#xA;ruleresult.registerObject(&quot;dataEncryption&quot;, dataEncryption);&#xA;ruleresult.registerObject(&quot;methodGetKey&quot;, methodGetKey);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;exprAlgNameLiteral&quot;, exprAlgNameLiteral);&#xA;ruleresult.registerObject(&quot;pwdDeclaration&quot;, pwdDeclaration);&#xA;ruleresult.registerObject(&quot;kda&quot;, kda);&#xA;ruleresult.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;ruleresult.registerObject(&quot;statRetPerformEncryption&quot;, statRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;exprKeyName&quot;, exprKeyName);&#xA;ruleresult.registerObject(&quot;exprNameModePadding&quot;, exprNameModePadding);&#xA;ruleresult.registerObject(&quot;methodEncryption&quot;, methodEncryption);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;exprPwdName&quot;, exprPwdName);&#xA;ruleresult.registerObject(&quot;exprDataName&quot;, exprDataName);&#xA;ruleresult.registerObject(&quot;sbc&quot;, sbc);&#xA;ruleresult.registerObject(&quot;exprRetPerformEncryption&quot;, exprRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;statRetGetKey&quot;, statRetGetKey);&#xA;ruleresult.registerObject(&quot;kda2Jcu&quot;, kda2Jcu);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprIterationLiteral&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;javaPackage&quot;).eClass()).equals(&quot;SimpleJava.JavaPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprRetGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaMethodInvocation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprOutputSizeLiteral&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;kdaJcu&quot;).eClass()).equals(&quot;SimpleJava.JavaCompilationUnit.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodPerformEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaOpaqueMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;sbcJcu&quot;).eClass()).equals(&quot;SimpleJava.JavaCompilationUnit.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;keyEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaVariableDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;dataEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaVariableDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaWorkflowMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprAlgNameLiteral&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pwdDeclaration&quot;).eClass()).equals(&quot;SimpleJava.JavaVariableDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodPerformGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaOpaqueMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;statRetPerformEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaStatement.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprKeyName&quot;).eClass()).equals(&quot;SimpleJava.JavaName.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprNameModePadding&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaWorkflowMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprPwdName&quot;).eClass()).equals(&quot;SimpleJava.JavaName.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprDataName&quot;).eClass()).equals(&quot;SimpleJava.JavaName.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprRetPerformEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaMethodInvocation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;statRetGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaStatement.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Crypto&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_task_package,literal0);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;kda&quot;, kda);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(1);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(0);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal4.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, true, csp);&#xA;var_kda_outputSize.setValue(kda.getOutputSize());&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, true, csp);&#xA;var_kda_name.setValue(kda.getName());&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, true, csp);&#xA;var_kda_iterations.setValue(kda.getIterations());&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, csp);&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, csp);&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, csp);&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, csp);&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, csp);&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, csp);&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, csp);&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, csp);&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, csp);&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, csp);&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodGetKey_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodGetKey_index,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformGetKey_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_body,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodPerformGetKey_index,literal3);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_task_package,var_javaPackage_name);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodPerformGetKey_parameters,literal4);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;kda&quot;,kda);&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;exprIterationLiteral&quot;, exprIterationLiteral);&#xA;ruleresult.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;ruleresult.registerObject(&quot;exprAlgNameLiteral&quot;, exprAlgNameLiteral);&#xA;ruleresult.registerObject(&quot;pwdDeclaration&quot;, pwdDeclaration);&#xA;ruleresult.registerObject(&quot;kda&quot;, kda);&#xA;ruleresult.registerObject(&quot;exprRetGetKey&quot;, exprRetGetKey);&#xA;ruleresult.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;ruleresult.registerObject(&quot;exprOutputSizeLiteral&quot;, exprOutputSizeLiteral);&#xA;ruleresult.registerObject(&quot;tc&quot;, tc);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;exprPwdName&quot;, exprPwdName);&#xA;ruleresult.registerObject(&quot;statRetGetKey&quot;, statRetGetKey);&#xA;ruleresult.registerObject(&quot;methodGetKey&quot;, methodGetKey);&#xA;ruleresult.registerObject(&quot;jcu&quot;, jcu);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;kda&quot;).eClass()).equals(&quot;CryptoAPIConfig.KeyDerivationAlgorithm.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;task&quot;).eClass()).equals(&quot;CryptoAPIConfig.Task.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(1);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(0);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal4.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(methodGetKey.getThrows());&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(methodGetKey.getIndex());&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(methodPerformGetKey.getThrows());&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(methodPerformGetKey.getBody());&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(methodPerformGetKey.getIndex());&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodGetKey_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodGetKey_index,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformGetKey_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_body,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodPerformGetKey_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodPerformGetKey_parameters,literal4);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;exprIterationLiteral&quot;, exprIterationLiteral);&#xA;match.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;match.registerObject(&quot;exprAlgNameLiteral&quot;, exprAlgNameLiteral);&#xA;match.registerObject(&quot;pwdDeclaration&quot;, pwdDeclaration);&#xA;match.registerObject(&quot;exprRetGetKey&quot;, exprRetGetKey);&#xA;match.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;match.registerObject(&quot;exprOutputSizeLiteral&quot;, exprOutputSizeLiteral);&#xA;match.registerObject(&quot;exprPwdName&quot;, exprPwdName);&#xA;match.registerObject(&quot;statRetGetKey&quot;, statRetGetKey);&#xA;match.registerObject(&quot;methodGetKey&quot;, methodGetKey);&#xA;match.registerObject(&quot;jcu&quot;, jcu);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;Crypto&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(exprOutputSizeLiteral.getValue());&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, true, csp);&#xA;var_javaPackage_name.setValue(javaPackage.getName());&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(exprAlgNameLiteral.getValue());&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(exprIterationLiteral.getValue());&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, csp);&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, csp);&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, csp);&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, csp);&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_task_package,literal0);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;exprIterationLiteral&quot;,exprIterationLiteral);&#xA;isApplicableMatch.registerObject(&quot;javaPackage&quot;,javaPackage);&#xA;isApplicableMatch.registerObject(&quot;exprAlgNameLiteral&quot;,exprAlgNameLiteral);&#xA;isApplicableMatch.registerObject(&quot;pwdDeclaration&quot;,pwdDeclaration);&#xA;isApplicableMatch.registerObject(&quot;exprRetGetKey&quot;,exprRetGetKey);&#xA;isApplicableMatch.registerObject(&quot;methodPerformGetKey&quot;,methodPerformGetKey);&#xA;isApplicableMatch.registerObject(&quot;exprOutputSizeLiteral&quot;,exprOutputSizeLiteral);&#xA;isApplicableMatch.registerObject(&quot;exprPwdName&quot;,exprPwdName);&#xA;isApplicableMatch.registerObject(&quot;statRetGetKey&quot;,statRetGetKey);&#xA;isApplicableMatch.registerObject(&quot;methodGetKey&quot;,methodGetKey);&#xA;isApplicableMatch.registerObject(&quot;jcu&quot;,jcu);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;exprIterationLiteral&quot;, exprIterationLiteral);&#xA;ruleresult.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;ruleresult.registerObject(&quot;exprAlgNameLiteral&quot;, exprAlgNameLiteral);&#xA;ruleresult.registerObject(&quot;pwdDeclaration&quot;, pwdDeclaration);&#xA;ruleresult.registerObject(&quot;kda&quot;, kda);&#xA;ruleresult.registerObject(&quot;exprRetGetKey&quot;, exprRetGetKey);&#xA;ruleresult.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;ruleresult.registerObject(&quot;exprOutputSizeLiteral&quot;, exprOutputSizeLiteral);&#xA;ruleresult.registerObject(&quot;tc&quot;, tc);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;exprPwdName&quot;, exprPwdName);&#xA;ruleresult.registerObject(&quot;statRetGetKey&quot;, statRetGetKey);&#xA;ruleresult.registerObject(&quot;methodGetKey&quot;, methodGetKey);&#xA;ruleresult.registerObject(&quot;jcu&quot;, jcu);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprIterationLiteral&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;javaPackage&quot;).eClass()).equals(&quot;SimpleJava.JavaPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprAlgNameLiteral&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;pwdDeclaration&quot;).eClass()).equals(&quot;SimpleJava.JavaVariableDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprRetGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaMethodInvocation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodPerformGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaOpaqueMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprOutputSizeLiteral&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprPwdName&quot;).eClass()).equals(&quot;SimpleJava.JavaName.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;statRetGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaStatement.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaWorkflowMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jcu&quot;).eClass()).equals(&quot;SimpleJava.JavaCompilationUnit.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodPerformGetKey_parameters,literal0);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;methodPerformGetKey&quot;,methodPerformGetKey);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;methodPerformGetKey&quot;, methodPerformGetKey);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodPerformGetKey&quot;).eClass()).equals(&quot;SimpleJava.JavaOpaqueMethod.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jmi&quot;, jmi);&#xA;match.registerObject(&quot;argument&quot;, argument);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jmi&quot;,jmi);&#xA;isApplicableMatch.registerObject(&quot;argument&quot;,argument);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jmi&quot;, jmi);&#xA;ruleresult.registerObject(&quot;argument&quot;, argument);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;argument&quot;).eClass()).equals(&quot;SimpleJava.JavaExpression.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;crypto&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_task_package,literal0);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;sbc&quot;, sbc);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;key&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;public&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;private&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(1);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(&quot;byte[] &quot;);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;Enc&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;data&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;Variable literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal9&quot;, true, csp);&#xA;literal9.setValue(0);&#xA;literal9.setType(&quot;&quot;);&#xA;Variable literal10 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal10&quot;, true, csp);&#xA;literal10.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal10.setType(&quot;&quot;);&#xA;Variable literal11 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal11&quot;, true, csp);&#xA;literal11.setValue(2);&#xA;literal11.setType(&quot;&quot;);&#xA;Variable literal12 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal12&quot;, true, csp);&#xA;literal12.setValue(&quot;encrypt&quot;);&#xA;literal12.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, true, csp);&#xA;var_sbc_name.setValue(sbc.getName());&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, true, csp);&#xA;var_sbc_mode.setValue(sbc.getMode());&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, true, csp);&#xA;var_sbc_padding.setValue(sbc.getPadding());&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_exprKeyName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.identifier&quot;, csp);&#xA;var_exprKeyName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.modifier&quot;, csp);&#xA;var_methodEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.modifier&quot;, csp);&#xA;var_methodPerformEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_exprKeyName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.index&quot;, csp);&#xA;var_exprKeyName_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, csp);&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.type&quot;, csp);&#xA;var_methodEncryption_type.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, csp);&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_jcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jcu.name&quot;, csp);&#xA;var_jcu_name.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.identifier&quot;, csp);&#xA;var_exprDataName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, csp);&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, csp);&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, csp);&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, csp);&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.index&quot;, csp);&#xA;var_exprDataName_index.setType(&quot;int&quot;);&#xA;Variable var_exprNameModePadding_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.index&quot;, csp);&#xA;var_exprNameModePadding_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.name&quot;, csp);&#xA;var_methodEncryption_name.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, csp);&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, csp);&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_12 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_13 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_14 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;csp.getConstraints().add(setDefaultStringIfNull_12);&#xA;csp.getConstraints().add(setDefaultStringIfNull_13);&#xA;csp.getConstraints().add(setDefaultStringIfNull_14);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nameModePadding);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_exprKeyName_identifier,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodEncryption_modifier,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformEncryption_modifier,literal2);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_exprKeyName_index,literal3);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodEncryption_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodEncryption_type,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_methodPerformEncryption_throws,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_jcu_name,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_exprDataName_identifier,literal7);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_methodEncryption_throws,literal5);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodPerformEncryption_body,literal8);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_index,literal9);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformEncryption_parameters,literal10);&#xA;setDefaultStringIfNull_12.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_12.solve(var_exprDataName_index,literal9);&#xA;setDefaultStringIfNull_13.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_13.solve(var_exprNameModePadding_index,literal11);&#xA;setDefaultStringIfNull_14.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_14.solve(var_methodEncryption_name,literal12);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xA;isApplicableMatch.registerObject(&quot;sbc&quot;,sbc);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;exprRetPerformEncryption&quot;, exprRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;dataEncryption&quot;, dataEncryption);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;statRetPerformEncryption&quot;, statRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;exprDataName&quot;, exprDataName);&#xA;ruleresult.registerObject(&quot;jcu&quot;, jcu);&#xA;ruleresult.registerObject(&quot;keyEncryption&quot;, keyEncryption);&#xA;ruleresult.registerObject(&quot;methodPerformEncryption&quot;, methodPerformEncryption);&#xA;ruleresult.registerObject(&quot;sbc&quot;, sbc);&#xA;ruleresult.registerObject(&quot;exprNameModePadding&quot;, exprNameModePadding);&#xA;ruleresult.registerObject(&quot;methodEncryption&quot;, methodEncryption);&#xA;ruleresult.registerObject(&quot;sbc2Jcu&quot;, sbc2Jcu);&#xA;ruleresult.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;ruleresult.registerObject(&quot;exprKeyName&quot;, exprKeyName);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;task&quot;).eClass()).equals(&quot;CryptoAPIConfig.Task.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;sbc&quot;).eClass()).equals(&quot;CryptoAPIConfig.SymmetricBlockCipher.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;key&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;public&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;private&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(1);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(&quot;byte[] &quot;);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;Enc&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;data&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;Variable literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal9&quot;, true, csp);&#xA;literal9.setValue(0);&#xA;literal9.setType(&quot;&quot;);&#xA;Variable literal10 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal10&quot;, true, csp);&#xA;literal10.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal10.setType(&quot;&quot;);&#xA;Variable literal11 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal11&quot;, true, csp);&#xA;literal11.setValue(2);&#xA;literal11.setType(&quot;&quot;);&#xA;Variable literal12 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal12&quot;, true, csp);&#xA;literal12.setValue(&quot;encrypt&quot;);&#xA;literal12.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_exprKeyName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.identifier&quot;, true, csp);&#xA;var_exprKeyName_identifier.setValue(exprKeyName.getIdentifier());&#xA;var_exprKeyName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.modifier&quot;, true, csp);&#xA;var_methodEncryption_modifier.setValue(methodEncryption.getModifier());&#xA;var_methodEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.modifier&quot;, true, csp);&#xA;var_methodPerformEncryption_modifier.setValue(methodPerformEncryption.getModifier());&#xA;var_methodPerformEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_exprKeyName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.index&quot;, true, csp);&#xA;var_exprKeyName_index.setValue(exprKeyName.getIndex());&#xA;var_exprKeyName_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(methodEncryption.getIndex());&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.type&quot;, true, csp);&#xA;var_methodEncryption_type.setValue(methodEncryption.getType());&#xA;var_methodEncryption_type.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(methodPerformEncryption.getThrows());&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_jcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jcu.name&quot;, true, csp);&#xA;var_jcu_name.setValue(jcu.getName());&#xA;var_jcu_name.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.identifier&quot;, true, csp);&#xA;var_exprDataName_identifier.setValue(exprDataName.getIdentifier());&#xA;var_exprDataName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(methodEncryption.getThrows());&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(methodPerformEncryption.getBody());&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(methodPerformEncryption.getIndex());&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(methodPerformEncryption.getParameters());&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.index&quot;, true, csp);&#xA;var_exprDataName_index.setValue(exprDataName.getIndex());&#xA;var_exprDataName_index.setType(&quot;int&quot;);&#xA;Variable var_exprNameModePadding_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.index&quot;, true, csp);&#xA;var_exprNameModePadding_index.setValue(exprNameModePadding.getIndex());&#xA;var_exprNameModePadding_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.name&quot;, true, csp);&#xA;var_methodEncryption_name.setValue(methodEncryption.getName());&#xA;var_methodEncryption_name.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_12 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_13 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_14 = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;csp.getConstraints().add(setDefaultStringIfNull_12);&#xA;csp.getConstraints().add(setDefaultStringIfNull_13);&#xA;csp.getConstraints().add(setDefaultStringIfNull_14);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_exprKeyName_identifier,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodEncryption_modifier,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformEncryption_modifier,literal2);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_exprKeyName_index,literal3);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodEncryption_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodEncryption_type,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_methodPerformEncryption_throws,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_jcu_name,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_exprDataName_identifier,literal7);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_methodEncryption_throws,literal5);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodPerformEncryption_body,literal8);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_index,literal9);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformEncryption_parameters,literal10);&#xA;setDefaultStringIfNull_12.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_12.solve(var_exprDataName_index,literal9);&#xA;setDefaultStringIfNull_13.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_13.solve(var_exprNameModePadding_index,literal11);&#xA;setDefaultStringIfNull_14.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_14.solve(var_methodEncryption_name,literal12);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;exprRetPerformEncryption&quot;, exprRetPerformEncryption);&#xA;match.registerObject(&quot;dataEncryption&quot;, dataEncryption);&#xA;match.registerObject(&quot;statRetPerformEncryption&quot;, statRetPerformEncryption);&#xA;match.registerObject(&quot;exprDataName&quot;, exprDataName);&#xA;match.registerObject(&quot;jcu&quot;, jcu);&#xA;match.registerObject(&quot;keyEncryption&quot;, keyEncryption);&#xA;match.registerObject(&quot;methodPerformEncryption&quot;, methodPerformEncryption);&#xA;match.registerObject(&quot;exprNameModePadding&quot;, exprNameModePadding);&#xA;match.registerObject(&quot;methodEncryption&quot;, methodEncryption);&#xA;match.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;match.registerObject(&quot;exprKeyName&quot;, exprKeyName);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;crypto&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, true, csp);&#xA;var_javaPackage_name.setValue(javaPackage.getName());&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(exprNameModePadding.getValue());&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, csp);&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, csp);&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, csp);&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, csp);&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nameModePadding);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_task_package,literal0);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;exprRetPerformEncryption&quot;,exprRetPerformEncryption);&#xA;isApplicableMatch.registerObject(&quot;dataEncryption&quot;,dataEncryption);&#xA;isApplicableMatch.registerObject(&quot;statRetPerformEncryption&quot;,statRetPerformEncryption);&#xA;isApplicableMatch.registerObject(&quot;exprDataName&quot;,exprDataName);&#xA;isApplicableMatch.registerObject(&quot;jcu&quot;,jcu);&#xA;isApplicableMatch.registerObject(&quot;keyEncryption&quot;,keyEncryption);&#xA;isApplicableMatch.registerObject(&quot;methodPerformEncryption&quot;,methodPerformEncryption);&#xA;isApplicableMatch.registerObject(&quot;exprNameModePadding&quot;,exprNameModePadding);&#xA;isApplicableMatch.registerObject(&quot;methodEncryption&quot;,methodEncryption);&#xA;isApplicableMatch.registerObject(&quot;javaPackage&quot;,javaPackage);&#xA;isApplicableMatch.registerObject(&quot;exprKeyName&quot;,exprKeyName);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;exprRetPerformEncryption&quot;, exprRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;dataEncryption&quot;, dataEncryption);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;t2c&quot;, t2c);&#xA;ruleresult.registerObject(&quot;statRetPerformEncryption&quot;, statRetPerformEncryption);&#xA;ruleresult.registerObject(&quot;exprDataName&quot;, exprDataName);&#xA;ruleresult.registerObject(&quot;jcu&quot;, jcu);&#xA;ruleresult.registerObject(&quot;keyEncryption&quot;, keyEncryption);&#xA;ruleresult.registerObject(&quot;methodPerformEncryption&quot;, methodPerformEncryption);&#xA;ruleresult.registerObject(&quot;sbc&quot;, sbc);&#xA;ruleresult.registerObject(&quot;exprNameModePadding&quot;, exprNameModePadding);&#xA;ruleresult.registerObject(&quot;methodEncryption&quot;, methodEncryption);&#xA;ruleresult.registerObject(&quot;sbc2Jcu&quot;, sbc2Jcu);&#xA;ruleresult.registerObject(&quot;javaPackage&quot;, javaPackage);&#xA;ruleresult.registerObject(&quot;exprKeyName&quot;, exprKeyName);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprRetPerformEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaMethodInvocation.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;dataEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaVariableDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;statRetPerformEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaStatement.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprDataName&quot;).eClass()).equals(&quot;SimpleJava.JavaName.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jcu&quot;).eClass()).equals(&quot;SimpleJava.JavaCompilationUnit.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;keyEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaVariableDeclaration.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodPerformEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaOpaqueMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprNameModePadding&quot;).eClass()).equals(&quot;SimpleJava.JavaLiteral.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;methodEncryption&quot;).eClass()).equals(&quot;SimpleJava.JavaWorkflowMethod.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;javaPackage&quot;).eClass()).equals(&quot;SimpleJava.JavaPackage.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;exprKeyName&quot;).eClass()).equals(&quot;SimpleJava.JavaName.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jcu&quot;, jcu);&#xA;match.registerObject(&quot;var&quot;, var);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jcu&quot;,jcu);&#xA;isApplicableMatch.registerObject(&quot;var&quot;,var);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jcu&quot;, jcu);&#xA;ruleresult.registerObject(&quot;var&quot;, var);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;var&quot;).eClass()).equals(&quot;SimpleJava.JavaVariableDeclaration.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;alg&quot;, alg);&#xA;match.registerObject(&quot;imp&quot;, imp);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, true, csp);&#xA;var_imp_value.setValue(imp.getValue());&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, csp);&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ac&quot;,ac);&#xA;isApplicableMatch.registerObject(&quot;alg&quot;,alg);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;imp&quot;,imp);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;i2j&quot;, i2j);&#xA;ruleresult.registerObject(&quot;ac&quot;, ac);&#xA;ruleresult.registerObject(&quot;alg&quot;, alg);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;imp&quot;, imp);&#xA;ruleresult.registerObject(&quot;jimp&quot;, jimp);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;imp&quot;).eClass()).equals(&quot;CryptoAPIConfig.Import.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cu&quot;, cu);&#xA;match.registerObject(&quot;jimp&quot;, jimp);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, true, csp);&#xA;var_jimp_value.setValue(jimp.getValue());&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, csp);&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ac&quot;,ac);&#xA;isApplicableMatch.registerObject(&quot;alg&quot;,alg);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;jimp&quot;,jimp);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;i2j&quot;, i2j);&#xA;ruleresult.registerObject(&quot;ac&quot;, ac);&#xA;ruleresult.registerObject(&quot;alg&quot;, alg);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;imp&quot;, imp);&#xA;ruleresult.registerObject(&quot;jimp&quot;, jimp);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jimp&quot;).eClass()).equals(&quot;SimpleJava.JavaImport.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;alg&quot;, alg);&#xA;match.registerObject(&quot;imp&quot;, imp);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, true, csp);&#xA;var_imp_value.setValue(imp.getValue());&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, csp);&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;alg&quot;,alg);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;imp&quot;,imp);&#xA;isApplicableMatch.registerObject(&quot;ac&quot;,ac);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jimp&quot;, jimp);&#xA;ruleresult.registerObject(&quot;alg&quot;, alg);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;i2j&quot;, i2j);&#xA;ruleresult.registerObject(&quot;imp&quot;, imp);&#xA;ruleresult.registerObject(&quot;ac&quot;, ac);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;imp&quot;).eClass()).equals(&quot;CryptoAPIConfig.Import.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jimp&quot;, jimp);&#xA;match.registerObject(&quot;cu&quot;, cu);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, true, csp);&#xA;var_jimp_value.setValue(jimp.getValue());&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, csp);&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jimp&quot;,jimp);&#xA;isApplicableMatch.registerObject(&quot;alg&quot;,alg);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;ac&quot;,ac);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jimp&quot;, jimp);&#xA;ruleresult.registerObject(&quot;alg&quot;, alg);&#xA;ruleresult.registerObject(&quot;cu&quot;, cu);&#xA;ruleresult.registerObject(&quot;i2j&quot;, i2j);&#xA;ruleresult.registerObject(&quot;imp&quot;, imp);&#xA;ruleresult.registerObject(&quot;ac&quot;, ac);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;jimp&quot;).eClass()).equals(&quot;SimpleJava.JavaImport.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;jcu&quot;, jcu);&#xA;match.registerObject(&quot;method&quot;, method);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jcu&quot;,jcu);&#xA;isApplicableMatch.registerObject(&quot;method&quot;,method);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;jcu&quot;, jcu);&#xA;ruleresult.registerObject(&quot;method&quot;, method);&#xA;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;method&quot;).eClass()).equals(&quot;SimpleJava.JavaOpaqueMethod.&quot;);">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PasswordBasedEncryption&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprIterationLiteral&quot;, &quot;index&quot;, 2, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprOutputSizeLiteral&quot;, &quot;index&quot;, 3, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;kdaJcu&quot;, &quot;name&quot;, &quot;KeyDeriv&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;type&quot;, &quot;byte[] &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;name&quot;, &quot;key&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;type&quot;, &quot;SecretKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;name&quot;, &quot;data&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;type&quot;, &quot;byte[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;name&quot;, &quot;getKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;modifier&quot;, &quot;public&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprAlgNameLiteral&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;name&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;type&quot;, &quot;char[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetPerformEncryption&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprKeyName&quot;, &quot;identifier&quot;, &quot;key&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprKeyName&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprNameModePadding&quot;, &quot;index&quot;, 2, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodEncryption&quot;, &quot;type&quot;, &quot;byte[] &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodEncryption&quot;, &quot;name&quot;, &quot;encrypt&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodEncryption&quot;, &quot;modifier&quot;, &quot;public&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;task&quot;, &quot;description&quot;, &quot;PasswordBasedEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;identifier&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprDataName&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprDataName&quot;, &quot;identifier&quot;, &quot;data&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetGetKey&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;parameters&quot;));&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal1.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal2.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;var_literal2.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal3.setValue(0);&#xA;var_literal3.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal4.setValue(&quot;Crypto&quot;);&#xA;var_literal4.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;throws&quot;));&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;index&quot;));&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;throws&quot;));&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xA;var_task_package.setValue(__helper.getValue(&quot;task&quot;, &quot;package&quot;));&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;throws&quot;));&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbcJcu&quot;, true, csp);&#xA;var_sbcJcu_name.setValue(__helper.getValue(&quot;sbcJcu&quot;, &quot;name&quot;));&#xA;var_sbcJcu_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal5.setValue(&quot;Enc&quot;);&#xA;var_literal5.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;body&quot;));&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;index&quot;));&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal6.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;var_literal6.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;index&quot;));&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal7.setValue(1);&#xA;var_literal7.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;throws&quot;));&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;index&quot;));&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal8.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;var_literal8.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;body&quot;));&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(__helper.getValue(&quot;exprIterationLiteral&quot;, &quot;value&quot;));&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage&quot;, true, csp);&#xA;var_javaPackage_name.setValue(__helper.getValue(&quot;javaPackage&quot;, &quot;name&quot;));&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_name.setValue(__helper.getValue(&quot;kda&quot;, &quot;name&quot;));&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_iterations.setValue(__helper.getValue(&quot;kda&quot;, &quot;iterations&quot;));&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(__helper.getValue(&quot;exprAlgNameLiteral&quot;, &quot;value&quot;));&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_outputSize.setValue(__helper.getValue(&quot;kda&quot;, &quot;outputSize&quot;));&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(__helper.getValue(&quot;exprOutputSizeLiteral&quot;, &quot;value&quot;));&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_padding.setValue(__helper.getValue(&quot;sbc&quot;, &quot;padding&quot;));&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_name.setValue(__helper.getValue(&quot;sbc&quot;, &quot;name&quot;));&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(__helper.getValue(&quot;exprNameModePadding&quot;, &quot;value&quot;));&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_mode.setValue(__helper.getValue(&quot;sbc&quot;, &quot;mode&quot;));&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;));&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal9.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;var_literal9.setType(&quot;&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull1 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull1);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull2 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull2);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull3 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull3);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull4 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull4);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull5);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull6 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull6);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull7 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull7);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull8 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull8);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull9 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull9);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull10 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull10);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull11 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull11);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull12 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull12);&#xA;&#xA;Eq eq13 = new Eq();&#xA;csp.getConstraints().add(eq13);&#xA;&#xA;Eq eq14 = new Eq();&#xA;csp.getConstraints().add(eq14);&#xA;&#xA;Eq eq15 = new Eq();&#xA;csp.getConstraints().add(eq15);&#xA;&#xA;Eq eq16 = new Eq();&#xA;csp.getConstraints().add(eq16);&#xA;&#xA;NameModePadding nameModePadding17 = new NameModePadding();&#xA;csp.getConstraints().add(nameModePadding17);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull18 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull18);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull0.solve(var_task_package,var_literal4);&#xA;&#xA;setDefaultStringIfNull1.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull1.solve(var_methodEncryption_throws,var_literal2);&#xA;&#xA;setDefaultStringIfNull2.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull2.solve(var_methodPerformEncryption_parameters,var_literal0);&#xA;&#xA;setDefaultStringIfNull3.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull3.solve(var_methodPerformEncryption_throws,var_literal2);&#xA;&#xA;setDefaultStringIfNull4.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull4.solve(var_methodPerformGetKey_throws,var_literal1);&#xA;&#xA;setDefaultStringIfNull5.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull5.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#xA;setDefaultStringIfNull6.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull6.solve(var_methodEncryption_index,var_literal7);&#xA;&#xA;setDefaultStringIfNull7.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull7.solve(var_sbcJcu_name,var_literal5);&#xA;&#xA;setDefaultStringIfNull8.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull8.solve(var_methodPerformGetKey_body,var_literal6);&#xA;&#xA;setDefaultStringIfNull9.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull9.solve(var_methodGetKey_index,var_literal7);&#xA;&#xA;setDefaultStringIfNull10.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull10.solve(var_methodGetKey_throws,var_literal1);&#xA;&#xA;setDefaultStringIfNull11.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull11.solve(var_methodPerformEncryption_index,var_literal3);&#xA;&#xA;setDefaultStringIfNull12.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull12.solve(var_methodPerformEncryption_body,var_literal8);&#xA;&#xA;eq13.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq13.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#xA;eq14.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq14.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#xA;eq15.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq15.solve(var_task_package,var_javaPackage_name);&#xA;&#xA;eq16.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq16.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#xA;nameModePadding17.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;nameModePadding17.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;setDefaultStringIfNull18.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull18.solve(var_methodPerformGetKey_parameters,var_literal9);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_methodEncryption_throws.setBound(false);&#xA;&#x9;var_methodPerformEncryption_parameters.setBound(false);&#xA;&#x9;var_methodPerformEncryption_throws.setBound(false);&#xA;&#x9;var_methodPerformGetKey_throws.setBound(false);&#xA;&#x9;var_methodPerformGetKey_index.setBound(false);&#xA;&#x9;var_methodEncryption_index.setBound(false);&#xA;&#x9;var_sbcJcu_name.setBound(false);&#xA;&#x9;var_methodPerformGetKey_body.setBound(false);&#xA;&#x9;var_methodGetKey_index.setBound(false);&#xA;&#x9;var_methodGetKey_throws.setBound(false);&#xA;&#x9;var_methodPerformEncryption_index.setBound(false);&#xA;&#x9;var_methodPerformEncryption_body.setBound(false);&#xA;&#x9;var_exprAlgNameLiteral_value.setBound(false);&#xA;&#x9;var_exprIterationLiteral_value.setBound(false);&#xA;&#x9;var_javaPackage_name.setBound(false);&#xA;&#x9;var_exprOutputSizeLiteral_value.setBound(false);&#xA;&#x9;var_exprNameModePadding_value.setBound(false);&#xA;&#x9;var_methodPerformGetKey_parameters.setBound(false);&#xA;&#x9;setDefaultStringIfNull0.solve(var_task_package,var_literal4);&#xA;&#x9;setDefaultStringIfNull1.solve(var_methodEncryption_throws,var_literal2);&#xA;&#x9;setDefaultStringIfNull2.solve(var_methodPerformEncryption_parameters,var_literal0);&#xA;&#x9;setDefaultStringIfNull3.solve(var_methodPerformEncryption_throws,var_literal2);&#xA;&#x9;setDefaultStringIfNull4.solve(var_methodPerformGetKey_throws,var_literal1);&#xA;&#x9;setDefaultStringIfNull5.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#x9;setDefaultStringIfNull6.solve(var_methodEncryption_index,var_literal7);&#xA;&#x9;setDefaultStringIfNull7.solve(var_sbcJcu_name,var_literal5);&#xA;&#x9;setDefaultStringIfNull8.solve(var_methodPerformGetKey_body,var_literal6);&#xA;&#x9;setDefaultStringIfNull9.solve(var_methodGetKey_index,var_literal7);&#xA;&#x9;setDefaultStringIfNull10.solve(var_methodGetKey_throws,var_literal1);&#xA;&#x9;setDefaultStringIfNull11.solve(var_methodPerformEncryption_index,var_literal3);&#xA;&#x9;setDefaultStringIfNull12.solve(var_methodPerformEncryption_body,var_literal8);&#xA;&#x9;eq13.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#x9;eq14.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#x9;eq15.solve(var_task_package,var_javaPackage_name);&#xA;&#x9;eq16.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#x9;nameModePadding17.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#x9;setDefaultStringIfNull18.solve(var_methodPerformGetKey_parameters,var_literal9);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;methodEncryption&quot;, &quot;throws&quot;, var_methodEncryption_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;parameters&quot;, var_methodPerformEncryption_parameters.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;throws&quot;, var_methodPerformEncryption_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;throws&quot;, var_methodPerformGetKey_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;index&quot;, var_methodPerformGetKey_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodEncryption&quot;, &quot;index&quot;, var_methodEncryption_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;sbcJcu&quot;, &quot;name&quot;, var_sbcJcu_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;body&quot;, var_methodPerformGetKey_body.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodGetKey&quot;, &quot;index&quot;, var_methodGetKey_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodGetKey&quot;, &quot;throws&quot;, var_methodGetKey_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;index&quot;, var_methodPerformEncryption_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;body&quot;, var_methodPerformEncryption_body.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprAlgNameLiteral&quot;, &quot;value&quot;, var_exprAlgNameLiteral_value.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprIterationLiteral&quot;, &quot;value&quot;, var_exprIterationLiteral_value.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;javaPackage&quot;, &quot;name&quot;, var_javaPackage_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprOutputSizeLiteral&quot;, &quot;value&quot;, var_exprOutputSizeLiteral_value.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprNameModePadding&quot;, &quot;value&quot;, var_exprNameModePadding_value.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;, var_methodPerformGetKey_parameters.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PasswordBasedEncryption&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprIterationLiteral&quot;, &quot;index&quot;, 2, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprOutputSizeLiteral&quot;, &quot;index&quot;, 3, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;kdaJcu&quot;, &quot;name&quot;, &quot;KeyDeriv&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;type&quot;, &quot;byte[] &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;name&quot;, &quot;key&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;type&quot;, &quot;SecretKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;name&quot;, &quot;data&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;type&quot;, &quot;byte[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;name&quot;, &quot;getKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;modifier&quot;, &quot;public&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprAlgNameLiteral&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;name&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;type&quot;, &quot;char[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetPerformEncryption&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprKeyName&quot;, &quot;identifier&quot;, &quot;key&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprKeyName&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprNameModePadding&quot;, &quot;index&quot;, 2, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodEncryption&quot;, &quot;type&quot;, &quot;byte[] &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodEncryption&quot;, &quot;name&quot;, &quot;encrypt&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodEncryption&quot;, &quot;modifier&quot;, &quot;public&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;task&quot;, &quot;description&quot;, &quot;PasswordBasedEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;identifier&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprDataName&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprDataName&quot;, &quot;identifier&quot;, &quot;data&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetGetKey&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;parameters&quot;));&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal1.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal2.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;var_literal2.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal3.setValue(0);&#xA;var_literal3.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal4.setValue(&quot;Crypto&quot;);&#xA;var_literal4.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;throws&quot;));&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;index&quot;));&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;throws&quot;));&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xA;var_task_package.setValue(__helper.getValue(&quot;task&quot;, &quot;package&quot;));&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;throws&quot;));&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbcJcu&quot;, true, csp);&#xA;var_sbcJcu_name.setValue(__helper.getValue(&quot;sbcJcu&quot;, &quot;name&quot;));&#xA;var_sbcJcu_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal5.setValue(&quot;Enc&quot;);&#xA;var_literal5.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;body&quot;));&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;index&quot;));&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal6.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;var_literal6.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;index&quot;));&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal7.setValue(1);&#xA;var_literal7.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;throws&quot;));&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;index&quot;));&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal8.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;var_literal8.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;body&quot;));&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(__helper.getValue(&quot;exprIterationLiteral&quot;, &quot;value&quot;));&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage&quot;, true, csp);&#xA;var_javaPackage_name.setValue(__helper.getValue(&quot;javaPackage&quot;, &quot;name&quot;));&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_name.setValue(__helper.getValue(&quot;kda&quot;, &quot;name&quot;));&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_iterations.setValue(__helper.getValue(&quot;kda&quot;, &quot;iterations&quot;));&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(__helper.getValue(&quot;exprAlgNameLiteral&quot;, &quot;value&quot;));&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_outputSize.setValue(__helper.getValue(&quot;kda&quot;, &quot;outputSize&quot;));&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(__helper.getValue(&quot;exprOutputSizeLiteral&quot;, &quot;value&quot;));&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_padding.setValue(__helper.getValue(&quot;sbc&quot;, &quot;padding&quot;));&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_name.setValue(__helper.getValue(&quot;sbc&quot;, &quot;name&quot;));&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(__helper.getValue(&quot;exprNameModePadding&quot;, &quot;value&quot;));&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_mode.setValue(__helper.getValue(&quot;sbc&quot;, &quot;mode&quot;));&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;));&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal9.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;var_literal9.setType(&quot;&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull1 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull1);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull2 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull2);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull3 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull3);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull4 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull4);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull5);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull6 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull6);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull7 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull7);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull8 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull8);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull9 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull9);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull10 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull10);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull11 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull11);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull12 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull12);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull13 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull13);&#xA;&#xA;Eq eq14 = new Eq();&#xA;csp.getConstraints().add(eq14);&#xA;&#xA;Eq eq15 = new Eq();&#xA;csp.getConstraints().add(eq15);&#xA;&#xA;Eq eq16 = new Eq();&#xA;csp.getConstraints().add(eq16);&#xA;&#xA;Eq eq17 = new Eq();&#xA;csp.getConstraints().add(eq17);&#xA;&#xA;NameModePadding nameModePadding18 = new NameModePadding();&#xA;csp.getConstraints().add(nameModePadding18);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull0.solve(var_methodEncryption_throws,var_literal2);&#xA;&#xA;setDefaultStringIfNull1.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull1.solve(var_methodPerformEncryption_parameters,var_literal0);&#xA;&#xA;setDefaultStringIfNull2.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull2.solve(var_methodPerformEncryption_throws,var_literal2);&#xA;&#xA;setDefaultStringIfNull3.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull3.solve(var_methodPerformGetKey_throws,var_literal1);&#xA;&#xA;setDefaultStringIfNull4.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull4.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#xA;setDefaultStringIfNull5.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull5.solve(var_methodEncryption_index,var_literal7);&#xA;&#xA;setDefaultStringIfNull6.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull6.solve(var_sbcJcu_name,var_literal5);&#xA;&#xA;setDefaultStringIfNull7.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull7.solve(var_methodPerformGetKey_body,var_literal6);&#xA;&#xA;setDefaultStringIfNull8.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull8.solve(var_methodGetKey_index,var_literal7);&#xA;&#xA;setDefaultStringIfNull9.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull9.solve(var_methodGetKey_throws,var_literal1);&#xA;&#xA;setDefaultStringIfNull10.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull10.solve(var_methodPerformEncryption_index,var_literal3);&#xA;&#xA;setDefaultStringIfNull11.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull11.solve(var_methodPerformEncryption_body,var_literal8);&#xA;&#xA;setDefaultStringIfNull12.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull12.solve(var_methodPerformGetKey_parameters,var_literal9);&#xA;&#xA;setDefaultStringIfNull13.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;setDefaultStringIfNull13.solve(var_task_package,var_literal4);&#xA;&#xA;eq14.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq14.solve(var_task_package,var_javaPackage_name);&#xA;&#xA;eq15.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq15.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#xA;eq16.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq16.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#xA;eq17.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;eq17.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#xA;nameModePadding18.setRuleName(&quot;PasswordBasedEncryption&quot;);&#xA;nameModePadding18.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_task_package.setBound(false);&#xA;&#x9;var_task_package.setBound(false);&#xA;&#x9;var_kda_name.setBound(false);&#xA;&#x9;var_kda_iterations.setBound(false);&#xA;&#x9;var_kda_outputSize.setBound(false);&#xA;&#x9;var_sbc_padding.setBound(false);&#xA;&#x9;var_sbc_name.setBound(false);&#xA;&#x9;var_sbc_mode.setBound(false);&#xA;&#x9;setDefaultStringIfNull0.solve(var_methodEncryption_throws,var_literal2);&#xA;&#x9;setDefaultStringIfNull1.solve(var_methodPerformEncryption_parameters,var_literal0);&#xA;&#x9;setDefaultStringIfNull2.solve(var_methodPerformEncryption_throws,var_literal2);&#xA;&#x9;setDefaultStringIfNull3.solve(var_methodPerformGetKey_throws,var_literal1);&#xA;&#x9;setDefaultStringIfNull4.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#x9;setDefaultStringIfNull5.solve(var_methodEncryption_index,var_literal7);&#xA;&#x9;setDefaultStringIfNull6.solve(var_sbcJcu_name,var_literal5);&#xA;&#x9;setDefaultStringIfNull7.solve(var_methodPerformGetKey_body,var_literal6);&#xA;&#x9;setDefaultStringIfNull8.solve(var_methodGetKey_index,var_literal7);&#xA;&#x9;setDefaultStringIfNull9.solve(var_methodGetKey_throws,var_literal1);&#xA;&#x9;setDefaultStringIfNull10.solve(var_methodPerformEncryption_index,var_literal3);&#xA;&#x9;setDefaultStringIfNull11.solve(var_methodPerformEncryption_body,var_literal8);&#xA;&#x9;setDefaultStringIfNull12.solve(var_methodPerformGetKey_parameters,var_literal9);&#xA;&#x9;setDefaultStringIfNull13.solve(var_task_package,var_literal4);&#xA;&#x9;eq14.solve(var_task_package,var_javaPackage_name);&#xA;&#x9;eq15.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#x9;eq16.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#x9;eq17.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#x9;nameModePadding18.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;task&quot;, &quot;package&quot;, var_task_package.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;task&quot;, &quot;package&quot;, var_task_package.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;kda&quot;, &quot;name&quot;, var_kda_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;kda&quot;, &quot;iterations&quot;, var_kda_iterations.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;kda&quot;, &quot;outputSize&quot;, var_kda_outputSize.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;sbc&quot;, &quot;padding&quot;, var_sbc_padding.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;sbc&quot;, &quot;name&quot;, var_sbc_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;sbc&quot;, &quot;mode&quot;, var_sbc_mode.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SecurePasswordTask&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprIterationLiteral&quot;, &quot;index&quot;, 2, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprAlgNameLiteral&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;name&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;type&quot;, &quot;char[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprOutputSizeLiteral&quot;, &quot;index&quot;, 3, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;task&quot;, &quot;description&quot;, &quot;SecurePassword&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;identifier&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetGetKey&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;modifier&quot;, &quot;public&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;name&quot;, &quot;getKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;jcu&quot;, &quot;name&quot;, &quot;KeyDeriv&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;throws&quot;));&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;throws&quot;));&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;body&quot;));&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;index&quot;));&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal1.setValue(1);&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal2.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;var_literal2.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal3.setValue(0);&#xA;var_literal3.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;index&quot;));&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xA;var_task_package.setValue(__helper.getValue(&quot;task&quot;, &quot;package&quot;));&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal4.setValue(&quot;Crypto&quot;);&#xA;var_literal4.setType(&quot;&quot;);&#xA;&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_outputSize.setValue(__helper.getValue(&quot;kda&quot;, &quot;outputSize&quot;));&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage&quot;, true, csp);&#xA;var_javaPackage_name.setValue(__helper.getValue(&quot;javaPackage&quot;, &quot;name&quot;));&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(__helper.getValue(&quot;exprAlgNameLiteral&quot;, &quot;value&quot;));&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_name.setValue(__helper.getValue(&quot;kda&quot;, &quot;name&quot;));&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(__helper.getValue(&quot;exprOutputSizeLiteral&quot;, &quot;value&quot;));&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(__helper.getValue(&quot;exprIterationLiteral&quot;, &quot;value&quot;));&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_iterations.setValue(__helper.getValue(&quot;kda&quot;, &quot;iterations&quot;));&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;));&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal5.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;var_literal5.setType(&quot;&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull1 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull1);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull2 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull2);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull3 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull3);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull4 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull4);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull5);&#xA;&#xA;Eq eq6 = new Eq();&#xA;csp.getConstraints().add(eq6);&#xA;&#xA;Eq eq7 = new Eq();&#xA;csp.getConstraints().add(eq7);&#xA;&#xA;Eq eq8 = new Eq();&#xA;csp.getConstraints().add(eq8);&#xA;&#xA;Eq eq9 = new Eq();&#xA;csp.getConstraints().add(eq9);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull10 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull10);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull0.solve(var_task_package,var_literal4);&#xA;&#xA;setDefaultStringIfNull1.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull1.solve(var_methodGetKey_throws,var_literal0);&#xA;&#xA;setDefaultStringIfNull2.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull2.solve(var_methodGetKey_index,var_literal1);&#xA;&#xA;setDefaultStringIfNull3.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull3.solve(var_methodPerformGetKey_throws,var_literal0);&#xA;&#xA;setDefaultStringIfNull4.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull4.solve(var_methodPerformGetKey_body,var_literal2);&#xA;&#xA;setDefaultStringIfNull5.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull5.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#xA;eq6.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq6.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#xA;eq7.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq7.solve(var_task_package,var_javaPackage_name);&#xA;&#xA;eq8.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq8.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#xA;eq9.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq9.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#xA;setDefaultStringIfNull10.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull10.solve(var_methodPerformGetKey_parameters,var_literal5);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_methodGetKey_throws.setBound(false);&#xA;&#x9;var_methodGetKey_index.setBound(false);&#xA;&#x9;var_methodPerformGetKey_throws.setBound(false);&#xA;&#x9;var_methodPerformGetKey_body.setBound(false);&#xA;&#x9;var_methodPerformGetKey_index.setBound(false);&#xA;&#x9;var_exprOutputSizeLiteral_value.setBound(false);&#xA;&#x9;var_javaPackage_name.setBound(false);&#xA;&#x9;var_exprAlgNameLiteral_value.setBound(false);&#xA;&#x9;var_exprIterationLiteral_value.setBound(false);&#xA;&#x9;var_methodPerformGetKey_parameters.setBound(false);&#xA;&#x9;setDefaultStringIfNull0.solve(var_task_package,var_literal4);&#xA;&#x9;setDefaultStringIfNull1.solve(var_methodGetKey_throws,var_literal0);&#xA;&#x9;setDefaultStringIfNull2.solve(var_methodGetKey_index,var_literal1);&#xA;&#x9;setDefaultStringIfNull3.solve(var_methodPerformGetKey_throws,var_literal0);&#xA;&#x9;setDefaultStringIfNull4.solve(var_methodPerformGetKey_body,var_literal2);&#xA;&#x9;setDefaultStringIfNull5.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#x9;eq6.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#x9;eq7.solve(var_task_package,var_javaPackage_name);&#xA;&#x9;eq8.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#x9;eq9.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#x9;setDefaultStringIfNull10.solve(var_methodPerformGetKey_parameters,var_literal5);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;methodGetKey&quot;, &quot;throws&quot;, var_methodGetKey_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodGetKey&quot;, &quot;index&quot;, var_methodGetKey_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;throws&quot;, var_methodPerformGetKey_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;body&quot;, var_methodPerformGetKey_body.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;index&quot;, var_methodPerformGetKey_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprOutputSizeLiteral&quot;, &quot;value&quot;, var_exprOutputSizeLiteral_value.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;javaPackage&quot;, &quot;name&quot;, var_javaPackage_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprAlgNameLiteral&quot;, &quot;value&quot;, var_exprAlgNameLiteral_value.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprIterationLiteral&quot;, &quot;value&quot;, var_exprIterationLiteral_value.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;, var_methodPerformGetKey_parameters.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SecurePasswordTask&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprIterationLiteral&quot;, &quot;index&quot;, 2, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprAlgNameLiteral&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;name&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;pwdDeclaration&quot;, &quot;type&quot;, &quot;char[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprOutputSizeLiteral&quot;, &quot;index&quot;, 3, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;task&quot;, &quot;description&quot;, &quot;SecurePassword&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;identifier&quot;, &quot;pwd&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprPwdName&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetGetKey&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;modifier&quot;, &quot;public&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodGetKey&quot;, &quot;name&quot;, &quot;getKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;jcu&quot;, &quot;name&quot;, &quot;KeyDeriv&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;throws&quot;));&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;throws&quot;));&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;body&quot;));&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(__helper.getValue(&quot;methodGetKey&quot;, &quot;index&quot;));&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal1.setValue(1);&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal2.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;var_literal2.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal3.setValue(0);&#xA;var_literal3.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;index&quot;));&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xA;var_task_package.setValue(__helper.getValue(&quot;task&quot;, &quot;package&quot;));&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal4.setValue(&quot;Crypto&quot;);&#xA;var_literal4.setType(&quot;&quot;);&#xA;&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_outputSize.setValue(__helper.getValue(&quot;kda&quot;, &quot;outputSize&quot;));&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage&quot;, true, csp);&#xA;var_javaPackage_name.setValue(__helper.getValue(&quot;javaPackage&quot;, &quot;name&quot;));&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(__helper.getValue(&quot;exprAlgNameLiteral&quot;, &quot;value&quot;));&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_name.setValue(__helper.getValue(&quot;kda&quot;, &quot;name&quot;));&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(__helper.getValue(&quot;exprOutputSizeLiteral&quot;, &quot;value&quot;));&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(__helper.getValue(&quot;exprIterationLiteral&quot;, &quot;value&quot;));&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda&quot;, true, csp);&#xA;var_kda_iterations.setValue(__helper.getValue(&quot;kda&quot;, &quot;iterations&quot;));&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;));&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal5.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;var_literal5.setType(&quot;&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull1 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull1);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull2 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull2);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull3 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull3);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull4 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull4);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull5);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull6 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull6);&#xA;&#xA;Eq eq7 = new Eq();&#xA;csp.getConstraints().add(eq7);&#xA;&#xA;Eq eq8 = new Eq();&#xA;csp.getConstraints().add(eq8);&#xA;&#xA;Eq eq9 = new Eq();&#xA;csp.getConstraints().add(eq9);&#xA;&#xA;Eq eq10 = new Eq();&#xA;csp.getConstraints().add(eq10);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull0.solve(var_methodGetKey_throws,var_literal0);&#xA;&#xA;setDefaultStringIfNull1.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull1.solve(var_methodGetKey_index,var_literal1);&#xA;&#xA;setDefaultStringIfNull2.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull2.solve(var_methodPerformGetKey_throws,var_literal0);&#xA;&#xA;setDefaultStringIfNull3.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull3.solve(var_methodPerformGetKey_body,var_literal2);&#xA;&#xA;setDefaultStringIfNull4.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull4.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#xA;setDefaultStringIfNull5.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull5.solve(var_methodPerformGetKey_parameters,var_literal5);&#xA;&#xA;setDefaultStringIfNull6.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;setDefaultStringIfNull6.solve(var_task_package,var_literal4);&#xA;&#xA;eq7.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq7.solve(var_task_package,var_javaPackage_name);&#xA;&#xA;eq8.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq8.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#xA;eq9.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq9.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#xA;eq10.setRuleName(&quot;SecurePasswordTask&quot;);&#xA;eq10.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_task_package.setBound(false);&#xA;&#x9;var_task_package.setBound(false);&#xA;&#x9;var_kda_outputSize.setBound(false);&#xA;&#x9;var_kda_name.setBound(false);&#xA;&#x9;var_kda_iterations.setBound(false);&#xA;&#x9;setDefaultStringIfNull0.solve(var_methodGetKey_throws,var_literal0);&#xA;&#x9;setDefaultStringIfNull1.solve(var_methodGetKey_index,var_literal1);&#xA;&#x9;setDefaultStringIfNull2.solve(var_methodPerformGetKey_throws,var_literal0);&#xA;&#x9;setDefaultStringIfNull3.solve(var_methodPerformGetKey_body,var_literal2);&#xA;&#x9;setDefaultStringIfNull4.solve(var_methodPerformGetKey_index,var_literal3);&#xA;&#x9;setDefaultStringIfNull5.solve(var_methodPerformGetKey_parameters,var_literal5);&#xA;&#x9;setDefaultStringIfNull6.solve(var_task_package,var_literal4);&#xA;&#x9;eq7.solve(var_task_package,var_javaPackage_name);&#xA;&#x9;eq8.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#x9;eq9.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;&#x9;eq10.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;task&quot;, &quot;package&quot;, var_task_package.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;task&quot;, &quot;package&quot;, var_task_package.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;kda&quot;, &quot;outputSize&quot;, var_kda_outputSize.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;kda&quot;, &quot;name&quot;, var_kda_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;kda&quot;, &quot;iterations&quot;, var_kda_iterations.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PerformGetKeyMethod&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;));&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;PerformGetKeyMethod&quot;);&#xA;setDefaultStringIfNull0.solve(var_methodPerformGetKey_parameters,var_literal0);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_methodPerformGetKey_parameters.setBound(false);&#xA;&#x9;setDefaultStringIfNull0.solve(var_methodPerformGetKey_parameters,var_literal0);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;, var_methodPerformGetKey_parameters.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;PerformGetKeyMethod&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;modifier&quot;, &quot;private&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;name&quot;, &quot;performGetKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformGetKey&quot;, &quot;type&quot;, &quot;SecretKey &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(__helper.getValue(&quot;methodPerformGetKey&quot;, &quot;parameters&quot;));&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;PerformGetKeyMethod&quot;);&#xA;setDefaultStringIfNull0.solve(var_methodPerformGetKey_parameters,var_literal0);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;setDefaultStringIfNull0.solve(var_methodPerformGetKey_parameters,var_literal0);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreMethodInvocationArgument&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreMethodInvocationArgument&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SymmetricEncryptionTask&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;type&quot;, &quot;byte[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;name&quot;, &quot;data&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;task&quot;, &quot;description&quot;, &quot;SymmetricEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetPerformEncryption&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;type&quot;, &quot;SecretKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;name&quot;, &quot;key&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;type&quot;, &quot;byte[] &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_exprKeyName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName&quot;, true, csp);&#xA;var_exprKeyName_identifier.setValue(__helper.getValue(&quot;exprKeyName&quot;, &quot;identifier&quot;));&#xA;var_exprKeyName_identifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_modifier.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;modifier&quot;));&#xA;var_methodEncryption_modifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;crypto&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_modifier.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;modifier&quot;));&#xA;var_methodPerformEncryption_modifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprKeyName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName&quot;, true, csp);&#xA;var_exprKeyName_index.setValue(__helper.getValue(&quot;exprKeyName&quot;, &quot;index&quot;));&#xA;var_exprKeyName_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal1.setValue(&quot;key&quot;);&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal2.setValue(1);&#xA;var_literal2.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal3.setValue(&quot;byte[] &quot;);&#xA;var_literal3.setType(&quot;&quot;);&#xA;&#xA;Variable var_exprDataName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName&quot;, true, csp);&#xA;var_exprDataName_identifier.setValue(__helper.getValue(&quot;exprDataName&quot;, &quot;identifier&quot;));&#xA;var_exprDataName_identifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xA;var_task_package.setValue(__helper.getValue(&quot;task&quot;, &quot;package&quot;));&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal4.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;var_literal4.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;throws&quot;));&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jcu&quot;, true, csp);&#xA;var_jcu_name.setValue(__helper.getValue(&quot;jcu&quot;, &quot;name&quot;));&#xA;var_jcu_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal5.setValue(&quot;public&quot;);&#xA;var_literal5.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;index&quot;));&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_methodEncryption_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_type.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;type&quot;));&#xA;var_methodEncryption_type.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal6.setValue(&quot;data&quot;);&#xA;var_literal6.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal7.setValue(&quot;Enc&quot;);&#xA;var_literal7.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;index&quot;));&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal8.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;var_literal8.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;parameters&quot;));&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal9.setValue(&quot;private&quot;);&#xA;var_literal9.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal10 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal10.setValue(0);&#xA;var_literal10.setType(&quot;&quot;);&#xA;&#xA;Variable var_exprDataName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName&quot;, true, csp);&#xA;var_exprDataName_index.setValue(__helper.getValue(&quot;exprDataName&quot;, &quot;index&quot;));&#xA;var_exprDataName_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal11 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal11.setValue(2);&#xA;var_literal11.setType(&quot;&quot;);&#xA;&#xA;Variable var_exprNameModePadding_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding&quot;, true, csp);&#xA;var_exprNameModePadding_index.setValue(__helper.getValue(&quot;exprNameModePadding&quot;, &quot;index&quot;));&#xA;var_exprNameModePadding_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;throws&quot;));&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal12 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal12.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;var_literal12.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_name.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;name&quot;));&#xA;var_methodEncryption_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal13 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal13.setValue(&quot;encrypt&quot;);&#xA;var_literal13.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;body&quot;));&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage&quot;, true, csp);&#xA;var_javaPackage_name.setValue(__helper.getValue(&quot;javaPackage&quot;, &quot;name&quot;));&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(__helper.getValue(&quot;exprNameModePadding&quot;, &quot;value&quot;));&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_mode.setValue(__helper.getValue(&quot;sbc&quot;, &quot;mode&quot;));&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_padding.setValue(__helper.getValue(&quot;sbc&quot;, &quot;padding&quot;));&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_name.setValue(__helper.getValue(&quot;sbc&quot;, &quot;name&quot;));&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull1 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull1);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull2 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull2);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull3 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull3);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull4 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull4);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull5);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull6 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull6);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull7 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull7);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull8 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull8);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull9 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull9);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull10 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull10);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull11 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull11);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull12 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull12);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull13 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull13);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull14 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull14);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull15 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull15);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull16 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull16);&#xA;&#xA;Eq eq17 = new Eq();&#xA;csp.getConstraints().add(eq17);&#xA;&#xA;NameModePadding nameModePadding18 = new NameModePadding();&#xA;csp.getConstraints().add(nameModePadding18);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull0.solve(var_task_package,var_literal0);&#xA;&#xA;setDefaultStringIfNull1.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull1.solve(var_exprKeyName_identifier,var_literal1);&#xA;&#xA;setDefaultStringIfNull2.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull2.solve(var_methodEncryption_modifier,var_literal5);&#xA;&#xA;setDefaultStringIfNull3.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull3.solve(var_methodPerformEncryption_modifier,var_literal9);&#xA;&#xA;setDefaultStringIfNull4.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull4.solve(var_exprKeyName_index,var_literal2);&#xA;&#xA;setDefaultStringIfNull5.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull5.solve(var_methodEncryption_index,var_literal2);&#xA;&#xA;setDefaultStringIfNull6.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull6.solve(var_methodEncryption_type,var_literal3);&#xA;&#xA;setDefaultStringIfNull7.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull7.solve(var_methodPerformEncryption_throws,var_literal4);&#xA;&#xA;setDefaultStringIfNull8.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull8.solve(var_jcu_name,var_literal7);&#xA;&#xA;setDefaultStringIfNull9.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull9.solve(var_exprDataName_identifier,var_literal6);&#xA;&#xA;setDefaultStringIfNull10.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull10.solve(var_methodEncryption_throws,var_literal4);&#xA;&#xA;setDefaultStringIfNull11.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull11.solve(var_methodPerformEncryption_body,var_literal12);&#xA;&#xA;setDefaultStringIfNull12.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull12.solve(var_methodPerformEncryption_index,var_literal10);&#xA;&#xA;setDefaultStringIfNull13.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull13.solve(var_methodPerformEncryption_parameters,var_literal8);&#xA;&#xA;setDefaultStringIfNull14.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull14.solve(var_exprDataName_index,var_literal10);&#xA;&#xA;setDefaultStringIfNull15.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull15.solve(var_exprNameModePadding_index,var_literal11);&#xA;&#xA;setDefaultStringIfNull16.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull16.solve(var_methodEncryption_name,var_literal13);&#xA;&#xA;eq17.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;eq17.solve(var_task_package,var_javaPackage_name);&#xA;&#xA;nameModePadding18.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;nameModePadding18.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_exprKeyName_identifier.setBound(false);&#xA;&#x9;var_methodEncryption_modifier.setBound(false);&#xA;&#x9;var_methodPerformEncryption_modifier.setBound(false);&#xA;&#x9;var_exprKeyName_index.setBound(false);&#xA;&#x9;var_methodEncryption_index.setBound(false);&#xA;&#x9;var_methodEncryption_type.setBound(false);&#xA;&#x9;var_methodPerformEncryption_throws.setBound(false);&#xA;&#x9;var_jcu_name.setBound(false);&#xA;&#x9;var_exprDataName_identifier.setBound(false);&#xA;&#x9;var_methodEncryption_throws.setBound(false);&#xA;&#x9;var_methodPerformEncryption_body.setBound(false);&#xA;&#x9;var_methodPerformEncryption_index.setBound(false);&#xA;&#x9;var_methodPerformEncryption_parameters.setBound(false);&#xA;&#x9;var_exprDataName_index.setBound(false);&#xA;&#x9;var_exprNameModePadding_index.setBound(false);&#xA;&#x9;var_methodEncryption_name.setBound(false);&#xA;&#x9;var_javaPackage_name.setBound(false);&#xA;&#x9;var_exprNameModePadding_value.setBound(false);&#xA;&#x9;setDefaultStringIfNull0.solve(var_task_package,var_literal0);&#xA;&#x9;setDefaultStringIfNull1.solve(var_exprKeyName_identifier,var_literal1);&#xA;&#x9;setDefaultStringIfNull2.solve(var_methodEncryption_modifier,var_literal5);&#xA;&#x9;setDefaultStringIfNull3.solve(var_methodPerformEncryption_modifier,var_literal9);&#xA;&#x9;setDefaultStringIfNull4.solve(var_exprKeyName_index,var_literal2);&#xA;&#x9;setDefaultStringIfNull5.solve(var_methodEncryption_index,var_literal2);&#xA;&#x9;setDefaultStringIfNull6.solve(var_methodEncryption_type,var_literal3);&#xA;&#x9;setDefaultStringIfNull7.solve(var_methodPerformEncryption_throws,var_literal4);&#xA;&#x9;setDefaultStringIfNull8.solve(var_jcu_name,var_literal7);&#xA;&#x9;setDefaultStringIfNull9.solve(var_exprDataName_identifier,var_literal6);&#xA;&#x9;setDefaultStringIfNull10.solve(var_methodEncryption_throws,var_literal4);&#xA;&#x9;setDefaultStringIfNull11.solve(var_methodPerformEncryption_body,var_literal12);&#xA;&#x9;setDefaultStringIfNull12.solve(var_methodPerformEncryption_index,var_literal10);&#xA;&#x9;setDefaultStringIfNull13.solve(var_methodPerformEncryption_parameters,var_literal8);&#xA;&#x9;setDefaultStringIfNull14.solve(var_exprDataName_index,var_literal10);&#xA;&#x9;setDefaultStringIfNull15.solve(var_exprNameModePadding_index,var_literal11);&#xA;&#x9;setDefaultStringIfNull16.solve(var_methodEncryption_name,var_literal13);&#xA;&#x9;eq17.solve(var_task_package,var_javaPackage_name);&#xA;&#x9;nameModePadding18.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;exprKeyName&quot;, &quot;identifier&quot;, var_exprKeyName_identifier.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodEncryption&quot;, &quot;modifier&quot;, var_methodEncryption_modifier.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;modifier&quot;, var_methodPerformEncryption_modifier.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprKeyName&quot;, &quot;index&quot;, var_exprKeyName_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodEncryption&quot;, &quot;index&quot;, var_methodEncryption_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodEncryption&quot;, &quot;type&quot;, var_methodEncryption_type.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;throws&quot;, var_methodPerformEncryption_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;jcu&quot;, &quot;name&quot;, var_jcu_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprDataName&quot;, &quot;identifier&quot;, var_exprDataName_identifier.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodEncryption&quot;, &quot;throws&quot;, var_methodEncryption_throws.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;body&quot;, var_methodPerformEncryption_body.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;index&quot;, var_methodPerformEncryption_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodPerformEncryption&quot;, &quot;parameters&quot;, var_methodPerformEncryption_parameters.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprDataName&quot;, &quot;index&quot;, var_exprDataName_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprNameModePadding&quot;, &quot;index&quot;, var_exprNameModePadding_index.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;methodEncryption&quot;, &quot;name&quot;, var_methodEncryption_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;javaPackage&quot;, &quot;name&quot;, var_javaPackage_name.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;exprNameModePadding&quot;, &quot;value&quot;, var_exprNameModePadding_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SymmetricEncryptionTask&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;exprRetPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;type&quot;, &quot;byte[]&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;name&quot;, &quot;data&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;dataEncryption&quot;, &quot;index&quot;, 0, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;task&quot;, &quot;description&quot;, &quot;SymmetricEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;statRetPerformEncryption&quot;, &quot;return&quot;, true, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;type&quot;, &quot;SecretKey&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;index&quot;, 1, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;keyEncryption&quot;, &quot;name&quot;, &quot;key&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;type&quot;, &quot;byte[] &quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;if(!__helper.hasExpectedValue(&quot;methodPerformEncryption&quot;, &quot;name&quot;, &quot;performEncryption&quot;, ComparingOperator.EQUAL)) {&#xA;&#x9;ruleResult.setSuccess(false); &#xA;&#x9;return ruleResult;&#xA;}&#xA;&#xA;&#xA;&#xA;Variable var_exprKeyName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName&quot;, true, csp);&#xA;var_exprKeyName_identifier.setValue(__helper.getValue(&quot;exprKeyName&quot;, &quot;identifier&quot;));&#xA;var_exprKeyName_identifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_methodEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_modifier.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;modifier&quot;));&#xA;var_methodEncryption_modifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal0.setValue(&quot;crypto&quot;);&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_modifier.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;modifier&quot;));&#xA;var_methodPerformEncryption_modifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprKeyName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName&quot;, true, csp);&#xA;var_exprKeyName_index.setValue(__helper.getValue(&quot;exprKeyName&quot;, &quot;index&quot;));&#xA;var_exprKeyName_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal1.setValue(&quot;key&quot;);&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal2.setValue(1);&#xA;var_literal2.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal3.setValue(&quot;byte[] &quot;);&#xA;var_literal3.setType(&quot;&quot;);&#xA;&#xA;Variable var_exprDataName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName&quot;, true, csp);&#xA;var_exprDataName_identifier.setValue(__helper.getValue(&quot;exprDataName&quot;, &quot;identifier&quot;));&#xA;var_exprDataName_identifier.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xA;var_task_package.setValue(__helper.getValue(&quot;task&quot;, &quot;package&quot;));&#xA;var_task_package.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal4.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;var_literal4.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;throws&quot;));&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jcu&quot;, true, csp);&#xA;var_jcu_name.setValue(__helper.getValue(&quot;jcu&quot;, &quot;name&quot;));&#xA;var_jcu_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal5.setValue(&quot;public&quot;);&#xA;var_literal5.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;index&quot;));&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_methodEncryption_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_type.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;type&quot;));&#xA;var_methodEncryption_type.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal6.setValue(&quot;data&quot;);&#xA;var_literal6.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal7.setValue(&quot;Enc&quot;);&#xA;var_literal7.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;index&quot;));&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal8.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;var_literal8.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;parameters&quot;));&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal9.setValue(&quot;private&quot;);&#xA;var_literal9.setType(&quot;&quot;);&#xA;&#xA;Variable var_literal10 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal10.setValue(0);&#xA;var_literal10.setType(&quot;&quot;);&#xA;&#xA;Variable var_exprDataName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName&quot;, true, csp);&#xA;var_exprDataName_index.setValue(__helper.getValue(&quot;exprDataName&quot;, &quot;index&quot;));&#xA;var_exprDataName_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_literal11 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal11.setValue(2);&#xA;var_literal11.setType(&quot;&quot;);&#xA;&#xA;Variable var_exprNameModePadding_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding&quot;, true, csp);&#xA;var_exprNameModePadding_index.setValue(__helper.getValue(&quot;exprNameModePadding&quot;, &quot;index&quot;));&#xA;var_exprNameModePadding_index.setType(&quot;int&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;throws&quot;));&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal12 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal12.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;var_literal12.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodEncryption_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption&quot;, true, csp);&#xA;var_methodEncryption_name.setValue(__helper.getValue(&quot;methodEncryption&quot;, &quot;name&quot;));&#xA;var_methodEncryption_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal13 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xA;var_literal13.setValue(&quot;encrypt&quot;);&#xA;var_literal13.setType(&quot;&quot;);&#xA;&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(__helper.getValue(&quot;methodPerformEncryption&quot;, &quot;body&quot;));&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage&quot;, true, csp);&#xA;var_javaPackage_name.setValue(__helper.getValue(&quot;javaPackage&quot;, &quot;name&quot;));&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(__helper.getValue(&quot;exprNameModePadding&quot;, &quot;value&quot;));&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_mode.setValue(__helper.getValue(&quot;sbc&quot;, &quot;mode&quot;));&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_padding.setValue(__helper.getValue(&quot;sbc&quot;, &quot;padding&quot;));&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc&quot;, true, csp);&#xA;var_sbc_name.setValue(__helper.getValue(&quot;sbc&quot;, &quot;name&quot;));&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull0 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull0);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull1 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull1);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull2 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull2);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull3 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull3);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull4 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull4);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull5 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull5);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull6 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull6);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull7 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull7);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull8 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull8);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull9 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull9);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull10 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull10);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull11 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull11);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull12 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull12);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull13 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull13);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull14 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull14);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull15 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull15);&#xA;&#xA;SetDefaultStringIfNull setDefaultStringIfNull16 = new SetDefaultStringIfNull();&#xA;csp.getConstraints().add(setDefaultStringIfNull16);&#xA;&#xA;Eq eq17 = new Eq();&#xA;csp.getConstraints().add(eq17);&#xA;&#xA;NameModePadding nameModePadding18 = new NameModePadding();&#xA;csp.getConstraints().add(nameModePadding18);&#xA;&#xA;setDefaultStringIfNull0.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull0.solve(var_exprKeyName_identifier,var_literal1);&#xA;&#xA;setDefaultStringIfNull1.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull1.solve(var_methodEncryption_modifier,var_literal5);&#xA;&#xA;setDefaultStringIfNull2.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull2.solve(var_methodPerformEncryption_modifier,var_literal9);&#xA;&#xA;setDefaultStringIfNull3.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull3.solve(var_exprKeyName_index,var_literal2);&#xA;&#xA;setDefaultStringIfNull4.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull4.solve(var_methodEncryption_index,var_literal2);&#xA;&#xA;setDefaultStringIfNull5.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull5.solve(var_methodEncryption_type,var_literal3);&#xA;&#xA;setDefaultStringIfNull6.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull6.solve(var_methodPerformEncryption_throws,var_literal4);&#xA;&#xA;setDefaultStringIfNull7.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull7.solve(var_jcu_name,var_literal7);&#xA;&#xA;setDefaultStringIfNull8.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull8.solve(var_exprDataName_identifier,var_literal6);&#xA;&#xA;setDefaultStringIfNull9.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull9.solve(var_methodEncryption_throws,var_literal4);&#xA;&#xA;setDefaultStringIfNull10.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull10.solve(var_methodPerformEncryption_body,var_literal12);&#xA;&#xA;setDefaultStringIfNull11.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull11.solve(var_methodPerformEncryption_index,var_literal10);&#xA;&#xA;setDefaultStringIfNull12.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull12.solve(var_methodPerformEncryption_parameters,var_literal8);&#xA;&#xA;setDefaultStringIfNull13.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull13.solve(var_exprDataName_index,var_literal10);&#xA;&#xA;setDefaultStringIfNull14.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull14.solve(var_exprNameModePadding_index,var_literal11);&#xA;&#xA;setDefaultStringIfNull15.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull15.solve(var_methodEncryption_name,var_literal13);&#xA;&#xA;setDefaultStringIfNull16.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;setDefaultStringIfNull16.solve(var_task_package,var_literal0);&#xA;&#xA;eq17.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;eq17.solve(var_task_package,var_javaPackage_name);&#xA;&#xA;nameModePadding18.setRuleName(&quot;SymmetricEncryptionTask&quot;);&#xA;nameModePadding18.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_task_package.setBound(false);&#xA;&#x9;var_task_package.setBound(false);&#xA;&#x9;var_sbc_mode.setBound(false);&#xA;&#x9;var_sbc_padding.setBound(false);&#xA;&#x9;var_sbc_name.setBound(false);&#xA;&#x9;setDefaultStringIfNull0.solve(var_exprKeyName_identifier,var_literal1);&#xA;&#x9;setDefaultStringIfNull1.solve(var_methodEncryption_modifier,var_literal5);&#xA;&#x9;setDefaultStringIfNull2.solve(var_methodPerformEncryption_modifier,var_literal9);&#xA;&#x9;setDefaultStringIfNull3.solve(var_exprKeyName_index,var_literal2);&#xA;&#x9;setDefaultStringIfNull4.solve(var_methodEncryption_index,var_literal2);&#xA;&#x9;setDefaultStringIfNull5.solve(var_methodEncryption_type,var_literal3);&#xA;&#x9;setDefaultStringIfNull6.solve(var_methodPerformEncryption_throws,var_literal4);&#xA;&#x9;setDefaultStringIfNull7.solve(var_jcu_name,var_literal7);&#xA;&#x9;setDefaultStringIfNull8.solve(var_exprDataName_identifier,var_literal6);&#xA;&#x9;setDefaultStringIfNull9.solve(var_methodEncryption_throws,var_literal4);&#xA;&#x9;setDefaultStringIfNull10.solve(var_methodPerformEncryption_body,var_literal12);&#xA;&#x9;setDefaultStringIfNull11.solve(var_methodPerformEncryption_index,var_literal10);&#xA;&#x9;setDefaultStringIfNull12.solve(var_methodPerformEncryption_parameters,var_literal8);&#xA;&#x9;setDefaultStringIfNull13.solve(var_exprDataName_index,var_literal10);&#xA;&#x9;setDefaultStringIfNull14.solve(var_exprNameModePadding_index,var_literal11);&#xA;&#x9;setDefaultStringIfNull15.solve(var_methodEncryption_name,var_literal13);&#xA;&#x9;setDefaultStringIfNull16.solve(var_task_package,var_literal0);&#xA;&#x9;eq17.solve(var_task_package,var_javaPackage_name);&#xA;&#x9;nameModePadding18.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;task&quot;, &quot;package&quot;, var_task_package.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;task&quot;, &quot;package&quot;, var_task_package.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;sbc&quot;, &quot;mode&quot;, var_sbc_mode.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;sbc&quot;, &quot;padding&quot;, var_sbc_padding.getValue());&#xA;&#x9;&#x9;__helper.setValue(&quot;sbc&quot;, &quot;name&quot;, var_sbc_name.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreParameterRule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreParameterRule&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;KeyDerivationAlgorithmImportToImport&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp&quot;, true, csp);&#xA;var_imp_value.setValue(__helper.getValue(&quot;imp&quot;, &quot;value&quot;));&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp&quot;, true, csp);&#xA;var_jimp_value.setValue(__helper.getValue(&quot;jimp&quot;, &quot;value&quot;));&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;KeyDerivationAlgorithmImportToImport&quot;);&#xA;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jimp_value.setBound(false);&#xA;&#x9;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jimp&quot;, &quot;value&quot;, var_jimp_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;KeyDerivationAlgorithmImportToImport&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp&quot;, true, csp);&#xA;var_imp_value.setValue(__helper.getValue(&quot;imp&quot;, &quot;value&quot;));&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp&quot;, true, csp);&#xA;var_jimp_value.setValue(__helper.getValue(&quot;jimp&quot;, &quot;value&quot;));&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;KeyDerivationAlgorithmImportToImport&quot;);&#xA;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_imp_value.setBound(false);&#xA;&#x9;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;imp&quot;, &quot;value&quot;, var_imp_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SymmetricBlockCipherImportToImport&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp&quot;, true, csp);&#xA;var_jimp_value.setValue(__helper.getValue(&quot;jimp&quot;, &quot;value&quot;));&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp&quot;, true, csp);&#xA;var_imp_value.setValue(__helper.getValue(&quot;imp&quot;, &quot;value&quot;));&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SymmetricBlockCipherImportToImport&quot;);&#xA;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_jimp_value.setBound(false);&#xA;&#x9;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;jimp&quot;, &quot;value&quot;, var_jimp_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;SymmetricBlockCipherImportToImport&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp&quot;, true, csp);&#xA;var_jimp_value.setValue(__helper.getValue(&quot;jimp&quot;, &quot;value&quot;));&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp&quot;, true, csp);&#xA;var_imp_value.setValue(__helper.getValue(&quot;imp&quot;, &quot;value&quot;));&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SymmetricBlockCipherImportToImport&quot;);&#xA;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;var_imp_value.setBound(false);&#xA;&#x9;eq0.solve(var_imp_value,var_jimp_value);&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;&#x9;__helper.setValue(&quot;imp&quot;, &quot;value&quot;, var_imp_value.getValue());&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreOpaqueMethod&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xA;ruleResult.setRule(&quot;IgnoreOpaqueMethod&quot;);&#x9;&#xA;ruleResult.setSuccess(true);&#xA;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xA;&#x9;ruleResult.setSuccess(true);&#xA;} else {&#xA;&#x9;if(csp.check()){ &#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xA;&#x9;} else {&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xA;&#x9;&#x9;return ruleResult;&#xA;&#x9;}&#x9;&#x9;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(0);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(1);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;Enc&quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(methodEncryption.getThrows());&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(methodPerformEncryption.getParameters());&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(methodPerformEncryption.getThrows());&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(methodPerformGetKey.getThrows());&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(methodPerformGetKey.getIndex());&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(methodEncryption.getIndex());&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbcJcu.name&quot;, true, csp);&#xA;var_sbcJcu_name.setValue(sbcJcu.getName());&#xA;var_sbcJcu_name.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(methodPerformGetKey.getBody());&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(methodGetKey.getIndex());&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(methodGetKey.getThrows());&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(methodPerformEncryption.getIndex());&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(methodPerformEncryption.getBody());&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(exprAlgNameLiteral.getValue());&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, true, csp);&#xA;var_kda_name.setValue(kda.getName());&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(exprIterationLiteral.getValue());&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, true, csp);&#xA;var_kda_iterations.setValue(kda.getIterations());&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, true, csp);&#xA;var_javaPackage_name.setValue(javaPackage.getName());&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(exprOutputSizeLiteral.getValue());&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, true, csp);&#xA;var_kda_outputSize.setValue(kda.getOutputSize());&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, true, csp);&#xA;var_sbc_name.setValue(sbc.getName());&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, true, csp);&#xA;var_sbc_mode.setValue(sbc.getMode());&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, true, csp);&#xA;var_sbc_padding.setValue(sbc.getPadding());&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(exprNameModePadding.getValue());&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;csp.getConstraints().add(nameModePadding);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodEncryption_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodPerformEncryption_parameters,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformEncryption_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_throws,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodPerformGetKey_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodEncryption_index,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_sbcJcu_name,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_methodPerformGetKey_body,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_methodGetKey_index,literal4);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_methodGetKey_throws,literal2);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodPerformEncryption_index,literal3);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_body,literal7);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_task_package,var_javaPackage_name);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformGetKey_parameters,literal8);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(1);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(0);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal4.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, true, csp);&#xA;var_methodGetKey_throws.setValue(methodGetKey.getThrows());&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, true, csp);&#xA;var_methodGetKey_index.setValue(methodGetKey.getIndex());&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, true, csp);&#xA;var_methodPerformGetKey_throws.setValue(methodPerformGetKey.getThrows());&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, true, csp);&#xA;var_methodPerformGetKey_body.setValue(methodPerformGetKey.getBody());&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, true, csp);&#xA;var_methodPerformGetKey_index.setValue(methodPerformGetKey.getIndex());&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, true, csp);&#xA;var_exprOutputSizeLiteral_value.setValue(exprOutputSizeLiteral.getValue());&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, true, csp);&#xA;var_kda_outputSize.setValue(kda.getOutputSize());&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, true, csp);&#xA;var_javaPackage_name.setValue(javaPackage.getName());&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, true, csp);&#xA;var_exprAlgNameLiteral_value.setValue(exprAlgNameLiteral.getValue());&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, true, csp);&#xA;var_kda_name.setValue(kda.getName());&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, true, csp);&#xA;var_exprIterationLiteral_value.setValue(exprIterationLiteral.getValue());&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, true, csp);&#xA;var_kda_iterations.setValue(kda.getIterations());&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodGetKey_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodGetKey_index,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformGetKey_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_body,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodPerformGetKey_index,literal3);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_task_package,var_javaPackage_name);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodPerformGetKey_parameters,literal4);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, true, csp);&#xA;var_methodPerformGetKey_parameters.setValue(methodPerformGetKey.getParameters());&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodPerformGetKey_parameters,literal0);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;key&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;public&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;private&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(1);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(&quot;byte[] &quot;);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;Enc&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;data&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;Variable literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal9&quot;, true, csp);&#xA;literal9.setValue(0);&#xA;literal9.setType(&quot;&quot;);&#xA;Variable literal10 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal10&quot;, true, csp);&#xA;literal10.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal10.setType(&quot;&quot;);&#xA;Variable literal11 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal11&quot;, true, csp);&#xA;literal11.setValue(2);&#xA;literal11.setType(&quot;&quot;);&#xA;Variable literal12 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal12&quot;, true, csp);&#xA;literal12.setValue(&quot;encrypt&quot;);&#xA;literal12.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;Variable var_exprKeyName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.identifier&quot;, true, csp);&#xA;var_exprKeyName_identifier.setValue(exprKeyName.getIdentifier());&#xA;var_exprKeyName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.modifier&quot;, true, csp);&#xA;var_methodEncryption_modifier.setValue(methodEncryption.getModifier());&#xA;var_methodEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.modifier&quot;, true, csp);&#xA;var_methodPerformEncryption_modifier.setValue(methodPerformEncryption.getModifier());&#xA;var_methodPerformEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_exprKeyName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.index&quot;, true, csp);&#xA;var_exprKeyName_index.setValue(exprKeyName.getIndex());&#xA;var_exprKeyName_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, true, csp);&#xA;var_methodEncryption_index.setValue(methodEncryption.getIndex());&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.type&quot;, true, csp);&#xA;var_methodEncryption_type.setValue(methodEncryption.getType());&#xA;var_methodEncryption_type.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, true, csp);&#xA;var_methodPerformEncryption_throws.setValue(methodPerformEncryption.getThrows());&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_jcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jcu.name&quot;, true, csp);&#xA;var_jcu_name.setValue(jcu.getName());&#xA;var_jcu_name.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.identifier&quot;, true, csp);&#xA;var_exprDataName_identifier.setValue(exprDataName.getIdentifier());&#xA;var_exprDataName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, true, csp);&#xA;var_methodEncryption_throws.setValue(methodEncryption.getThrows());&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, true, csp);&#xA;var_methodPerformEncryption_body.setValue(methodPerformEncryption.getBody());&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, true, csp);&#xA;var_methodPerformEncryption_index.setValue(methodPerformEncryption.getIndex());&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, true, csp);&#xA;var_methodPerformEncryption_parameters.setValue(methodPerformEncryption.getParameters());&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.index&quot;, true, csp);&#xA;var_exprDataName_index.setValue(exprDataName.getIndex());&#xA;var_exprDataName_index.setType(&quot;int&quot;);&#xA;Variable var_exprNameModePadding_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.index&quot;, true, csp);&#xA;var_exprNameModePadding_index.setValue(exprNameModePadding.getIndex());&#xA;var_exprNameModePadding_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.name&quot;, true, csp);&#xA;var_methodEncryption_name.setValue(methodEncryption.getName());&#xA;var_methodEncryption_name.setType(&quot;String&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, true, csp);&#xA;var_task_package.setValue(task.getPackage());&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, true, csp);&#xA;var_javaPackage_name.setValue(javaPackage.getName());&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, true, csp);&#xA;var_sbc_name.setValue(sbc.getName());&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, true, csp);&#xA;var_sbc_mode.setValue(sbc.getMode());&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, true, csp);&#xA;var_sbc_padding.setValue(sbc.getPadding());&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, true, csp);&#xA;var_exprNameModePadding_value.setValue(exprNameModePadding.getValue());&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_12 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_13 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_14 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;csp.getConstraints().add(setDefaultStringIfNull_12);&#xA;csp.getConstraints().add(setDefaultStringIfNull_13);&#xA;csp.getConstraints().add(setDefaultStringIfNull_14);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nameModePadding);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_exprKeyName_identifier,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodEncryption_modifier,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformEncryption_modifier,literal2);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_exprKeyName_index,literal3);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodEncryption_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodEncryption_type,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_methodPerformEncryption_throws,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_jcu_name,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_exprDataName_identifier,literal7);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_methodEncryption_throws,literal5);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodPerformEncryption_body,literal8);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_index,literal9);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformEncryption_parameters,literal10);&#xA;setDefaultStringIfNull_12.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_12.solve(var_exprDataName_index,literal9);&#xA;setDefaultStringIfNull_13.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_13.solve(var_exprNameModePadding_index,literal11);&#xA;setDefaultStringIfNull_14.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_14.solve(var_methodEncryption_name,literal12);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, true, csp);&#xA;var_imp_value.setValue(imp.getValue());&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, true, csp);&#xA;var_jimp_value.setValue(jimp.getValue());&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, true, csp);&#xA;var_imp_value.setValue(imp.getValue());&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, true, csp);&#xA;var_jimp_value.setValue(jimp.getValue());&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(&quot;Crypto&quot;);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(0);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(1);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;Enc&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;Variable literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal9&quot;, true, csp);&#xA;literal9.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal9.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, csp);&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, csp);&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, csp);&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, csp);&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, csp);&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, csp);&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, csp);&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_sbcJcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbcJcu.name&quot;, csp);&#xA;var_sbcJcu_name.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, csp);&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, csp);&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, csp);&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, csp);&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, csp);&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, csp);&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, csp);&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, csp);&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, csp);&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, csp);&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, csp);&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, csp);&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, csp);&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, csp);&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, csp);&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, csp);&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, csp);&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_12 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;csp.getConstraints().add(setDefaultStringIfNull_12);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(nameModePadding);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodEncryption_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodPerformEncryption_parameters,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformEncryption_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_throws,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_task_package,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodPerformGetKey_index,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_methodEncryption_index,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_sbcJcu_name,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_methodPerformGetKey_body,literal7);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_methodGetKey_index,literal5);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodGetKey_throws,literal2);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_index,literal4);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformEncryption_body,literal8);&#xA;setDefaultStringIfNull_12.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_12.solve(var_methodPerformGetKey_parameters,literal9);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PasswordBasedEncryption/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;NoSuchAlgorithmException, InvalidKeySpecException&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(1);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\&quot;AES\&quot;);\n}\n&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(0);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(&quot;Crypto&quot;);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_methodGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.throws&quot;, csp);&#xA;var_methodGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodGetKey.index&quot;, csp);&#xA;var_methodGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformGetKey_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.throws&quot;, csp);&#xA;var_methodPerformGetKey_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.body&quot;, csp);&#xA;var_methodPerformGetKey_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.index&quot;, csp);&#xA;var_methodPerformGetKey_index.setType(&quot;int&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, csp);&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_exprOutputSizeLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprOutputSizeLiteral.value&quot;, csp);&#xA;var_exprOutputSizeLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_outputSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.outputSize&quot;, csp);&#xA;var_kda_outputSize.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, csp);&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_exprAlgNameLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprAlgNameLiteral.value&quot;, csp);&#xA;var_exprAlgNameLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.name&quot;, csp);&#xA;var_kda_name.setType(&quot;String&quot;);&#xA;Variable var_exprIterationLiteral_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprIterationLiteral.value&quot;, csp);&#xA;var_exprIterationLiteral_value.setType(&quot;String&quot;);&#xA;Variable var_kda_iterations = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kda.iterations&quot;, csp);&#xA;var_kda_iterations.setType(&quot;String&quot;);&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, csp);&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;Eq eq_0 = new Eq();&#xA;Eq eq_1 = new Eq();&#xA;Eq eq_2 = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(eq_0);&#xA;csp.getConstraints().add(eq_1);&#xA;csp.getConstraints().add(eq_2);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodGetKey_throws,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodGetKey_index,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_methodPerformGetKey_throws,literal0);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformGetKey_body,literal2);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_methodPerformGetKey_index,literal3);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_task_package,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_methodPerformGetKey_parameters,literal5);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;eq_0.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_0.solve(var_exprOutputSizeLiteral_value,var_kda_outputSize);&#xA;eq_1.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_1.solve(var_exprAlgNameLiteral_value,var_kda_name);&#xA;eq_2.setRuleName(&quot;NoRuleName&quot;);&#xA;eq_2.solve(var_exprIterationLiteral_value,var_kda_iterations);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SecurePasswordTask/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;char [] pwd,String algName,int iterations,int outputSize&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_methodPerformGetKey_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformGetKey.parameters&quot;, csp);&#xA;var_methodPerformGetKey_parameters.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_methodPerformGetKey_parameters,literal0);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/PerformGetKeyMethod/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jmi&quot;,jmi);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreMethodInvocationArgument/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xA;literal0.setValue(&quot;key&quot;);&#xA;literal0.setType(&quot;&quot;);&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xA;literal1.setValue(&quot;public&quot;);&#xA;literal1.setType(&quot;&quot;);&#xA;Variable literal2 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal2&quot;, true, csp);&#xA;literal2.setValue(&quot;crypto&quot;);&#xA;literal2.setType(&quot;&quot;);&#xA;Variable literal3 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal3&quot;, true, csp);&#xA;literal3.setValue(&quot;private&quot;);&#xA;literal3.setType(&quot;&quot;);&#xA;Variable literal4 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal4&quot;, true, csp);&#xA;literal4.setValue(1);&#xA;literal4.setType(&quot;&quot;);&#xA;Variable literal5 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal5&quot;, true, csp);&#xA;literal5.setValue(&quot;byte[] &quot;);&#xA;literal5.setType(&quot;&quot;);&#xA;Variable literal6 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal6&quot;, true, csp);&#xA;literal6.setValue(&quot;InvalidKeyException,NoSuchAlgorithmException,NoSuchPaddingException,IllegalBlockSizeException,BadPaddingException,InvalidAlgorithmParameterException&quot;);&#xA;literal6.setType(&quot;&quot;);&#xA;Variable literal7 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal7&quot;, true, csp);&#xA;literal7.setValue(&quot;Enc&quot;);&#xA;literal7.setType(&quot;&quot;);&#xA;Variable literal8 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal8&quot;, true, csp);&#xA;literal8.setValue(&quot;data&quot;);&#xA;literal8.setType(&quot;&quot;);&#xA;Variable literal9 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal9&quot;, true, csp);&#xA;literal9.setValue(&quot;{\n  byte[] ivb=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(ivb);\n  IvParameterSpec iv=new IvParameterSpec(ivb);\n  Cipher c=Cipher.getInstance(encryptPassingArgument);\n  c.init(Cipher.ENCRYPT_MODE,key,iv);\n  byte[] res=c.doFinal(data);\n  byte[] ret=new byte[res.length + ivb.length];\n  System.arraycopy(ivb,0,ret,0,ivb.length);\n  System.arraycopy(res,0,ret,ivb.length,ret.length);\n  return ret;\n}\n&quot;);&#xA;literal9.setType(&quot;&quot;);&#xA;Variable literal10 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal10&quot;, true, csp);&#xA;literal10.setValue(0);&#xA;literal10.setType(&quot;&quot;);&#xA;Variable literal11 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal11&quot;, true, csp);&#xA;literal11.setValue(&quot;byte[] data,SecretKey key,String encryptPassingArgument&quot;);&#xA;literal11.setType(&quot;&quot;);&#xA;Variable literal12 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal12&quot;, true, csp);&#xA;literal12.setValue(2);&#xA;literal12.setType(&quot;&quot;);&#xA;Variable literal13 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal13&quot;, true, csp);&#xA;literal13.setValue(&quot;encrypt&quot;);&#xA;literal13.setType(&quot;&quot;);&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_exprKeyName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.identifier&quot;, csp);&#xA;var_exprKeyName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.modifier&quot;, csp);&#xA;var_methodEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_task_package = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.package&quot;, csp);&#xA;var_task_package.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_modifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.modifier&quot;, csp);&#xA;var_methodPerformEncryption_modifier.setType(&quot;String&quot;);&#xA;Variable var_exprKeyName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprKeyName.index&quot;, csp);&#xA;var_exprKeyName_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.index&quot;, csp);&#xA;var_methodEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.type&quot;, csp);&#xA;var_methodEncryption_type.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.throws&quot;, csp);&#xA;var_methodPerformEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_jcu_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jcu.name&quot;, csp);&#xA;var_jcu_name.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_identifier = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.identifier&quot;, csp);&#xA;var_exprDataName_identifier.setType(&quot;String&quot;);&#xA;Variable var_methodEncryption_throws = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.throws&quot;, csp);&#xA;var_methodEncryption_throws.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_body = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.body&quot;, csp);&#xA;var_methodPerformEncryption_body.setType(&quot;String&quot;);&#xA;Variable var_methodPerformEncryption_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.index&quot;, csp);&#xA;var_methodPerformEncryption_index.setType(&quot;int&quot;);&#xA;Variable var_methodPerformEncryption_parameters = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodPerformEncryption.parameters&quot;, csp);&#xA;var_methodPerformEncryption_parameters.setType(&quot;String&quot;);&#xA;Variable var_exprDataName_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprDataName.index&quot;, csp);&#xA;var_exprDataName_index.setType(&quot;int&quot;);&#xA;Variable var_exprNameModePadding_index = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.index&quot;, csp);&#xA;var_exprNameModePadding_index.setType(&quot;int&quot;);&#xA;Variable var_methodEncryption_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;methodEncryption.name&quot;, csp);&#xA;var_methodEncryption_name.setType(&quot;String&quot;);&#xA;Variable var_javaPackage_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;javaPackage.name&quot;, csp);&#xA;var_javaPackage_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.name&quot;, csp);&#xA;var_sbc_name.setType(&quot;String&quot;);&#xA;Variable var_sbc_mode = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.mode&quot;, csp);&#xA;var_sbc_mode.setType(&quot;String&quot;);&#xA;Variable var_sbc_padding = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sbc.padding&quot;, csp);&#xA;var_sbc_padding.setType(&quot;String&quot;);&#xA;Variable var_exprNameModePadding_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exprNameModePadding.value&quot;, csp);&#xA;var_exprNameModePadding_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;SetDefaultStringIfNull setDefaultStringIfNull = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_0 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_1 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_2 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_3 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_4 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_5 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_6 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_7 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_8 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_9 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_10 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_11 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_12 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_13 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_14 = new SetDefaultStringIfNull();&#xA;SetDefaultStringIfNull setDefaultStringIfNull_15 = new SetDefaultStringIfNull();&#xA;Eq eq = new Eq();&#xA;NameModePadding nameModePadding = new NameModePadding();&#xA;&#xA;&#xA;csp.getConstraints().add(setDefaultStringIfNull);&#xA;csp.getConstraints().add(setDefaultStringIfNull_0);&#xA;csp.getConstraints().add(setDefaultStringIfNull_1);&#xA;csp.getConstraints().add(setDefaultStringIfNull_2);&#xA;csp.getConstraints().add(setDefaultStringIfNull_3);&#xA;csp.getConstraints().add(setDefaultStringIfNull_4);&#xA;csp.getConstraints().add(setDefaultStringIfNull_5);&#xA;csp.getConstraints().add(setDefaultStringIfNull_6);&#xA;csp.getConstraints().add(setDefaultStringIfNull_7);&#xA;csp.getConstraints().add(setDefaultStringIfNull_8);&#xA;csp.getConstraints().add(setDefaultStringIfNull_9);&#xA;csp.getConstraints().add(setDefaultStringIfNull_10);&#xA;csp.getConstraints().add(setDefaultStringIfNull_11);&#xA;csp.getConstraints().add(setDefaultStringIfNull_12);&#xA;csp.getConstraints().add(setDefaultStringIfNull_13);&#xA;csp.getConstraints().add(setDefaultStringIfNull_14);&#xA;csp.getConstraints().add(setDefaultStringIfNull_15);&#xA;csp.getConstraints().add(eq);&#xA;csp.getConstraints().add(nameModePadding);&#xA;&#xA;// Solve CSP&#xA;setDefaultStringIfNull.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull.solve(var_exprKeyName_identifier,literal0);&#xA;setDefaultStringIfNull_0.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_0.solve(var_methodEncryption_modifier,literal1);&#xA;setDefaultStringIfNull_1.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_1.solve(var_task_package,literal2);&#xA;setDefaultStringIfNull_2.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_2.solve(var_methodPerformEncryption_modifier,literal3);&#xA;setDefaultStringIfNull_3.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_3.solve(var_exprKeyName_index,literal4);&#xA;setDefaultStringIfNull_4.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_4.solve(var_methodEncryption_index,literal4);&#xA;setDefaultStringIfNull_5.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_5.solve(var_methodEncryption_type,literal5);&#xA;setDefaultStringIfNull_6.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_6.solve(var_methodPerformEncryption_throws,literal6);&#xA;setDefaultStringIfNull_7.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_7.solve(var_jcu_name,literal7);&#xA;setDefaultStringIfNull_8.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_8.solve(var_exprDataName_identifier,literal8);&#xA;setDefaultStringIfNull_9.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_9.solve(var_methodEncryption_throws,literal6);&#xA;setDefaultStringIfNull_10.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_10.solve(var_methodPerformEncryption_body,literal9);&#xA;setDefaultStringIfNull_11.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_11.solve(var_methodPerformEncryption_index,literal10);&#xA;setDefaultStringIfNull_12.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_12.solve(var_methodPerformEncryption_parameters,literal11);&#xA;setDefaultStringIfNull_13.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_13.solve(var_exprDataName_index,literal10);&#xA;setDefaultStringIfNull_14.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_14.solve(var_exprNameModePadding_index,literal12);&#xA;setDefaultStringIfNull_15.setRuleName(&quot;NoRuleName&quot;);&#xA;setDefaultStringIfNull_15.solve(var_methodEncryption_name,literal13);&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_task_package,var_javaPackage_name);&#xA;nameModePadding.setRuleName(&quot;NoRuleName&quot;);&#xA;nameModePadding.solve(var_sbc_name,var_sbc_mode,var_sbc_padding,var_exprNameModePadding_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricEncryptionTask/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jcu&quot;,jcu);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreParameterRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, csp);&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, csp);&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;ac&quot;,ac);&#xA;isApplicableMatch.registerObject(&quot;alg&quot;,alg);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/KeyDerivationAlgorithmImportToImport/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;Variable var_imp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;imp.value&quot;, csp);&#xA;var_imp_value.setType(&quot;String&quot;);&#xA;Variable var_jimp_value = CSPFactoryHelper.eINSTANCE.createVariable(&quot;jimp.value&quot;, csp);&#xA;var_jimp_value.setType(&quot;String&quot;);&#xA;&#xA;// Create constraints&#xA;Eq eq = new Eq();&#xA;&#xA;&#xA;csp.getConstraints().add(eq);&#xA;&#xA;// Solve CSP&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xA;eq.solve(var_imp_value,var_jimp_value);&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;alg&quot;,alg);&#xA;isApplicableMatch.registerObject(&quot;cu&quot;,cu);&#xA;isApplicableMatch.registerObject(&quot;ac&quot;,ac);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/SymmetricBlockCipherImportToImport/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xA;&#xA;// Create literals&#xA;&#xA;// Create attribute variables&#xA;&#xA;// Create unbound variables&#xA;&#xA;// Create constraints&#xA;&#xA;&#xA;&#xA;&#xA;// Solve CSP&#xA;&#xA;// Snapshot pattern match on which CSP is solved&#xA;isApplicableMatch.registerObject(&quot;jcu&quot;,jcu);&#xA;return csp;">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/CryptoConfigToJava/model/CryptoConfigToJava.ecore#//Rules/IgnoreOpaqueMethod/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
