#using CryptoConfigToJava.*
#using AttrCondDefLibrary.*

#rule SecurePasswordTask #extends PerformGetKeyMethod #with CryptoConfigToJava

#source { 
	++task:Task{
		description := "SecurePassword"
		++ -algorithms->kda
	}
	++kda:KeyDerivationAlgorithm
}

#target {
	++javaPackage:JavaPackage{
		++ -cunits->jcu
	}
	++jcu:JavaCompilationUnit{
		name:="KeyDeriv"
		++ -methods->methodPerformGetKey
		++ -methods->methodGetKey
	}
	++methodGetKey:JavaWorkflowMethod{
		name:="getKey"
		modifier:="public"
		type:="SecretKey "		
		++ -params->pwdDeclaration
		++ -statements -> statRetGetKey
	}
	++pwdDeclaration:JavaVariableDeclaration{
		name:="pwd"
		type:="char[]"
		index:= 0
	}
	
	++statRetGetKey:JavaStatement{
		return:=true
		++ -expr -> exprRetGetKey
	}
	++exprRetGetKey:JavaMethodInvocation{
		name:="performGetKey"
		++ -arguments -> exprPwdName
		++ -arguments -> exprIterationLiteral
		++ -arguments -> exprOutputSizeLiteral
		++ -arguments -> exprAlgNameLiteral
	}
	++exprPwdName:JavaName{
		identifier:="pwd"
		index := 0
	}
	++exprAlgNameLiteral:JavaLiteral{
		index := 1
	}
	++exprIterationLiteral:JavaLiteral{
		index := 2
	}
	
	++exprOutputSizeLiteral:JavaLiteral{
		index := 3
	}
	
	

	
	++methodPerformGetKey:JavaOpaqueMethod
}

#correspondence {
	++ t2c:TaskToJavaPackage{
		#src->task
		#trg->javaPackage
	}
	++ tc:KeyDerivationAlgorithmToJcu{
		#src->kda
		#trg->jcu
	}
}

#attributeConditions {
	setDefaultStringIfNull(task.package, "Crypto")
	eq(exprIterationLiteral.value, kda.iterations)
	eq(exprOutputSizeLiteral.value, kda.outputSize)
	eq(exprAlgNameLiteral.value, kda.name)
	
	eq(task.package, javaPackage.name)
	setDefaultStringIfNull(methodPerformGetKey.index, 0)
	setDefaultStringIfNull(methodGetKey.index, 1)
	setDefaultStringIfNull(methodPerformGetKey.body, "{\n  byte[] salt=new byte[16];\n  SecureRandom.getInstanceStrong().nextBytes(salt);\n  PBEKeySpec spec=new PBEKeySpec(pwd,salt,iterations,outputSize);\n  SecretKeyFactory skf=SecretKeyFactory.getInstance(algName);\n  return new SecretKeySpec(skf.generateSecret(spec).getEncoded(),\"AES\");\n}\n")
	setDefaultStringIfNull(methodPerformGetKey.throws,"NoSuchAlgorithmException, InvalidKeySpecException")
	setDefaultStringIfNull(methodGetKey.throws,"NoSuchAlgorithmException, InvalidKeySpecException")
}
