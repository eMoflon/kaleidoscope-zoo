<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="KitchenToGridLanguage.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="KitchenToGridLanguage.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="KitchenToGridLanguage.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="KitchenToGridLanguage.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="KitchenToGridLanguage.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="KitchenToGridLanguage.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.csp.constraints.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table"/>
  </importInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(0);&#xD;&#xA;literal0.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_firstBlock_yIndex,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;match.registerObject(&quot;grid&quot;, grid);&#xA;match.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;match.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, csp);&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, csp);&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;item&quot;, item);&#xA;match.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(0);&#xD;&#xA;literal0.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_firstBlock_yIndex,literal0);&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;item&quot;,item);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;item&quot;).eClass()).equals(&quot;KitchenLanguage.Fridge.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;group&quot;, group);&#xA;match.registerObject(&quot;grid&quot;, grid);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_itemSocket_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;itemSocket.id&quot;, csp);&#xD;&#xA;var_itemSocket_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetId setId = new SetId();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setId);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setId.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setId.solve(var_itemSocket_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;isApplicableMatch.registerObject(&quot;kitchenToGrid&quot;,kitchenToGrid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;kitchen&quot;,kitchen);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;ruleresult.registerObject(&quot;kitchenToGrid&quot;, kitchenToGrid);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;kitchen&quot;, kitchen);&#xA;ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;group&quot;).eClass()).equals(&quot;GridLanguage.Group.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_itemSocket_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;itemSocket.id&quot;, true, csp);&#xD;&#xA;var_itemSocket_id.setValue(itemSocket.getId());&#xD;&#xA;var_itemSocket_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetId setId = new SetId();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setId);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setId.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setId.solve(var_itemSocket_id);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;match.registerObject(&quot;kitchen&quot;, kitchen);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;kitchenToGrid&quot;,kitchenToGrid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;kitchen&quot;,kitchen);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;ruleresult.registerObject(&quot;kitchenToGrid&quot;, kitchenToGrid);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;kitchen&quot;, kitchen);&#xA;ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;itemSocket&quot;).eClass()).equals(&quot;KitchenLanguage.ItemSocket.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(100);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetDefaultNumber setDefaultNumber = new SetDefaultNumber();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setDefaultNumber);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setDefaultNumber.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber.solve(var_grid_blockSize,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;grid&quot;, grid);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(500);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_kitchen_xSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen.xSize&quot;, csp);&#xD;&#xA;var_kitchen_xSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_kitchen_ySize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen.ySize&quot;, csp);&#xD;&#xA;var_kitchen_ySize.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetDefaultNumber setDefaultNumber = new SetDefaultNumber();&#xD;&#xA;SetDefaultNumber setDefaultNumber_0 = new SetDefaultNumber();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setDefaultNumber);&#xD;&#xA;csp.getConstraints().add(setDefaultNumber_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setDefaultNumber.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber.solve(var_kitchen_xSize,literal0);&#xD;&#xA;setDefaultNumber_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber_0.solve(var_kitchen_ySize,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;kitchenToGrid&quot;, kitchenToGrid);&#xA;ruleresult.registerObject(&quot;kitchen&quot;, kitchen);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;grid&quot;).eClass()).equals(&quot;GridLanguage.Grid.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(500);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_kitchen_xSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen.xSize&quot;, true, csp);&#xD;&#xA;var_kitchen_xSize.setValue(kitchen.getXSize());&#xD;&#xA;var_kitchen_xSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_kitchen_ySize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen.ySize&quot;, true, csp);&#xD;&#xA;var_kitchen_ySize.setValue(kitchen.getYSize());&#xD;&#xA;var_kitchen_ySize.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetDefaultNumber setDefaultNumber = new SetDefaultNumber();&#xD;&#xA;SetDefaultNumber setDefaultNumber_0 = new SetDefaultNumber();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setDefaultNumber);&#xD;&#xA;csp.getConstraints().add(setDefaultNumber_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setDefaultNumber.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber.solve(var_kitchen_xSize,literal0);&#xD;&#xA;setDefaultNumber_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber_0.solve(var_kitchen_ySize,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;kitchen&quot;, kitchen);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(100);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, csp);&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetDefaultNumber setDefaultNumber = new SetDefaultNumber();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setDefaultNumber);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setDefaultNumber.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber.solve(var_grid_blockSize,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;kitchen&quot;,kitchen);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;kitchenToGrid&quot;, kitchenToGrid);&#xA;ruleresult.registerObject(&quot;kitchen&quot;, kitchen);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;kitchen&quot;).eClass()).equals(&quot;KitchenLanguage.Kitchen.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;match.registerObject(&quot;grid&quot;, grid);&#xA;match.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;match.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, csp);&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, csp);&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;item&quot;, item);&#xA;match.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;item&quot;,item);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;item&quot;).eClass()).equals(&quot;KitchenLanguage.Table.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(0);&#xD;&#xA;literal0.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_firstBlock_xIndex,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;match.registerObject(&quot;grid&quot;, grid);&#xA;match.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;match.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, csp);&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, csp);&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;item&quot;, item);&#xA;match.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(0);&#xD;&#xA;literal0.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;eq.solve(var_firstBlock_xIndex,literal0);&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;item&quot;,item);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;item&quot;).eClass()).equals(&quot;KitchenLanguage.Sink.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;match.registerObject(&quot;grid&quot;, grid);&#xA;match.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;match.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, csp);&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, csp);&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;item&quot;, item);&#xA;match.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;socketToGroup&quot;,socketToGroup);&#xD;&#xA;isApplicableMatch.registerObject(&quot;item&quot;,item);&#xD;&#xA;isApplicableMatch.registerObject(&quot;firstBlock&quot;,firstBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;grid&quot;,grid);&#xD;&#xA;isApplicableMatch.registerObject(&quot;itemSocket&quot;,itemSocket);&#xD;&#xA;isApplicableMatch.registerObject(&quot;secondBlock&quot;,secondBlock);&#xD;&#xA;isApplicableMatch.registerObject(&quot;group&quot;,group);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;socketToGroup&quot;, socketToGroup);&#xA;ruleresult.registerObject(&quot;item&quot;, item);&#xA;ruleresult.registerObject(&quot;firstBlock&quot;, firstBlock);&#xA;ruleresult.registerObject(&quot;grid&quot;, grid);&#xA;ruleresult.registerObject(&quot;itemSocket&quot;, itemSocket);&#xA;ruleresult.registerObject(&quot;secondBlock&quot;, secondBlock);&#xA;ruleresult.registerObject(&quot;group&quot;, group);&#xA;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;item&quot;).eClass()).equals(&quot;KitchenLanguage.Table.&quot;);">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_fridge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(0);&#xD;&#xA;var_literal0.setType(&quot;int&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;PosToIndex posToIndex2 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex2);&#xA;&#xA;eq0.setRuleName(&quot;create_a_fridge&quot;);&#xD;&#xA;eq0.solve(var_firstBlock_yIndex,var_literal0);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_fridge&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex2.setRuleName(&quot;create_a_fridge&quot;);&#xD;&#xA;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_item_yPos.setBound(false);&#xD;&#xA;&#x9;var_item_xPos.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_firstBlock_yIndex,var_literal0);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;yPos&quot;, var_item_yPos.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;xPos&quot;, var_item_xPos.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_fridge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(0);&#xD;&#xA;var_literal0.setType(&quot;int&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;PosToIndex posToIndex2 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex2);&#xA;&#xA;eq0.setRuleName(&quot;create_a_fridge&quot;);&#xD;&#xA;eq0.solve(var_firstBlock_yIndex,var_literal0);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_fridge&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex2.setRuleName(&quot;create_a_fridge&quot;);&#xD;&#xA;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;eq0.solve(var_firstBlock_yIndex,var_literal0);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SocketToGroup&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_itemSocket_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;itemSocket&quot;, true, csp);&#xD;&#xA;var_itemSocket_id.setValue(__helper.getValue(&quot;itemSocket&quot;, &quot;id&quot;));&#xD;&#xA;var_itemSocket_id.setType(&quot;String&quot;);&#xA;&#xA;SetId setId0 = new SetId();&#xD;&#xA;csp.getConstraints().add(setId0);&#xA;&#xA;setId0.setRuleName(&quot;SocketToGroup&quot;);&#xD;&#xA;setId0.solve(var_itemSocket_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_itemSocket_id.setBound(false);&#xD;&#xA;&#x9;setId0.solve(var_itemSocket_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;itemSocket&quot;, &quot;id&quot;, var_itemSocket_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SocketToGroup&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_itemSocket_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;itemSocket&quot;, true, csp);&#xD;&#xA;var_itemSocket_id.setValue(__helper.getValue(&quot;itemSocket&quot;, &quot;id&quot;));&#xD;&#xA;var_itemSocket_id.setType(&quot;String&quot;);&#xA;&#xA;SetId setId0 = new SetId();&#xD;&#xA;csp.getConstraints().add(setId0);&#xA;&#xA;setId0.setRuleName(&quot;SocketToGroup&quot;);&#xD;&#xA;setId0.solve(var_itemSocket_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;setId0.solve(var_itemSocket_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;KitchenToGridRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_kitchen_xSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen&quot;, true, csp);&#xD;&#xA;var_kitchen_xSize.setValue(__helper.getValue(&quot;kitchen&quot;, &quot;xSize&quot;));&#xD;&#xA;var_kitchen_xSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(100);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_kitchen_ySize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen&quot;, true, csp);&#xD;&#xA;var_kitchen_ySize.setValue(__helper.getValue(&quot;kitchen&quot;, &quot;ySize&quot;));&#xD;&#xA;var_kitchen_ySize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal1.setValue(500);&#xD;&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;SetDefaultNumber setDefaultNumber0 = new SetDefaultNumber();&#xD;&#xA;csp.getConstraints().add(setDefaultNumber0);&#xA;&#xA;SetDefaultNumber setDefaultNumber1 = new SetDefaultNumber();&#xD;&#xA;csp.getConstraints().add(setDefaultNumber1);&#xA;&#xA;SetDefaultNumber setDefaultNumber2 = new SetDefaultNumber();&#xD;&#xA;csp.getConstraints().add(setDefaultNumber2);&#xA;&#xA;setDefaultNumber0.setRuleName(&quot;KitchenToGridRule&quot;);&#xD;&#xA;setDefaultNumber0.solve(var_grid_blockSize,var_literal0);&#xA;&#xA;setDefaultNumber1.setRuleName(&quot;KitchenToGridRule&quot;);&#xD;&#xA;setDefaultNumber1.solve(var_kitchen_xSize,var_literal1);&#xA;&#xA;setDefaultNumber2.setRuleName(&quot;KitchenToGridRule&quot;);&#xD;&#xA;setDefaultNumber2.solve(var_kitchen_ySize,var_literal1);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_kitchen_xSize.setBound(false);&#xD;&#xA;&#x9;var_kitchen_ySize.setBound(false);&#xD;&#xA;&#x9;setDefaultNumber0.solve(var_grid_blockSize,var_literal0);&#xD;&#xA;&#x9;setDefaultNumber1.solve(var_kitchen_xSize,var_literal1);&#xD;&#xA;&#x9;setDefaultNumber2.solve(var_kitchen_ySize,var_literal1);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;kitchen&quot;, &quot;xSize&quot;, var_kitchen_xSize.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;kitchen&quot;, &quot;ySize&quot;, var_kitchen_ySize.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;KitchenToGridRule&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_kitchen_xSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen&quot;, true, csp);&#xD;&#xA;var_kitchen_xSize.setValue(__helper.getValue(&quot;kitchen&quot;, &quot;xSize&quot;));&#xD;&#xA;var_kitchen_xSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(100);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_kitchen_ySize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen&quot;, true, csp);&#xD;&#xA;var_kitchen_ySize.setValue(__helper.getValue(&quot;kitchen&quot;, &quot;ySize&quot;));&#xD;&#xA;var_kitchen_ySize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal1.setValue(500);&#xD;&#xA;var_literal1.setType(&quot;&quot;);&#xA;&#xA;SetDefaultNumber setDefaultNumber0 = new SetDefaultNumber();&#xD;&#xA;csp.getConstraints().add(setDefaultNumber0);&#xA;&#xA;SetDefaultNumber setDefaultNumber1 = new SetDefaultNumber();&#xD;&#xA;csp.getConstraints().add(setDefaultNumber1);&#xA;&#xA;SetDefaultNumber setDefaultNumber2 = new SetDefaultNumber();&#xD;&#xA;csp.getConstraints().add(setDefaultNumber2);&#xA;&#xA;setDefaultNumber0.setRuleName(&quot;KitchenToGridRule&quot;);&#xD;&#xA;setDefaultNumber0.solve(var_kitchen_xSize,var_literal1);&#xA;&#xA;setDefaultNumber1.setRuleName(&quot;KitchenToGridRule&quot;);&#xD;&#xA;setDefaultNumber1.solve(var_kitchen_ySize,var_literal1);&#xA;&#xA;setDefaultNumber2.setRuleName(&quot;KitchenToGridRule&quot;);&#xD;&#xA;setDefaultNumber2.solve(var_grid_blockSize,var_literal0);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_grid_blockSize.setBound(false);&#xD;&#xA;&#x9;setDefaultNumber0.solve(var_kitchen_xSize,var_literal1);&#xD;&#xA;&#x9;setDefaultNumber1.solve(var_kitchen_ySize,var_literal1);&#xD;&#xA;&#x9;setDefaultNumber2.solve(var_grid_blockSize,var_literal0);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;grid&quot;, &quot;blockSize&quot;, var_grid_blockSize.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_horizontal_table&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;PosToIndex posToIndex0 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;posToIndex0.setRuleName(&quot;create_a_horizontal_table&quot;);&#xD;&#xA;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_horizontal_table&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_item_yPos.setBound(false);&#xD;&#xA;&#x9;var_item_xPos.setBound(false);&#xD;&#xA;&#x9;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;yPos&quot;, var_item_yPos.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;xPos&quot;, var_item_xPos.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_horizontal_table&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;PosToIndex posToIndex0 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;posToIndex0.setRuleName(&quot;create_a_horizontal_table&quot;);&#xD;&#xA;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_horizontal_table&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_sink&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(0);&#xD;&#xA;var_literal0.setType(&quot;int&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;PosToIndex posToIndex2 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex2);&#xA;&#xA;eq0.setRuleName(&quot;create_a_sink&quot;);&#xD;&#xA;eq0.solve(var_firstBlock_xIndex,var_literal0);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_sink&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex2.setRuleName(&quot;create_a_sink&quot;);&#xD;&#xA;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_item_yPos.setBound(false);&#xD;&#xA;&#x9;var_item_xPos.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_firstBlock_xIndex,var_literal0);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;yPos&quot;, var_item_yPos.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;xPos&quot;, var_item_xPos.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_sink&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(0);&#xD;&#xA;var_literal0.setType(&quot;int&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;PosToIndex posToIndex2 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex2);&#xA;&#xA;eq0.setRuleName(&quot;create_a_sink&quot;);&#xD;&#xA;eq0.solve(var_firstBlock_xIndex,var_literal0);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_sink&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex2.setRuleName(&quot;create_a_sink&quot;);&#xD;&#xA;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;eq0.solve(var_firstBlock_xIndex,var_literal0);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex2.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_vertical_table&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;PosToIndex posToIndex0 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;posToIndex0.setRuleName(&quot;create_a_vertical_table&quot;);&#xD;&#xA;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_vertical_table&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_item_yPos.setBound(false);&#xD;&#xA;&#x9;var_item_xPos.setBound(false);&#xD;&#xA;&#x9;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;yPos&quot;, var_item_yPos.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;item&quot;, &quot;xPos&quot;, var_item_xPos.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;create_a_vertical_table&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(__helper.getValue(&quot;item&quot;, &quot;yPos&quot;));&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(__helper.getValue(&quot;grid&quot;, &quot;blockSize&quot;));&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;xIndex&quot;));&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xA;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(__helper.getValue(&quot;item&quot;, &quot;xPos&quot;));&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xA;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(__helper.getValue(&quot;firstBlock&quot;, &quot;yIndex&quot;));&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xA;&#xA;PosToIndex posToIndex0 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex0);&#xA;&#xA;PosToIndex posToIndex1 = new PosToIndex();&#xD;&#xA;csp.getConstraints().add(posToIndex1);&#xA;&#xA;posToIndex0.setRuleName(&quot;create_a_vertical_table&quot;);&#xD;&#xA;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xA;&#xA;posToIndex1.setRuleName(&quot;create_a_vertical_table&quot;);&#xD;&#xA;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;posToIndex0.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;&#x9;posToIndex1.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_fridge/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_itemSocket_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;itemSocket.id&quot;, true, csp);&#xD;&#xA;var_itemSocket_id.setValue(itemSocket.getId());&#xD;&#xA;var_itemSocket_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetId setId = new SetId();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setId);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setId.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setId.solve(var_itemSocket_id);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/SocketToGroup/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(500);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_kitchen_xSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen.xSize&quot;, true, csp);&#xD;&#xA;var_kitchen_xSize.setValue(kitchen.getXSize());&#xD;&#xA;var_kitchen_xSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_kitchen_ySize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;kitchen.ySize&quot;, true, csp);&#xD;&#xA;var_kitchen_ySize.setValue(kitchen.getYSize());&#xD;&#xA;var_kitchen_ySize.setType(&quot;double&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetDefaultNumber setDefaultNumber = new SetDefaultNumber();&#xD;&#xA;SetDefaultNumber setDefaultNumber_0 = new SetDefaultNumber();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setDefaultNumber);&#xD;&#xA;csp.getConstraints().add(setDefaultNumber_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setDefaultNumber.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber.solve(var_kitchen_xSize,literal0);&#xD;&#xA;setDefaultNumber_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;setDefaultNumber_0.solve(var_kitchen_ySize,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/KitchenToGridRule/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_horizontal_table/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_sink/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_grid_blockSize = CSPFactoryHelper.eINSTANCE.createVariable(&quot;grid.blockSize&quot;, true, csp);&#xD;&#xA;var_grid_blockSize.setValue(grid.getBlockSize());&#xD;&#xA;var_grid_blockSize.setType(&quot;double&quot;);&#xD;&#xA;Variable var_item_yPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.yPos&quot;, true, csp);&#xD;&#xA;var_item_yPos.setValue(item.getYPos());&#xD;&#xA;var_item_yPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_yIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.yIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_yIndex.setValue(firstBlock.getYIndex());&#xD;&#xA;var_firstBlock_yIndex.setType(&quot;int&quot;);&#xD;&#xA;Variable var_item_xPos = CSPFactoryHelper.eINSTANCE.createVariable(&quot;item.xPos&quot;, true, csp);&#xD;&#xA;var_item_xPos.setValue(item.getXPos());&#xD;&#xA;var_item_xPos.setType(&quot;double&quot;);&#xD;&#xA;Variable var_firstBlock_xIndex = CSPFactoryHelper.eINSTANCE.createVariable(&quot;firstBlock.xIndex&quot;, true, csp);&#xD;&#xA;var_firstBlock_xIndex.setValue(firstBlock.getXIndex());&#xD;&#xA;var_firstBlock_xIndex.setType(&quot;int&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;PosToIndex posToIndex = new PosToIndex();&#xD;&#xA;PosToIndex posToIndex_0 = new PosToIndex();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(posToIndex);&#xD;&#xA;csp.getConstraints().add(posToIndex_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;posToIndex.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex.solve(var_grid_blockSize,var_item_yPos,var_firstBlock_yIndex);&#xD;&#xA;posToIndex_0.setRuleName(&quot;NoRuleName&quot;);&#xD;&#xA;posToIndex_0.solve(var_grid_blockSize,var_item_xPos,var_firstBlock_xIndex);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/KitchenToGridLanguage/model/KitchenToGridLanguage.ecore#//Rules/create_a_vertical_table/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
</sdmUtil:CompilerInjection>
